{"pageProps":{"postData":{"id":["2023","aws_from_scratch_root_account"],"path":"2023/aws_from_scratch_root_account","contentHtml":"<p>Starting a new AWS account from scratch can be overwhelming but following this\narticle will get you setup with an AWS Root (Payer) account that can be\nmanaged through infrastructure as code (IaC) through Terraform.</p>\n<h1>What we will do</h1>\n<ul>\n<li>Setup a root AWS account that is managed througuh terraform</li>\n<li>Setup OIDC authentication with Terraform Cloud so it can talk to AWS</li>\n<li>Setup Github Actions authentication with Terraform Cloud so we can run plan\nand apply through the CI/CD pipeline.</li>\n</ul>\n<h1>Setup AWS Access</h1>\n<p>It is very bad practice to use the root account for much of anything but for\nbootstrapping the account it is necessary, so the first step is to get your\n<code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code></p>\n<p>To do this click your account and choose <code>Security Credentials</code> in the top\nright:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/security_credentials.png\" height=\"200\">\n</center>\n<p>Then choose <code>Create Access key</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/create_access_token.png\" width=\"200\">\n</center>\n<p>You need to set these environment variables in your shell so that your local\nshell has access to AWS. After you set them you can verify you set them correct\nby running:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ aws sts get-caller-identity\n</code></pre>\n<p>and you should get a result similar to:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"UserId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"777777777777\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Account\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"888888888888\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Arn\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"arn:aws:iam::888888888888:root\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Bootstrap</h2>\n<p>Before you can manage any of your accounts through Terraform Cloud you'll need\nbootstrap some core infrastructure like OIDC so Terraform Cloud can authenticate\nsecurely and manage AWS Resources on your behalf.</p>\n<p>I personally prefer doing this in two repositories:</p>\n<ul>\n<li>\n<p><code>infra-bootstrap</code>: This repository does the bare minimum to hook up terraform\ncloud with your AWS account and stores the state in git.  Its the only infra\nthat will not be controlled by your CI/CD pipeline.</p>\n</li>\n<li>\n<p><code>infra</code>: The actual repository where all the rest of your AWS resources are\nmanaged.  It will store state in Terraform Cloud and you can introduce a\nCI/CD pipeline for approving changes.</p>\n</li>\n</ul>\n<p>After manually creating the git repository <code>infra-boostrap</code> in your Github\naccount We will need 3 providers to bootstrap the account <code>aws</code>, <code>github</code>, and\n<code>tfe</code>.</p>\n<h3>Variables</h3>\n<p>Create a <code>1-variables.tf</code> where we can define the variables we'll need\nfor creating these resources.</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_aws_audience\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"aws.workload.identity\"</span>\n  description = <span class=\"hljs-string\">\"The audience value to use in run identity tokens\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_hostname\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"app.terraform.io\"</span>\n  description = <span class=\"hljs-string\">\"The hostname of the TFC or TFE instance you'd like to use with AWS\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_project_name\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"Default Project\"</span>\n  description = <span class=\"hljs-string\">\"The project under which a workspace will be created\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_name\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The name of your Terraform Cloud organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_owner\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The owner of the TFC organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_workspaces\"</span> {\n  type        = list(string)\n  description = <span class=\"hljs-string\">\"The list of TFC workspaces\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_organization\"</span> {\n  description = <span class=\"hljs-string\">\"The organization the repositories are owned by\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_repo_name\"</span> {\n  description = <span class=\"hljs-string\">\"The name of the git reppository we'll create for managing infra\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_default_branch\"</span> {\n  description = <span class=\"hljs-string\">\"The default branch to utilize\"</span>\n  type        = string\n  default     = <span class=\"hljs-string\">\"main\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_oauth_client_id\"</span> {\n  description = <span class=\"hljs-string\">\"The token for the TFC OAuth client shown under VCS providers\"</span>\n  type        = string\n  default     = null\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"aws_root_account_id\"</span> {\n  description = <span class=\"hljs-string\">\"The AWS root account we want to apply these changes to\"</span>\n  type        = string\n}\n</code></pre>\n<p>We will use these variables in the later modules but they are mostly metadata\naround the terraform and github accounts you'll need to setup manually.</p>\n<h3>Providers</h3>\n<p>Create a file called <code>2-main.tf</code> and define the providers:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  required_providers {\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.41.0\"</span>\n    }\n\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    github = {\n      source  = <span class=\"hljs-string\">\"integrations/github\"</span>\n      version = <span class=\"hljs-string\">\"5.18.3\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  <span class=\"hljs-comment\"># Root account, all other accounts should be provisioned</span>\n  <span class=\"hljs-comment\"># via pull requests</span>\n  allowed_account_ids = [var.aws_root_account_id]\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"github\"</span> {\n  owner = var.github_organization\n}\n</code></pre>\n<p>The key things there are we define <code>allowed_account_ids</code> to prevent us from\nworking against any account that isn't the root and we are using one of the\nvariables we defines earlier.</p>\n<h3>Github</h3>\n<p>We will utilize <code>terraform</code> to create the second git repository where the rest\nof the infrastructure will go. Create a file called <code>3-github.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_repository\"</span> <span class=\"hljs-string\">\"repo\"</span> {\n  name        = var.github_repo_name\n  description = <span class=\"hljs-string\">\"Infrastructure Repository\"</span>\n  visibility  = <span class=\"hljs-string\">\"private\"</span>\n  auto_init   = true\n  has_issues  = true\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_branch_default\"</span> <span class=\"hljs-string\">\"default\"</span> {\n  repository = github_repository.repo.name\n  branch     = var.github_default_branch\n}\n\n<span class=\"hljs-keyword\">output</span> <span class=\"hljs-string\">\"repository_id\"</span> {\n  value = github_repository.repo.id\n}\n</code></pre>\n<p>This will generate a new repository in your account called <code>infra</code>.</p>\n<h3>Terraform Cloud</h3>\n<p>Now we need to setup dynamic credentials so the terraform cloud agent is\nallowed to take actions on your behalf.   To do this we'll setup an IAM\nrole and an OIDC provider. Create a file called <code>4-tfc.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_organization\"</span> <span class=\"hljs-string\">\"organization\"</span> {\n  name  = var.tfc_organization_name\n  email = var.tfc_organization_owner\n}\n\n/* AWS will use this TLS certificate to verify that requests for dynamic\ncredentials come from Terraform Cloud.*/\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tls_certificate\"</span> <span class=\"hljs-string\">\"tfc_certificate\"</span> {\n  url = <span class=\"hljs-string\">\"https://<span class=\"hljs-variable\">${var.tfc_hostname}</span>\"</span>\n}\n\n/* sets up an OIDC <span class=\"hljs-keyword\">provider</span> in AWS with Terraform Cloud's TLS certificate,\nthe SHA1 fingerprint from the TLS certificate \n*/\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_openid_connect_provider\"</span> <span class=\"hljs-string\">\"tfc_provider\"</span> {\n  url            = <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.url\n  client_id_list = [var.tfc_aws_audience]\n  thumbprint_list = [\n    <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.certificates[<span class=\"hljs-number\">0</span>].sha1_fingerprint\n  ]\n}\n\n/* Policy to allow TFC to assume the AWS IAM role in our account */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n\n    principals {\n      type        = <span class=\"hljs-string\">\"Federated\"</span>\n      identifiers = [aws_iam_openid_connect_provider.tfc_provider.arn]\n    }\n    condition {\n      test     = <span class=\"hljs-string\">\"StringEquals\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:aud\"</span>\n\n      values = [\n        <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${<span class=\"hljs-meta\">one(aws_iam_openid_connect_provider.tfc_provider.client_id_list)</span>}</span>\"</span>\n      ]\n    }\n\n    condition {\n      test     = <span class=\"hljs-string\">\"StringLike\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:sub\"</span>\n\n      values = [\n        for workspace in var.tfc_workspaces : <span class=\"hljs-string\">\"organization:<span class=\"hljs-variable\">${tfe_organization.organization.name}</span>:project:<span class=\"hljs-variable\">${var.tfc_project_name}</span>:workspace:<span class=\"hljs-variable\">${workspace}</span>:run_phase:*\"</span>\n      ]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRoleWithWebIdentity\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name               = <span class=\"hljs-string\">\"tfc-agent\"</span>\n  assume_role_policy = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.assume_role.json\n}\n\n/* Policy for what the TFC agent is allowed to do */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  version = <span class=\"hljs-string\">\"2012-10-17\"</span>\n\n  statement {\n    actions   = [<span class=\"hljs-string\">\"*\"</span>]\n    effect    = <span class=\"hljs-string\">\"Allow\"</span>\n    resources = [<span class=\"hljs-string\">\"*\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_policy\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name        = <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>\n  description = <span class=\"hljs-string\">\"Access policy for the TFC agent\"</span>\n  policy      = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.tfc-agent.json\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"hljs-string\">\"tfc-access-attach\"</span> {\n  role       = aws_iam_role.tfc-agent.name\n  policy_arn = aws_iam_policy.tfc-agent.arn\n}\n\n/* Fetch an oauth token from the client */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_oauth_client\"</span> <span class=\"hljs-string\">\"github\"</span> {\n  /* Don't fetch the client if we don't have the client_id */\n  count           = var.github_oauth_client_id != null ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n  oauth_client_id = var.github_oauth_client_id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n  count        = length(var.tfc_workspaces)\n  name         = var.tfc_workspaces[count.index]\n  organization = tfe_organization.organization.name\n\n  working_directory = var.tfc_workspaces[count.index]\n\n  /* This generates a webhook on the github repository so plans are triggered\n  automatically.   We dynamically set the setting because we will not have the\n  oauth client ID on first pass.\n  */\n  dynamic <span class=\"hljs-string\">\"vcs_repo\"</span> {\n    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []\n    content {\n      identifier     = format(<span class=\"hljs-string\">\"%s/%s\"</span>, var.github_organization, github_repository.repo.name)\n      oauth_token_id = <span class=\"hljs-keyword\">data</span>.tfe_oauth_client.github[<span class=\"hljs-number\">0</span>].oauth_token_id\n    }\n  }\n}\n\n/* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-auth\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_PROVIDER_AUTH\"</span>\n  value        = true\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Enable dynamic auth on the TFC agents\"</span>\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-role\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_RUN_ROLE_ARN\"</span>\n  value        = aws_iam_role.tfc-agent.arn\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Tell TFC what Role to run as\"</span>\n}\n</code></pre>\n<p>This module is dynamic because there is one piece that will require a\nmanul oauth setup for github.  So the first pass will apply without it\nand then later on we'll create it and run the apply again.</p>\n<h2>Applying the changes</h2>\n<p>Now we just need to define our settings for the module and we'll get our\ninfrastructure applied.  Create a file called <code>settings.auto.tfvars</code> and\npopulate it with the content for your account.  This is an example of what\nthis should look like:</p>\n<pre><code class=\"hljs language-hcl\">tfc_organization_name  = <span class=\"hljs-string\">\"sontek\"</span>\ntfc_organization_owner = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n\n<span class=\"hljs-comment\"># The workspaces you want to create and be able to manage with IaC</span>\ntfc_workspaces = [\n  <span class=\"hljs-string\">\"root\"</span>\n]\n<span class=\"hljs-comment\"># this can be your username</span>\ngithub_organization    = <span class=\"hljs-string\">\"sontek\"</span>\ngithub_repo_name       = <span class=\"hljs-string\">\"sontek-infra\"</span>\naws_root_account_id    =  <span class=\"hljs-string\">\"888888888888\"</span>\n</code></pre>\n<p>Now run:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ terraform login\n‚ùØ terraform init\n</code></pre>\n<p>and you should see:</p>\n<pre><code class=\"hljs\">Terraform has been successfully initialized!\n</code></pre>\n<p>Now lets run our plan:</p>\n<pre><code class=\"hljs language-hcl\">‚ùØ <span class=\"hljs-keyword\">terraform</span> plan\n</code></pre>\n<p>You should see a result:</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Plan:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">to</span> add, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> change, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> destroy.\n</code></pre>\n<p>Apply it to make those resources:</p>\n<pre><code class=\"hljs language-hcl\">‚ùØ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>At this point it:</p>\n<ol>\n<li>Created a terraform cloud organization</li>\n<li>Created a terraform cloud workspace</li>\n<li>Created a git repository</li>\n</ol>\n<h1>Verify TFC can talk to AWS</h1>\n<p>To verify that TFC can communicate with AWS through the dynamic credentials,\nlets clone the repository and make some dummy resources. After you've cloned\nthe repository lets make a folder for the workspace <code>root</code> that we defined in\nbootstrap:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ <span class=\"hljs-built_in\">mkdir</span> root\n‚ùØ <span class=\"hljs-built_in\">cd</span> root\n</code></pre>\n<p>Now create a <code>1-providers.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  cloud {\n    organization = <span class=\"hljs-string\">\"sontek\"</span>\n\n    workspaces {\n      name = <span class=\"hljs-string\">\"root\"</span>\n    }\n  }\n\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.42.0\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  default_tags {\n    tags = {\n      Owner   = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n      Env     = <span class=\"hljs-string\">\"Root\"</span>\n      Service = <span class=\"hljs-string\">\"BusinessOperations\"</span>\n    }\n  }\n}\n</code></pre>\n<p><strong>NOTE</strong>: You should replace <code>organization</code>, <code>workspaces.name</code>, and\n<code>tags.Owner</code> to be your own values.</p>\n<p>Now create a small resource to prove everything is working, we'll use SQS for\nthis. Create a file called <code>2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                        = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>If you run the plan you should see the resource it wants to create:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ terraform init\n‚ùØ terraform plan\n\n</code></pre>\n<p>and you should see the run is executing in terraform cloud:</p>\n<pre><code class=\"hljs language-arduino\">Running plan in Terraform Cloud. Output will stream here. Pressing Ctrl-C\nwill stop streaming the logs, but will <span class=\"hljs-keyword\">not</span> stop the plan running remotely.\n</code></pre>\n<p>You can click the link it provides to see the logs. Now lets apply this\nresource to see it all working:</p>\n<pre><code class=\"hljs language-hcl\">‚ùØ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>You should get a response like:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">Apply</span> <span class=\"hljs-string\">complete!</span> <span class=\"hljs-attr\">Resources:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">added,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">changed,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">destroyed.</span>\n</code></pre>\n<p>So Terraform Cloud has full access to create AWS resources!   The final step\nis to get github running the plan/apply on pull requests. Commit these files\nto your repository and we'll remove them in a pull request. Create a\n<code>.gitignore</code> file in the root:</p>\n<pre><code class=\"hljs language-hcl\">.<span class=\"hljs-keyword\">terraform</span>*\n</code></pre>\n<p>and commit all the files:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ git add *\n‚ùØ git commit -m <span class=\"hljs-string\">\"initial infra\"</span>\n‚ùØ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<h1>Github VCS Provider</h1>\n<p>To setup oauth between github and terraform cloud so it can manage the webhooks\nyou need to login to the [https://app.terraform.io](Terraform Cloud Console) and\ninitiate the connection.</p>\n<p>Select the newly created organization and then click <code>Settings</code>.  In the sidebar\nthere will be a section <code>Version Control</code> and you want to select <code>Providers</code> under\nthat.</p>\n<p>At this point you should see an <code>Add a VCS Provider</code> button, you want to select\n<code>Github.com (Custom)</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_vcs_provider.png\" height=\"250\">\n</center>\n<p>Follow the on-screen instructions to create a new GitHub OAuth application on your\naccount. For me, I went to <a href=\"https://github.com/settings/applications/new\">here</a> and\nprovided the information TFC displayed:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_github_app.png\" height=\"300\">\n</center>\n<p>On the Github side you need to save the <code>Client ID</code> and you need to click\n<code>Generate a new client secret</code>.   Provide those details to terraform cloud and\nthen we should be ready to send our first PR!</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_oauth_settings.png\" height=\"300\">\n</center>\n<h2>Finish Bootstrap</h2>\n<p>At this point we need to return to the bootstrap repository and provide it the\nnew OAuth Client ID for its <code>github_oauth_client_id</code> setting.  To get the value\nfor this the easiest way is to drill into the VCS provider in terraform and click\n<code>Edit Client</code>.   In the URL you'll see the Client ID, it should start with\n<code>oc-...</code>.</p>\n<p>Now return back to the <code>bootstrap</code> repository and edit <code>settings.auto.tfvars</code> and\nset the final setting:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">github_oauth_client_id</span> = <span class=\"hljs-string\">\"oc-......\"</span>\n</code></pre>\n<p>Now you should be able to run a plan and see the <code>vcs_repo</code> get added in-place:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ terraform plan\n\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  <span class=\"hljs-comment\"># tfe_workspace.workspaces[0] will be updated in-place</span>\n  ~ resource <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n        <span class=\"hljs-built_in\">id</span>                            = <span class=\"hljs-string\">\"ws-...\"</span>\n        name                          = <span class=\"hljs-string\">\"root\"</span>\n        <span class=\"hljs-comment\"># (20 unchanged attributes hidden)</span>\n\n      + vcs_repo {\n          + identifier         = <span class=\"hljs-string\">\"sontek/sontek-infra\"</span>\n          + ingress_submodules = <span class=\"hljs-literal\">false</span>\n          + oauth_token_id     = <span class=\"hljs-string\">\"ot-...\"</span>\n        }\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre>\n<p>Apply the change!</p>\n<pre><code class=\"hljs language-hcl\">‚ùØ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>After you apply the change, if you go to <code>Settings</code> -> <code>Webhooks</code> of the <code>infra</code>\nrepository that was created earlier you should see a new terraform cloud webhook\nwas created.</p>\n<center>\n<img src=\"/images/posts/aws_root_account/github_webhooks.png\" width=\"350\">\n</center>\n<h1>Send your first pull request</h1>\n<p>Now you should be able to send a pull request tearing down the SQS resource we\ngenerated at the beginning and terraform cloud will take care of the rest!\nWhen you merge it will apply the changes.</p>\n<h1>Helpful Resources</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials?product_intent=terraform\">Terraform Dynamic Credentials Tutorial</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration\">Terraform docs on Dynamic Credentials</a></li>\n</ul>","category":"AWS","date":"2023-03-31T20:00:00-04:00","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Setting up your Root Account for IaC (using Terraform Cloud)"}},"__N_SSG":true}