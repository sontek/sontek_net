{"pageProps":{"postData":{"id":["2022","local_kubeadm_cluster"],"path":"2022/local_kubeadm_cluster","contentHtml":"<p>I’m going to show you how to get a real kubernetes cluster setup locally on top of virtual\nmachines!  I’ll be using multipass but feel free to use virtualbox, proxmox, or whatever your\nfavorite cloud provider is.</p>\n<p>kubeadm a production ready kubernetes install tool and I prefer to use it over minikube, kind,\netc. because it gives you a more real world experience for <em>managing</em> the kubernetes cluster.\nThis isn’t important if you are a user of the cluster but if you have to run your own this is\na great way to gain some daily experience.</p>\n<p>The kubernetes documentation on kubeadm is great and you can find it <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">here</a>.</p>\n<p>The differences between this blog and the kubernetes docs is that they leave a lot of decisions\nup to the reader such as:</p>\n<ul>\n<li>choosing a container runtime</li>\n<li>Selecting and installing a CNI (container network interface)</li>\n</ul>\n<p>I’m going to be opinionated and make specific technology decisions such as using containerd and\ncilium so that you don't have to think about those decisions.</p>\n<h2>Getting your Virtual Machines setup!</h2>\n<p>The minimum requirements for a control plane node in kubernetes is 2gb of RAM and 2 CPUs.  Since\nwe actually want to be able to schedule workloads on the workers afterwards we are going to setup\na cluster that looks like this:</p>\n<ul>\n<li>Control Plane: 2gb RAM, 2 CPU</li>\n<li>Worker: 4gb RAM, 2 CPU</li>\n</ul>\n<p>Since we’ll be using multipass to launch the nodes, we can do that now:</p>\n<pre><code class=\"hljs language-bash\">❯ multipass launch -c 2 -m 4G -d 10G -n controlplane 22.04\n❯ multipass launch -c 2 -m 4G -d 10G -n worker 22.04\n❯ multipass list\nName                    State             IPv4             Image\ncontrolplane            Running           192.168.64.7     Ubuntu 22.04 LTS\nworker                  Running           192.168.64.8     Ubuntu 22.04 LTS\n</code></pre>\n<p>Now we can start working on our controlplane first, lets shell in:</p>\n<pre><code class=\"hljs language-bash\">❯ multipass shell controlplane\n</code></pre>\n<p>Lets first add the kubernetes repo to the system so we have access to all the kubernetes tools:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n\n❯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\n❯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n</code></pre>\n<p>Now that our system is setup, we can move on to getting a container runtime.</p>\n<h2>Getting your Container Runtime!</h2>\n<p>Before we start pulling in kubernetes components we need to get a container runtime setup on the\nmachine.   We we are going to use containerd for this purpose.  You can view the docs of for it\n<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">here</a>.</p>\n<p>Which will download the latest binary and set it up.   I’m going to walk you through how to do it\nusing the version packaged with Ubuntu which could be older than the latest release.</p>\n<p>First thing we want to do is configure the networking to allow iptables to manage:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\n❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n</code></pre>\n<p>We also need to disable some default systemd settings for <code>rp_filter</code>  because\nthey are not compatible with cilium. See the bug report\n<a href=\"https://github.com/cilium/cilium/commit/cabc6581b8128681f4ed23f8d6dc463180eea61e\">here</a></p>\n<pre><code class=\"hljs language-bash\">❯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\n❯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n</code></pre>\n<p>Then we need to refresh sysctl so those settings are applied:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo systemctl restart systemd-modules-load\n❯ sudo sysctl --system\n</code></pre>\n<p>You should see it applying all the changes:</p>\n<pre><code class=\"hljs language-ini\">* Applying /etc/sysctl.d/k8s.conf ...\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.ipv4.ip_forward</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>If you do not, the netfilter module may not have loaded properly:</p>\n<pre><code class=\"hljs language-bash\">❯ lsmod |grep br_netfilter\nbr_netfilter           28672  0\nbridge                176128  1 br_netfilter\n</code></pre>\n<p>You want to make sure <code>rp_filter</code> is <code>0</code> everywhere as well for cilium:</p>\n<pre><code class=\"hljs language-ini\">❯ sudo sysctl -a | grep '\\.rp_filter'\n<span class=\"hljs-attr\">net.ipv4.conf.all.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_host.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_net.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_vxlan.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.enp0s1.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lo.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxc0965b7b545f7.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxcb05ffd84ab74.rp_filter</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>Now lets pull down the container runtime we’ll be using which is containerd.</p>\n<p>Ubuntu ships with a very old version of containerd so you need to upgrade to\nthe version shipped from the docker repos:\nYou can find which versions are available by running:</p>\n<pre><code class=\"hljs language-bash\">❯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\n❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n❯ sudo apt-get update\n</code></pre>\n<pre><code class=\"hljs language-bash\">❯ sudo apt-cache madison containerd.io\ncontainerd.io |    1.6.8-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.7-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.6-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.4-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.11-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.10-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\n</code></pre>\n<p>We are going to use the latest version available which was 1.6.8-1</p>\n<pre><code class=\"hljs language-bash\">❯ sudo apt-get install containerd.io=1.6.8-1 -y\n</code></pre>\n<p>Then we'll setup a configuration that enables containerd to use the systemd\ncgroup.  We are hard coding this config instead of using <code>containerd config default</code>\nbecause that currently has had a <a href=\"https://github.com/containerd/containerd/issues/4574\">bug</a>\nfor many years that generates an invalid config.</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\n❯ sudo systemctl restart containerd.service\n</code></pre>\n<p>You can verify its running with ctr:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo ctr --address /var/run/containerd/containerd.sock containers list\nCONTAINER    IMAGE    RUNTIME\n</code></pre>\n<p>Now that this is working we can move on to getting kubernetes installed!</p>\n<h2>Using kubeadm!</h2>\n<p>Now we need to get the kubernetes tools installed onto the system.  I’m going to be using 1.23\nbut to find the latest version you can run:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo apt-cache madison kubeadm|<span class=\"hljs-built_in\">head</span> -n2\n   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n</code></pre>\n<p>Then install the version you want, we install kubelet and kubeadm here to make\nsure the versions align:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n</code></pre>\n<p>This will pull in a few tools, including an alternative to <code>ctr</code> that we used earlier called\n<code>crictl</code>.  You can check that it is available to you doing this:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps\n</code></pre>\n<p>We can finally init our cluster:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo kubeadm init\n</code></pre>\n<p>Once that finishes running it should give you some tips setup your configuration, it should look like this:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\n❯ sudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\n❯ sudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n<p>You can run those on the master node for now, but later I'll show you how to move\nthe config to your host computer.</p>\n<p>Now you should be able to check that your node is not ready yet:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get nodes\nNAME           STATUS     ROLES                  AGE     VERSION\ncontrolplane   NotReady   control-plane,master   4m16s   v1.23.5\n</code></pre>\n<p><em>Note</em>: If you recieve \"The connecto to the server was refused\" error,\nThe cluster starting up and getting all the dependencies running could take\na bit of time.  So if you aren't able to communicate right away you can check\nwhich pods are up and running with <code>crictl</code>.  You'll need <code>kube-apiserver</code> up\nand running.  If it isn't you can check:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps -a\nCONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD\n8322192c4605c       bd8cc6d582470       36 seconds ago      Running             kube-proxy                4                   344c4f7fffbe8       kube-proxy-drm46\n30ce27c40adb2       81a4a8a4ac639       2 minutes ago       Exited              kube-controller-manager   4                   3a819c3a864b2       kube-controller-manager-controlplane\n7709fd5e92898       bd8cc6d582470       2 minutes ago       Exited              kube-proxy                3                   7cc6922c82015       kube-proxy-drm46\n10432b81d7c61       3767741e7fba7       2 minutes ago       Exited              kube-apiserver            4                   e64ddf3679d98       kube-apiserver-controlplane\n</code></pre>\n<p>which will show you pods that have exited. You can grab the container ID for\nkube-apiserver and read its logs:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock logs 10432b81d7c61\n</code></pre>\n<p>There are a few ways to figure out why the node isn’t ready yet.  Usually I would check the\n<code>kubelet</code> logs first:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo journalctl -flu kubelet\n-- Logs begin at Sun 2022-04-17 19:22:19 AST. --\nApr 17 20:53:15 controlplane kubelet[19727]: E0417 20:53:15.951350   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\nApr 17 20:53:20 controlplane kubelet[19727]: E0417 20:53:20.952148   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\n</code></pre>\n<p>It is clear the problem is that we are missing the CNI.  The other way you can find out what is\ngoing on is describing the node:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl describe node controlplane\n</code></pre>\n<p>This will have a lot of information but if you scroll through there looking at <code>Reason</code> you\nmight see something useful.  In this case under <code>Lease</code> you would see:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl describe node controlplane|grep NotReady\nReady            False   Sun, 17 Apr 2022 20:53:37 -0400   Sun, 17 Apr 2022 20:43:07 -0400   KubeletNotReady              container runtime network not ready: NetworkReady=<span class=\"hljs-literal\">false</span> reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialize\n</code></pre>\n<p>Lets get our CNI installed, we’ll be using cilium!</p>\n<h2>Setting up your CNI!</h2>\n<p>Cilium has great documentation over <a href=\"https://docs.cilium.io/en/v1.9/gettingstarted/k8s-install-kubeadm/\">here</a>,\nbut I’ll walk you through it anyways.  I do recommend checking out their documentation so you\nare familiar with it.   We will use <code>helm</code> to pull down the version of cilium we want:</p>\n<pre><code class=\"hljs language-bash\">❯ curl -fsSL  https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/helm.gpg\n\n❯ sudo apt-get install apt-transport-https --<span class=\"hljs-built_in\">yes</span>\n\n❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://baltocdn.com/helm/stable/debian/ all main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list\n\n❯ sudo apt-get update\n❯ sudo apt-get install helm\n</code></pre>\n<p>Now we can install cilium!  It is <em>very</em> important that you pay attention to the\ncompatibility of cilium with the version of kubernetes you are intstalling. Check\nthe compatibility list <a href=\"https://docs.cilium.io/en/v1.12/concepts/kubernetes/compatibility/\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">❯ helm repo add cilium https://helm.cilium.io/\n❯ helm repo update\n</code></pre>\n<p>Once the repo is added you can list the versions available:</p>\n<pre><code class=\"hljs language-bash\">❯ helm search repo -l|<span class=\"hljs-built_in\">head</span> -n8\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\ncilium/cilium  \t1.12.1       \t1.12.1     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.12.0       \t1.12.0     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.8       \t1.11.8     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.7       \t1.11.7     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.6       \t1.11.6     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.5       \t1.11.5     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.4       \t1.11.4     \teBPF-based Networking, Security, and Observability\n</code></pre>\n<p>So we want <code>1.11.4</code>:</p>\n<pre><code class=\"hljs language-bash\">❯ helm install cilium cilium/cilium --namespace kube-system --version 1.11.4\n</code></pre>\n<p>Now our node should be ready!</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get node\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   24m   v1.23.5\n</code></pre>\n<p>Time to join our worker to the cluster!</p>\n<h2>Joining a worker to the cluster!</h2>\n<p>We have to go through the same steps as the controlplane to get the point that we have a\ncontainer runtime and <code>kubeadm</code>.   I’m not going to talk about the commands a second time but\nI’ll re-iterate them here for ease of following along.</p>\n<p>First open up another shell and connect to the worker:</p>\n<pre><code class=\"hljs language-bash\">❯ multipass shell worker\n</code></pre>\n<p>Now run the following commands:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n❯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\n❯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\n❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n\n❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\n❯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\n❯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n\n❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n❯ sudo systemctl restart systemd-modules-load\n❯ sudo sysctl --system\n\n❯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n❯ sudo apt-get install containerd.io=1.6.8-1 -y\n\n❯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\n❯ sudo systemctl restart containerd.service\n❯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n\n</code></pre>\n<p>From there we should be ready to join the cluster.   When we ran <code>kubeadm init</code> previously it\nprinted a join command out that we could use but I’m going to show you how to do it if you\nwere coming back later and no longer had that token.</p>\n<p>Back on the <em>controplane</em> node run:</p>\n<pre><code class=\"hljs language-bash\">❯ kubeadm token create --print-join-command\nkubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>Now copy that command and run it with <code>sudo</code> on the worker:</p>\n<pre><code class=\"hljs language-bash\">❯ sudo kubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>After this completes it’ll take a minute or two for everything to be synced up but if you go\nback to the master node you should have 2 ready nodes now:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   46m   v1.23.5\nworker         Ready    &#x3C;none>                 79s   v1.23.5\n</code></pre>\n<h2>Accessing the cluster outside of the VMs!</h2>\n<p>Now the final part is to get the <code>admin.conf</code> as a kubeconfig on your machine so you can control\nit from outside of the cluster.   To do this we can use scp</p>\n<pre><code class=\"hljs language-bash\">multipass transfer controlplane:/home/ubuntu/.kube/config local.config\n</code></pre>\n<p>Normally kubernetes configuration is in ~/.kube/config but I like to maint a separate file for\neach cluster and then I set the <code>KUBECONFIG</code> env var to access it.</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> KUBECONFIG=local.config\n❯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   56m   v1.23.5\nworker         Ready    &#x3C;none>                 11m   v1.23.5\n</code></pre>","category":"Kubernetes","date":"2022-04-16T20:00:00-04:00","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kubeadm"}},"__N_SSG":true}