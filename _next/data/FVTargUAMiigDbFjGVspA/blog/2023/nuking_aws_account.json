{"pageProps":{"postData":{"id":["2023","nuking_aws_account"],"path":"2023/nuking_aws_account","contentHtml":"<p>When you're an SRE/DevOps engineer you'll end up making AWS accounts and\ncreate a lot of cruft in your sandbox and development accounts. AWS\ndoes not make it easy to clear these up but there is a tool called\n<a href=\"https://github.com/rebuy-de/aws-nuke\">aws-nuke</a> that will do it for you!</p>\n<h1>Safe Guards</h1>\n<p>aws-nuke has a few safeguards in place to prevent inadvertent data loss.\nThe first of which is it requires you to alias the targetted account. I\nlike to put <code>nuke</code> in the alias to make it clear.</p>\n<pre><code class=\"hljs language-bash\">aws iam create-account-alias --account-alias nuke-&#x3C;account>\n</code></pre>\n<p>The second safe-guard is the config takes a key called <code>account-blocklist</code>\nthat will guarantee nuke will not run against it no matter what.</p>\n<p>The final safety switch it has is it will not take any action by default,\nit will only execute a dry-run.   You need to run the CLI with\n<code>--no-dry-run</code> if you want it to take action.</p>\n<h1>Getting Started</h1>\n<p>You configure <code>aws-nuke</code> with YAML, so the first step is to define that:</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">regions:</span>\n  - us-east-1\n  - global\n\n<span class=\"hljs-section\">account-blocklist:</span>\n  - <span class=\"hljs-string\">\"888888888888\"</span> <span class=\"hljs-comment\"># production</span>\n\n<span class=\"hljs-section\">accounts:</span>\n  <span class=\"hljs-string\">\"777777777777\"</span>: {} <span class=\"hljs-comment\"># nuke-&#x3C;account></span>\n</code></pre>\n<p>This will prevent us from nuking our production account and target all resources\nin the account we actually want to nuke.</p>\n<p>You might want to have it nuke <em>ALL REGIONS</em> in AWS since you may not know which\nregions resources are deployed in.   To do this you can query the regions from AWS:</p>\n<pre><code class=\"hljs language-bash\">❯ aws ec2 describe-regions --all-regions --query <span class=\"hljs-string\">\"Regions[*].RegionName\"</span> --output text | xargs -n 1 | <span class=\"hljs-built_in\">sort</span>\n\naf-south-1\nap-east-1\nap-northeast-1\nap-northeast-2\nap-northeast-3\nap-south-1\nap-south-2\nap-southeast-1\nap-southeast-2\nap-southeast-3\nap-southeast-4\nca-central-1\neu-central-1\neu-central-2\neu-north-1\neu-south-1\neu-south-2\neu-west-1\neu-west-2\neu-west-3\nme-central-1\nme-south-1\nsa-east-1\nus-east-1\nus-east-2\nus-west-1\nus-west-2\n</code></pre>\n<p>Which would give you an updated config of:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">regions:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">global</span>  <span class=\"hljs-comment\"># Global resources like IAM</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">af-south-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-east-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-northeast-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-northeast-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-northeast-3</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-south-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-south-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-southeast-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-southeast-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-southeast-3</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ap-southeast-4</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ca-central-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-central-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-central-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-north-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-south-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-south-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-west-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-west-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">eu-west-3</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">me-central-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">me-south-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sa-east-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">us-east-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">us-east-2</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">us-west-1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">us-west-2</span>\n</code></pre>\n<p>I personally don't recommend targetting all AWS regions at the same time.  It\nwill generate a lot of output and be slow.  You could do it if necessary but\nmost people only have a few regions they use and so they can set those directly.\nFor example it, maybe you only use <code>us-</code> based regions?</p>\n<p>So lets run the dry-run and see what it wants to nuke:</p>\n<pre><code class=\"hljs language-bash\">❯ aws-nuke -c nuke.yaml\n</code></pre>\n<p>This should output something like:</p>\n<pre><code class=\"hljs language-bash\">Do you really want to nuke the account with the ID 777777777777 and the <span class=\"hljs-built_in\">alias</span> <span class=\"hljs-string\">'nuke-sandbox'</span>?\nDo you want to <span class=\"hljs-built_in\">continue</span>? Enter account <span class=\"hljs-built_in\">alias</span> to <span class=\"hljs-built_in\">continue</span>.\n> nuke-sandbox\nus-east-1 - EC2Subnet - subnet-0cd9975a443a6304b - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2Subnet - subnet-0be39d02e399a371c - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2Subnet - subnet-02d7017bd4730ea63 - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2Subnet - subnet-0ec04b28c32708ab2 - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2Subnet - subnet-0eea1b4be084840ed - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2Subnet - subnet-05a294cc04736012e - [DefaultForAz: <span class=\"hljs-string\">\"true\"</span>, DefaultVPC: <span class=\"hljs-string\">\"true\"</span>, OwnerID: <span class=\"hljs-string\">\"777777777777\"</span>] - would remove\nus-east-1 - EC2RouteTable - rtb-0abda0e94015064ca - [DefaultVPC: <span class=\"hljs-string\">\"true\"</span>] - would remove\nus-east-1 - EC2DefaultSecurityGroupRule - sgr-0368525f77bf566ac - [SecurityGroupId: <span class=\"hljs-string\">\"sg-0a59900b52ced5e10\"</span>] - would remove\nus-east-1 - EC2DefaultSecurityGroupRule - sgr-0890a837ed6148729 - [SecurityGroupId: <span class=\"hljs-string\">\"sg-0a59900b52ced5e10\"</span>] - would remove\nus-east-1 - EC2InternetGatewayAttachment - igw-0acfb474f1fd71375 -> vpc-0be5d310ab44c239a - [DefaultVPC: <span class=\"hljs-string\">\"true\"</span>] - would remove\nus-east-1 - SQSQueue - https://sqs.us-east-1.amazonaws.com/777777777777/example-sqs - would remove\nglobal - IAMSAMLProvider - arn:aws:iam::777777777777:saml-provider/AWSSSO_254abb4071f10b25_DO_NOT_DELETE - would remove\nglobal - IAMOpenIDConnectProvider - arn:aws:iam::777777777777:oidc-provider/app.terraform.io - [Arn: <span class=\"hljs-string\">\"arn:aws:iam::777777777777:oidc-provider/app.terraform.io\"</span>] - would remove\nglobal - IAMPolicy - arn:aws:iam::777777777777:policy/tfc-agent-access-policy - [ARN: <span class=\"hljs-string\">\"arn:aws:iam::777777777777:policy/tfc-agent-access-policy\"</span>, Name: <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>, Path: <span class=\"hljs-string\">\"/\"</span>, PolicyID: <span class=\"hljs-string\">\"ANPA2T6PZOBNWI76TKQRF\"</span>] - would remove\nglobal - IAMRole - tfc-agent - [CreateDate: <span class=\"hljs-string\">\"2023-04-02T17:55:23Z\"</span>, LastUsedDate: <span class=\"hljs-string\">\"2023-06-22T13:45:02Z\"</span>, Name: <span class=\"hljs-string\">\"tfc-agent\"</span>, Path: <span class=\"hljs-string\">\"/\"</span>] - would remove\nglobal - IAMRolePolicyAttachment - tfc-agent -> tfc-agent-access-policy - [PolicyArn: <span class=\"hljs-string\">\"arn:aws:iam::777777777777:policy/tfc-agent-access-policy\"</span>, PolicyName: <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>, RoleCreateDate: <span class=\"hljs-string\">\"2023-04-02T17:55:23Z\"</span>, RoleLastUsed: <span class=\"hljs-string\">\"2023-06-22T13:45:02Z\"</span>, RoleName: <span class=\"hljs-string\">\"tfc-agent\"</span>, RolePath: <span class=\"hljs-string\">\"/\"</span>] - would remove\nScan complete: 85 total, 19 nukeable, 66 filtered.\n\nThe above resources would be deleted with the supplied configuration. Provide --no-dry-run to actually destroy resources.\n</code></pre>\n<p>This is great, it fully scanned the account and found every resource to delete!\nIt even wants to delete the DefaultVPC which is usually a good idea.  The one\nresource that should catch your eye that you probably do not want to delete:</p>\n<ul>\n<li><code>arn:aws:iam::777777777777:saml-provider/AWSSSO_254abb4071f10b25_DO_NOT_DELETE</code></li>\n</ul>\n<p>AWS clearly doesn't want us to delete that!</p>\n<h1>Filters</h1>\n<p>To prevent nuke from deleting resources you want to keep you can define presets\nthat you use on each account.  So with our SSO example we want to prevent it\nfrom deleting those resources in a preset.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">presets:</span>\n  <span class=\"hljs-attr\">sso:</span>\n    <span class=\"hljs-attr\">filters:</span>\n      <span class=\"hljs-attr\">IAMSAMLProvider:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"regex\"</span>\n        <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">\"AWSSSO_.*_DO_NOT_DELETE\"</span>\n      <span class=\"hljs-attr\">IAMRole:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"glob\"</span>\n        <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">\"AWSReservedSSO_*\"</span>\n      <span class=\"hljs-attr\">IAMRolePolicyAttachment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"glob\"</span>\n        <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">\"AWSReservedSSO_*\"</span>\n</code></pre>\n<p>You can see in this example I'm targetting specific resource types and then\nmatching them with both <code>regex</code> and <code>glob</code> filter types. These are super\npowerful but a lot of times the simpler filters can be used.  I start with\n<code>contains</code> filter and then go from there:</p>\n<pre><code class=\"hljs language-yaml\">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">contains</span>\n        <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">AWSReservedSSO</span>\n</code></pre>\n<p>Then the other thing you may have noticed is that I was repeating\n<code>AWSReservedSSO</code> multiple times.  To reduce that you can use standard YAML\nanchors.   So the final config for your preset would look like this:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">presets:</span>\n  <span class=\"hljs-attr\">sso:</span>\n    <span class=\"hljs-attr\">filters:</span>\n      <span class=\"hljs-attr\">_DEFAULT_FILTERS:</span> <span class=\"hljs-meta\">&#x26;DEFAULT</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"contains\"</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">\"DO_NOT_DELETE\"</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">\"contains\"</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">\"AWSReservedSSO\"</span>\n\n      <span class=\"hljs-attr\">IAMSAMLProvider:</span> <span class=\"hljs-meta\">*DEFAULT</span>\n      <span class=\"hljs-attr\">IAMRole:</span> <span class=\"hljs-meta\">*DEFAULT</span>\n      <span class=\"hljs-attr\">IAMRolePolicyAttachment:</span> <span class=\"hljs-meta\">*DEFAULT</span>\n</code></pre>\n<p>Now we can use that preset in our accounts configuration:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">accounts:</span>\n  <span class=\"hljs-attr\">\"777777777777\":</span>\n    <span class=\"hljs-attr\">\"presets\":</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sso</span>\n</code></pre>\n<p>When you run this you should see now the resources we want to keep are filtered\nout:</p>\n<pre><code class=\"hljs language-bash\">global - IAMSAMLProvider - arn:aws:iam::777777777777:saml-provider/AWSSSO_254abb4071f10b25_DO_NOT_DELETE - filtered by config\n</code></pre>\n<p>Once you are ready and have your filters in place you can run it for real!</p>\n<pre><code class=\"hljs language-bash\">❯ aws-nuke -c nuke.yaml --no-dry-run\n</code></pre>\n<h1>Next steps</h1>\n<p>One final note about it is that it does not understand the relationship between\nresources and so it could try deleting an EBS volume that is still in use by an\nEC2 instance.  There isn't a great solution for this outside of running nuke a\nfew times.</p>\n<p>The tool is well documented and so you can find the rest of information going to\n<a href=\"https://github.com/rebuy-de/aws-nuke\">https://github.com/rebuy-de/aws-nuke</a>!</p>","category":"DevOps","date":"2023-06-22T00:00:00Z","tags":["AWS"],"title":"Wiping an AWS Account with aws-nuke"}},"__N_SSG":true}