{"pageProps":{"id":["NLP"],"allTagData":{"Python":{"count":7,"posts":[{"id":["2022","intro_to_asdf"],"path":"2022/intro_to_asdf","contentHtml":"<p><a href=\"https://asdf-vm.com/\">asdf</a> is a general purpose version manager that\ncan manage versions of most programming language runtimes through a set\nof plugins.</p>\n<p>With micro-services being all the rage and the ever changing landscape\nof the development world, it is rare to utilize a single version of\nlanguage runtime. Even when you want to upgrade from one to the other\nyou'll need both usable on your system at the same time.</p>\n<p>I've used tools like <code>pyenv</code> and <code>nvm</code> in the past when I needed to change\nversions depending on which project I'm contributing to. But with <code>asdf</code>\nyou have one tool to rule them all!</p>\n<h2>Getting Started</h2>\n<p>The first thing you need to do when working with <code>asdf</code> is grab the\nplugins for the languages you are interested in working with. You can list\nwhat plugins are available:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin list all\ngolang                       *https://github.com/kennyp/asdf-golang.git\ngolangci-lint                 https://github.com/hypnoglow/asdf-golangci-lint.git\nnodejs                       *https://github.com/asdf-vm/asdf-nodejs.git\npoetry                       *https://github.com/asdf-community/asdf-poetry.git\npython                       *https://github.com/danhper/asdf-python.git\nyarn                         *https://github.com/twuni/asdf-yarn.git\n</code></pre>\n<p>On the left will be the name of the plugin and on the right will be the repository\nwhere it lives.  It'll me marked with an asterisk if you already have it installed.</p>\n<p>To install a plugin you say <code>asdf plugin add &#x3C;plugin></code> to get it installed.  You can\nalso provide the repository where you want it pulled from, for example:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n> asdf plugin add python https://github.com/danhper/asdf-python.git\n</code></pre>\n<p>This will not give you any version of those languages, it is only installing the\nplugin that knows how to work with those languages.   You are ready to pull down\nany versions you want at that point:</p>\n<pre><code class=\"hljs language-bash\">> asdf install nodejs 14.19.0\n> asdf install python 3.9.10\n</code></pre>\n<p>Once you have the versions installed you will be able to view them like this:</p>\n<pre><code class=\"hljs language-bash\">> asdf list\ngolang\n  1.17.7\nnodejs\n  --<span class=\"hljs-built_in\">help</span>\n  12.22.10\n  14.19.0\n  16.14.0\n  17.5.0\npoetry\n  1.1.13\npython\n  3.9.10\nyarn\n  1.22.17\n</code></pre>\n<h2>Using the installed languages</h2>\n<p>To activate a specific version of a language you have you have three options:</p>\n<h3>Make it global</h3>\n<p>You can make it global, meaning when you run the tool like <code>python</code> it'll use\nthis version for the system:</p>\n<pre><code class=\"hljs language-bash\">> asdf global python 3.9.10\n</code></pre>\n<h3>Make it local</h3>\n<p>You can make it local, which means it will generate a file in the current\ndirectory named <code>.tool-versions</code> and so whenever you change into a directory\nit will activate the versions defined in there.</p>\n<pre><code class=\"hljs language-bash\">> asdf <span class=\"hljs-built_in\">local</span> nodejs 12.22.10\n> <span class=\"hljs-built_in\">cat</span> .tool-versions \nnodejs 12.22.10\n</code></pre>\n<p>The great thing about this is you can commit that file to git and then anyone\nwho checks out the project and uses <code>asdf</code> will have the same versions activated!</p>\n<h3>Temporary</h3>\n<p>If you want to activate a version of a language temporarily you can swap to it\nfor the current shell:</p>\n<pre><code class=\"hljs language-bash\">> asdf shell golang 1.17.7\n> <span class=\"hljs-built_in\">env</span>|grep -i ASDF\nASDF_GOLANG_VERSION=1.17.7\n</code></pre>\n<p>It sets an environment variable that will have preference over the file. If you\never wonder what versions a directory is using you can run:</p>\n<pre><code class=\"hljs language-bash\">> asdf current\ngolang          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> golang &#x3C;version>\"</span>\nnodejs          12.22.10        .tool-versions\npoetry          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> poetry &#x3C;version>\"</span>\npython          3.9.10          .tool-versions\nyarn            1.22.17         .tool-versions\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://asdf-vm.com/\">asdf</a>  is an AWESOME tool to utilize if you find yourself using many\ndifferent languages or many different versions of the same language. You should check it out\nand see if it can improve your workflow.</p>\n<p>I made a video of me using the tool here:</p>\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/RTaqWRj-6Lg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"Development","date":"2022-02-18T00:00:00Z","tags":["Python","NodeJS","GoLang","Linux"],"title":"Use asdf to manage Python, NodeJS, GoLang and more!"},{"id":["2022","learning_spanish"],"path":"2022/learning_spanish","contentHtml":"<p>I've been living in Puerto Rico for 4 years but two of those have been COVID and so I haven't been able to practice Spanish as much as I'd like. So to speed up my learning I've decided I want to watch a lot of spanish speaking television to start training my ears, but to do this I need a baseline of words I understand to be able to even know what they are saying!</p>\n<p>Learning through apps like Duolingo, Drops, etc start with weird topics like vegetables that don't get you to a very good baseline for actually understanding daily conversations, so I think consuming TV is a better use of my time.</p>\n<h2>Subtitles</h2>\n<p>I've decided the way to understand what the best words to study are is to download every subtitle for every episode of a show I want to watch and then count each word.  The more a word is spoken the more important it is for me to know it since I'll be hearing it a lot in the show.</p>\n<p>I'm going to download subtitles from Netflix. Subtitles in Netflix are in WebVTT format, which looks like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">248</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">58.285</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.163</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">79.33</span>% \nYo de verdad espero que ustedes\nme vean como una amiga, Â¿mmm?\n\n<span class=\"hljs-number\">249</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.247</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">02.539</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nNo como una madrastra.\n\n<span class=\"hljs-number\">250</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">04.250</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">06.127</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nYo nunca te vi como una madrastra.\n</code></pre>\n<p>It gives you a start time, end time, and the text on the screen.   So my first process was parsing this format and just turning it into a list of words using https://github.com/glut23/webvtt-py.</p>\n<h3>Dummy parsing</h3>\n<p>What I basically did was <code>text.split(\" \")</code> and started counting the words.   This approach was quick and painless but it had a few downs falls.    Some words <em>look</em> the same when in reality they are not and so this meant I'd have to study every meaning of a word even if it was more rare.</p>\n<p>An example of this is the word \"como\", you can say:</p>\n<ul>\n<li>Haz como te digo: \"Do as I say\", where como means \"as\"</li>\n<li>como tacos todos los dias: \"I eat tacos every day\", where como is a conjugated form of the verb \"to eat\"</li>\n</ul>\n<p>I need to know which version of a word is being used so I can count it properly.</p>\n<h3>Regular Expressions are always the answer</h3>\n<p>I couldn't figure out what the word was without it being in a complete sentence, but subtitles are fragments.   They are split up into timings for displaying on the screen but they don't include entire sentences.  For example, it might look like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">21.960</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.520</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nSolo las que luchan por ellos\n\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.680</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">25.680</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nconsiguen sus sueÃ±os.\n</code></pre>\n<p>I want to detect the start of a sentence and the end of a sentence and then combine it, so that you end up with \"Solo las que luchan por ellos consiguen sus sueÃ±os.\".   My first thought was a regular expression on punctuation.   This worked well <em>most</em> of the time but there were enough exceptions to the rule that it broke often on generated a lot of broken sentences:</p>\n<ul>\n<li>Abbreviations like \"EE. UU\" for estados unidos (united states)</li>\n<li>Ellipsis</li>\n</ul>\n<p>Splitting on spaces also didn't work for identifying the parts of speech since I needed the context around the word.</p>\n<center>\n<img src=\"/images/posts/learning_spanish/regex-extraction.png\">\n</center>\n<h2>Natural Language Processing</h2>\n<p>So to solve my pain I decided to grab https://spacy.io/ and do some NLP on the subtitles so that I could identify the proper parts of speech and get an accurate representation of the words I needed to learn.</p>\n<p>The way spaCy works is you can send it a sentence and it'll return you a set of tokens:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> spacy\n<span class=\"hljs-meta\">>>> </span>nlp = spacy.load(<span class=\"hljs-string\">\"es_core_news_sm\"</span>)\n<span class=\"hljs-meta\">>>> </span>[x.pos_ <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> nlp(<span class=\"hljs-string\">\"Hola, como estas?\"</span>)]\n[<span class=\"hljs-string\">'PROPN'</span>, <span class=\"hljs-string\">'PUNCT'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'PUNCT'</span>]\n</code></pre>\n<p>So now I could identify the parts of speech and pull sentences together through end of sentence punctation.   The first thing I did was generate a CSV of sentences that looked like this:</p>\n<table>\n<tbody><tr>\n<th>sentence</th>\n<th>start</th>\n<th>end</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>Si no, le voy a cortar todos los deditos</td>\n<td>00:00:20.605</td>\n<td>00:00:24.125</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>Once I had a CSV of sentences I could send those back through spaCy for NLP and then start counting words, to generate another CSV:</p>\n<table>\n<tbody><tr>\n<th>word</th>\n<th>pos</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>a</td>\n<td>ADP</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>cortar</td>\n<td>VERB</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>todos</td>\n<td>PRON</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>From there I had all the data I needed!   So now it was time to start doing some data analysis!</p>\n<h2>Data analysis</h2>\n<p>Using a jupyter notebook ( https://jupyter.org/ ) I grabbed pandas ( https://pandas.pydata.org/ ) and read in my CSVs to start analyzing the results.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\npd.<span class=\"hljs-title function_\">set_option</span>(<span class=\"hljs-string\">'display.max_rows'</span>, <span class=\"hljs-number\">1000</span>)\nwords = pd.<span class=\"hljs-title function_\">read_csv</span>(<span class=\"hljs-string\">'word_data.csv.gz'</span>, compression=<span class=\"hljs-string\">'gzip'</span>, delimiter=<span class=\"hljs-string\">','</span>)\n</code></pre>\n<p>The words dataframe is built up out of the second table I showed above with just words and their parts of speech.   I started off grouping the dataset by the word so I could get a count for how many times it was spoken in every series I parsed:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_result</span> = (words.groupby(words.word).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_result.head(300)\n</code></pre>\n<p>Which returned a list of words and their count:</p>\n<pre><code class=\"hljs language-arduino\">\t<span class=\"hljs-type\">word</span>\tcount\n<span class=\"hljs-number\">0</span>\tque\t<span class=\"hljs-number\">94430</span>\n<span class=\"hljs-number\">1</span>\tno\t<span class=\"hljs-number\">75931</span>\n<span class=\"hljs-number\">2</span>\ta\t<span class=\"hljs-number\">70968</span>\n<span class=\"hljs-number\">3</span>\tde\t<span class=\"hljs-number\">67982</span>\n<span class=\"hljs-number\">4</span>\tser\t<span class=\"hljs-number\">64226</span>\n<span class=\"hljs-number\">5</span>\tla\t<span class=\"hljs-number\">52143</span>\n<span class=\"hljs-number\">6</span>\ty\t<span class=\"hljs-number\">44390</span>\n<span class=\"hljs-number\">7</span>\testar\t<span class=\"hljs-number\">37819</span>\n<span class=\"hljs-number\">8</span>\tel\t<span class=\"hljs-number\">35920</span>\n</code></pre>\n<p>Now I wanted to identify where my diminishing returns would be.   Is there a set of words that I must learn because they are spoken so often that I wouldn't understand a conversation if they weren't in my vocabulary?</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_returns.png\">\n</center>\n<p>As you can see in this chart, the usage for words drops off at around the ~200 mark.   So there are basically 150 words I <em>must</em> know and then the rest are equally important.   I wasn't quite happy with this because some parts of speech are higher priority than others, for example I think having a strong understanding of the popular verbs will go a long way.  So I also wanted to identify what are the most important verbs to learn:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_verbs</span> = (words[words.pos == <span class=\"hljs-string\">'VERB'</span>].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_verbs.head(50)\n</code></pre>\n<p>Which got me this:</p>\n<pre><code class=\"hljs language-yaml\">\t<span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">tener</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">22072</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">hacer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">14946</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">ir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">12570</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">decir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11314</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">querer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11083</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">ver</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">10269</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">estar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">9780</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">saber</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">8704</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">ser</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">7674</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">dar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5722</span>\n<span class=\"hljs-number\">10</span>\t<span class=\"hljs-string\">pasar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5528</span>\n<span class=\"hljs-number\">11</span>\t<span class=\"hljs-string\">hablar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5355</span>\n<span class=\"hljs-number\">12</span>\t<span class=\"hljs-string\">venir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5145</span>\n<span class=\"hljs-number\">13</span>\t<span class=\"hljs-string\">creer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">4895</span>\n<span class=\"hljs-number\">14</span>\t<span class=\"hljs-string\">salir</span> \t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">3395</span>\n</code></pre>\n<p>Verbs had a slightly different drop-off pattern when I targeted them directly:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_verbs.png\">\n</center>\n<p>I get a big bang for my buck by learning those top 40 verbs.   Nouns on the other hand are much more spread out and most are evenly distributed:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">gracias</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4676</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">favor</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4625</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">seÃ±or</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4116</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">verdad</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">3566</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">vida</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2673</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">hombre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2601</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">madre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2597</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">vez</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2537</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">tiempo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2492</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">hijo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2215</span>\n</code></pre>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_nouns.png\">\n</center>\n<p>So then I thought to myself... How much of a show would I understand if I just learned these most important words?  So I started by excluding some of the easy parts of speech and focused on the most important:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">find_important_words</span> = (words[~words.pos.isin([<span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'CONJ'</span>, <span class=\"hljs-string\">'ADP'</span>, <span class=\"hljs-string\">'ADV'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'AUX'</span>, <span class=\"hljs-string\">'INTJ'</span>])].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\nfind_important_words.head(50)\n</code></pre>\n<p>The top 20 were all verbs except for <code>bueno</code> and <code>gracias</code>.   So now with my list of what I considered \"important words\" I plotted it to find what amount of words I wanted to learn:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/important_words.png\">\n</center>\n<p>It looks like 200 learned words would give me a reasonable amount of understanding for a series, so I decided to calculate how much of a series I would understand if I learned just those first 200 words:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">percentages</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">total_words_handled</span> = <span class=\"hljs-number\">0</span>\n\n    for word in grouped_result<span class=\"hljs-section\">['word']</span><span class=\"hljs-section\">[:200]</span>:\n        <span class=\"hljs-attr\">values</span> = words_in_show[words_in_show.word == word][<span class=\"hljs-string\">'count'</span>].values\n\n        if values.size > 0:\n            total_words_handled += values<span class=\"hljs-section\">[0]</span>\n\n    percentages<span class=\"hljs-section\">[show_name]</span> = total_words_handled / words_in_show.sum().loc<span class=\"hljs-section\">['count']</span>\n</code></pre>\n<p>Now I had a table that would show me what percentage of the spoken words were covered by the first 200 words in my list:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">p_df</span> = pd.DataFrame(percentages.items(), columns=[<span class=\"hljs-string\">'show'</span>, <span class=\"hljs-string\">'percentage'</span>])\n<span class=\"hljs-attr\">p_df</span> = p_df.sort_values(by=<span class=\"hljs-string\">'percentage'</span>)\np_df<span class=\"hljs-section\">['percentage']</span> = p_df<span class=\"hljs-section\">['percentage']</span> * 100\n<span class=\"hljs-attr\">pd.options.display.float_format</span> = <span class=\"hljs-string\">'{:,.2f}%'</span>.format\np_df\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>Show</th>\n<th>Percentage</th>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>64.24%</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>65.28%</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>66.68%</td>\n</tr><tr>\n<td>Neruda</td>\n<td>66.89%</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>67.56%</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>68.03%</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>68.19%</td>\n</tr><tr>\n<td>El marginal</td>\n<td>68.47%</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>68.59%</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>70.20%</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>70.95</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>71.52%</td>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>73.15%</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>73.58%</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>73.78%</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>74.03%</td>\n</tr><tr>\n<td>El bar</td>\n<td>74.07%</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>75.40%</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>75.59%</td>\n</tr></tbody></table>\n<p>But living in Puerto Rico, one thing I've realized is speed of speech is also important.  I have a much easier time speaking with people from Colombia and Mexico than I do with Puerto Ricans because they speak so much faster.   So even though I could understand 75% of \"Tarde para la ira\" if I learned the 200 words, I want to make sure they are speaking at a pace I could understand as well.</p>\n<p>So I loaded up the other CSV file that was the full sentences and added a \"time per word\" column:</p>\n<pre><code class=\"hljs language-css\">sentences = pd<span class=\"hljs-selector-class\">.read_csv</span>('sentences<span class=\"hljs-selector-class\">.csv</span><span class=\"hljs-selector-class\">.gz</span>', compression='gzip', delimiter=',', parse_dates=<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>, <span class=\"hljs-string\">'end'</span>]</span>)\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> = (sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'end'</span>]</span> - sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>]</span>)<span class=\"hljs-selector-class\">.dt</span><span class=\"hljs-selector-class\">.total_seconds</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'sentence'</span>]</span><span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.split</span>()<span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.len</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'time_per_word'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> / sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span>\n</code></pre>\n<p>Then I was able to have a speed rating for each show:</p>\n<pre><code class=\"hljs language-scss\">sentence_group = sentences<span class=\"hljs-selector-class\">.groupby</span>([sentences.media])\nsentence_group<span class=\"hljs-selector-class\">.time_per_word</span><span class=\"hljs-selector-class\">.mean</span>()<span class=\"hljs-selector-class\">.reset_index</span>()<span class=\"hljs-selector-class\">.sort_values</span>('time_per_word')\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>media</th>\n<th>time_per_word</th>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>0.58</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>0.59</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>0.61</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>0.63</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>0.64</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>0.64</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>0.65</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>0.67</td>\n</tr><tr>\n<td>Neruda</td>\n<td>0.68</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>0.69</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>0.70</td>\n</tr><tr>\n<td>El bar</td>\n<td>0.70</td>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>0.72</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>0.75</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>0.76</td>\n</tr><tr>\n<td>El marginal</td>\n<td>0.76</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>0.77</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>0.77</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>0.81</td>\n</tr></tbody></table>\n<p>Luckily the two series that have the least amount of vocabulary also speak the slowest!   So these will be the series I start with.    The final question I wanted to answer is \"What are the top words I'm missing for a series\".    Since I'll know 75% of the series from the top 200 words, I'm hoping there are some top words from a specific series that I can also learn to get an even higher understanding.</p>\n<p>First, find which words are in each show but not in the top 200:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">missing_words_by_show</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">frequency_words</span> = grouped_result[<span class=\"hljs-string\">'word'</span>][:<span class=\"hljs-number\">200</span>]\n\n    <span class=\"hljs-attr\">missing_words</span> = words_in_show[~words_in_show.word.isin(frequency_words.values)]\n    missing_words_by_show<span class=\"hljs-section\">[show_name]</span> = missing_words\n</code></pre>\n<p>Then we were able to grab them per show:</p>\n<pre><code class=\"hljs language-css\">missing_words_by_show<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'La casa de las flores'</span>]</span><span class=\"hljs-selector-class\">.head</span>(<span class=\"hljs-number\">50</span>)\n\nword\tcount\n<span class=\"hljs-number\">31</span>\tmamÃ¡\t<span class=\"hljs-number\">252</span>\n<span class=\"hljs-number\">70</span>\tflorerÃ­<span class=\"hljs-selector-tag\">a</span>\t<span class=\"hljs-number\">87</span>\n<span class=\"hljs-number\">98</span>\tperdÃ³n\t<span class=\"hljs-number\">56</span>\n<span class=\"hljs-number\">102</span>\tsea\t<span class=\"hljs-number\">54</span>\n<span class=\"hljs-number\">116</span>\tademÃ¡s\t<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">126</span>\tahorita\t<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">132</span>\tcÃ¡rcel\t<span class=\"hljs-number\">38</span>\n<span class=\"hljs-number\">133</span>\tfiesta\t<span class=\"hljs-number\">38</span>\n</code></pre>\n<p>So adding those few words to my vocabulary will also give me a better understanding of the series.</p>\n<h2>Conclusion</h2>\n<p>I believe a data-driven approach to language learning will be an effective way to get me speaking better spanish.   It was a ton of fun to play with spaCy, pandas, and jupyter as well!</p>\n<p>I'll improve the data analysis over time as well but I do believe this is a pretty good starting point!</p>\n<center>\n<img src=\"/images/posts/learning_spanish/meme.png\">\n</center>","category":"Development","date":"2022-04-30T00:00:00Z","tags":["Python","Pandas","NLP"],"title":"How to speak spanish like a colombian drug lord!"},{"id":["old","caesar_cipher_in_python"],"path":"old/caesar_cipher_in_python","contentHtml":"<p>I'm currently teaching my wife to code and one of the problems that we\nworked on to teach her some fundamental programming concepts was\nre-implementing the caesar cipher in python. It was fun not only to code\nbut to also start sending each other \"secret\" messages!</p>\n<p>The caesar cipher is a rather simple encoding, you just shift the\nalphabet a certain amount of characters. For example, if you are using a\nshift of 2:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">a</span> => c\n<span class=\"hljs-attr\">b</span> => d\n<span class=\"hljs-attr\">y</span> => a\n<span class=\"hljs-attr\">z</span> => b\n</code></pre>\n<p>Using this as an interview type question would provide a few interesting\nproblems and give you a good perspective on how good a developers\nproblem solving skills are and how knowledgeable they are in the\nlanguage of their choice.</p>\n<p>The first issue is to handle the beginning and end of the alphabet, if\nyou are encoding 'z' then you will have to start your shift on a. The\nsecond problem is to only encode letters since there was no ascii table\nto define in what order characters are shifted back in those times.</p>\n<p>Without using too much of the built in python niceties you could do\nsomething similar to this:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!/usr/bin/python</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode_shift_letter</span>(<span class=\"hljs-params\">current_ord, start, end, shift</span>):\n    <span class=\"hljs-keyword\">if</span> current_ord - shift &#x3C; start:\n        new_ord = (current_ord + <span class=\"hljs-number\">26</span>) - shift\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(new_ord)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(current_ord-shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode_shift_letter</span>(<span class=\"hljs-params\">current_ord, start, end, shift</span>):\n    <span class=\"hljs-keyword\">if</span> current_ord + shift > end:\n        new_ord = (current_ord - <span class=\"hljs-number\">26</span>) + shift\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(new_ord)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(current_ord+shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift, decode_shift_letter)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift, encode_shift_letter)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modify_input</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift, shift_letter</span>):\n    new_sentence = <span class=\"hljs-string\">''</span>\n\n    <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>:\n        <span class=\"hljs-comment\"># we only encode letters, random characters like +!%$ are not encoded.</span>\n        <span class=\"hljs-comment\"># Lower and Capital letters are not stored near each other on the</span>\n        <span class=\"hljs-comment\"># ascii table</span>\n        lower_start = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'a'</span>)\n        lower_end = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'z'</span>)\n        upper_start = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'A'</span>)\n        upper_end = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'Z'</span>)\n        current_ord = <span class=\"hljs-built_in\">ord</span>(letter)\n\n        <span class=\"hljs-keyword\">if</span> current_ord >= lower_start <span class=\"hljs-keyword\">and</span> current_ord &#x3C;= lower_end:\n            new_sentence += shift_letter(current_ord, lower_start, lower_end, shift)\n        <span class=\"hljs-keyword\">elif</span> current_ord >= upper_start <span class=\"hljs-keyword\">and</span> current_ord &#x3C;= upper_end:\n            new_sentence += shift_letter(current_ord, upper_start, upper_end, shift)\n        <span class=\"hljs-keyword\">else</span>:\n            new_sentence += letter\n\n    <span class=\"hljs-keyword\">return</span> new_sentence\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_shift</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        shift = <span class=\"hljs-built_in\">int</span>(raw_input(<span class=\"hljs-string\">'What shift would you like to use?\\n'</span>))\n    <span class=\"hljs-keyword\">except</span> ValueError:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Shift must be a number'</span>\n        shift = get_shift()\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (shift > <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> shift &#x3C;= <span class=\"hljs-number\">25</span>):\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Shift must be between 1 and 25'</span>\n        shift = get_shift()\n\n    <span class=\"hljs-keyword\">return</span> shift\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        task = <span class=\"hljs-built_in\">int</span>(raw_input(<span class=\"hljs-string\">'1) Encode \\n'</span>+ \\\n                             <span class=\"hljs-string\">'2) Decode \\n'</span>))\n    <span class=\"hljs-keyword\">except</span> ValueError:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Invalid task, try again!'</span>\n        main()\n\n    shift = get_shift()\n    <span class=\"hljs-built_in\">input</span> = raw_input(<span class=\"hljs-string\">'What message would you like to %s\\n'</span> % (<span class=\"hljs-string\">'Encode'</span> <span class=\"hljs-keyword\">if</span> task == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'Decode'</span>))\n\n    <span class=\"hljs-keyword\">if</span> task == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span> encode(<span class=\"hljs-built_in\">input</span>, shift)\n    <span class=\"hljs-keyword\">elif</span> task == <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-built_in\">print</span> decode(<span class=\"hljs-built_in\">input</span>, shift)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n<p>This would prove that you are a decent problem solver and have enough of\nthe language to get things done but if you want to prove you have\nmastered the python language you might take advantage of some slicing\nand some methods out of the string module and change your code to look\nsomething like:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> letters, maketrans\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, -shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modify_input</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    trans = maketrans(letters, letters[shift:] + letters[:shift])\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">input</span>.translate(trans)\n</code></pre>\n<p>Do get more information on string.letters and string.maketrans you can\nvisit their documentation\n[here](<a href=\"http://docs.python.org/library/string.html\">http://docs.python.org/library/string.html</a>)</p>","category":"Development","date":"2010-11-15T00:00:00Z","tags":["Python","Interviews"],"title":"Caesar Cipher in Python"},{"id":["old","convert_a_string_to_an_integer_in_python"],"path":"old/convert_a_string_to_an_integer_in_python","contentHtml":"<p>A fun interview question some developers like to ask is to have you\nconvert ascii characters to an integer without using built in methods\nlike string.atoi or int().</p>\n<p>So using python the obvious ways to convert a string to an integer are\nthese:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">int</span>(<span class=\"hljs-string\">'1234'</span>)\n<span class=\"hljs-number\">1234</span>\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> string\n<span class=\"hljs-meta\">>>> </span>string.atoi(<span class=\"hljs-string\">'1234'</span>)\n<span class=\"hljs-number\">1234</span>\n</code></pre>\n<p>The interesting thing here is finding out where on the ascii character\ntable the number is. Luckily python has this already built in with the\nord method:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">help</span>(<span class=\"hljs-built_in\">ord</span>)\n\n<span class=\"hljs-built_in\">ord</span>(...)\n    <span class=\"hljs-built_in\">ord</span>(c) -> integer\n\n    Return the integer ordinal of a one-character string.\n\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'1'</span>)\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'2'</span>)\n<span class=\"hljs-number\">50</span>\n</code></pre>\n<p>You can see that the numbers are grouped together on the ascii table, so\nyou just have to grab '0' as the base and subtract the rest:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'1'</span>)-<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>So if we have the string '1234', we can get each of the individual\nnumbers by looping over it:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>num_string = <span class=\"hljs-string\">'1234'</span>\n<span class=\"hljs-meta\">>>> </span>num_list = []\n<span class=\"hljs-meta\">>>> </span>base = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> num_string:\n<span class=\"hljs-meta\">... </span>  num_list.append(<span class=\"hljs-built_in\">ord</span>(num) - base)\n...\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">print</span> num_list\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>but now how to we combine all these together to get 1234? You can't\njust add them up because you'll just get 1+2+3+4 = 10.</p>\n<p>So, we have to get 1000 + 200 + 30 + 4, which is a simple problem to\nsolve. Its just number times 10 to the nth power, so the final solution\nis:</p>\n<pre><code class=\"hljs language-python\">num = <span class=\"hljs-string\">'1234'</span>\nnew_num = <span class=\"hljs-number\">0</span>\nbase = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n\n<span class=\"hljs-keyword\">for</span> i,n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">reversed</span>(num)):\n      new_num += (<span class=\"hljs-built_in\">ord</span>(n) - base) * (<span class=\"hljs-number\">10</span>**i)\n\n<span class=\"hljs-built_in\">print</span> new_num\n</code></pre>\n<p>This code is a little verbose though, lets make it a dirty nasty one\nliner!</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">sum</span>([(<span class=\"hljs-built_in\">ord</span>(n)-<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)) * (<span class=\"hljs-number\">10</span> ** i) <span class=\"hljs-keyword\">for</span> i,n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-string\">'1234'</span>))])\n<span class=\"hljs-number\">1234</span>\n</code></pre>","category":"Development","date":"2010-10-28T00:00:00Z","tags":["Python","Interviews"],"title":"Convert a string to an integer in Python"},{"id":["old","tips_and_tricks_for_the_python_interpreter"],"path":"old/tips_and_tricks_for_the_python_interpreter","contentHtml":"<p>I have seen a lot of people switch over to using ipython, bpython, etc\nto get auto-complete support without realizing that the standard\ninterpreter does have this functionality.</p>\n<p>To enable auto-complete support in the python interpreter you need to\ncreate a python startup file that enables readline support. A python\nstartup file is just a bunch of python code that gets executed at\nstartup of the interpreter. To do this you just setup PYTHONSTARTUP in\nyour ~/.bashrc and then create a ~/.pythonrc.py file:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">#.bashrc</span>\nPYTHONSTARTUP=~/.pythonrc.py\nexport PYTHONSTARTUP\n\n<span class=\"hljs-comment\">#.pythonrc.py</span>\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">import</span> readline\n<span class=\"hljs-keyword\">except</span> ImportError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Module readline not available.\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">import</span> rlcompleter\n    readline.parse_and_bind(<span class=\"hljs-string\">\"tab: complete\"</span>)\n</code></pre>\n<p>Now when you are in python you have tab completion on importing, calling\nmethods on a module, etc.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> o\n<span class=\"hljs-built_in\">object</span>(  <span class=\"hljs-built_in\">oct</span>(     <span class=\"hljs-built_in\">open</span>(    <span class=\"hljs-keyword\">or</span>       <span class=\"hljs-built_in\">ord</span>(     os\n</code></pre>\n<p>I always end up using the pretty print module for viewing long lists and\nstrings in the interpreter so I prefer to just use it by default:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Enable Pretty Printing for stdout</span>\n<span class=\"hljs-keyword\">import</span> pprint\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_displayhook</span>(<span class=\"hljs-params\">value</span>):\n    <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-keyword\">import</span> __builtin__\n            __builtin__._ = value\n        <span class=\"hljs-keyword\">except</span> ImportError:\n            __builtins__._ = value\n\n        pprint.pprint(value)\n\nsys.displayhook = my_displayhook\n</code></pre>\n<p>It is also very useful to be able to load up your favorite editor to\nedit lines of code from the interpreter, you can do this by adding the\nfollowing into your ~/.pythonrc.py:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> code <span class=\"hljs-keyword\">import</span> InteractiveConsole\n<span class=\"hljs-keyword\">from</span> tempfile <span class=\"hljs-keyword\">import</span> mkstemp\n\nEDITOR = os.environ.get(<span class=\"hljs-string\">'EDITOR'</span>, <span class=\"hljs-string\">'vi'</span>)\nEDIT_CMD = <span class=\"hljs-string\">'\\e'</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditableBufferInteractiveConsole</span>(<span class=\"hljs-title class_ inherited__\">InteractiveConsole</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):\n        self.last_buffer = [] <span class=\"hljs-comment\"># This holds the last executed statement</span>\n        InteractiveConsole.__init__(self, *args, **kwargs)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">runsource</span>(<span class=\"hljs-params\">self, source, *args</span>):\n        self.last_buffer = [ source.encode(<span class=\"hljs-string\">'latin-1'</span>) ]\n        <span class=\"hljs-keyword\">return</span> InteractiveConsole.runsource(self, source, *args)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">raw_input</span>(<span class=\"hljs-params\">self, *args</span>):\n        line = InteractiveConsole.raw_input(self, *args)\n        <span class=\"hljs-keyword\">if</span> line == EDIT_CMD:\n            fd, tmpfl = mkstemp(<span class=\"hljs-string\">'.py'</span>)\n            os.write(fd, <span class=\"hljs-string\">b'\\n'</span>.join(self.last_buffer))\n            os.close(fd)\n            os.system(<span class=\"hljs-string\">'%s %s'</span> % (EDITOR, tmpfl))\n            line = <span class=\"hljs-built_in\">open</span>(tmpfl).read()\n            os.unlink(tmpfl)\n            tmpfl = <span class=\"hljs-string\">''</span>\n            lines = line.split( <span class=\"hljs-string\">'\\n'</span> )\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(lines) - <span class=\"hljs-number\">1</span>): self.push( lines[i] )\n            line = lines[-<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">return</span> line\n\nc = EditableBufferInteractiveConsole(<span class=\"hljs-built_in\">locals</span>=<span class=\"hljs-built_in\">locals</span>())\nc.interact(banner=<span class=\"hljs-string\">''</span>)\n\n<span class=\"hljs-comment\"># Exit the Python shell on exiting the InteractiveConsole</span>\nsys.exit()\n</code></pre>\n<p>For Django developers when you load up the ./manage.py shell it is nice\nto have access to all your models and settings for testing:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># If we're working with a Django project, set up the environment</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'DJANGO_SETTINGS_MODULE'</span> <span class=\"hljs-keyword\">in</span> os.environ:\n    <span class=\"hljs-keyword\">from</span> django.db.models.loading <span class=\"hljs-keyword\">import</span> get_models\n    <span class=\"hljs-keyword\">from</span> django.test.client <span class=\"hljs-keyword\">import</span> Client\n    <span class=\"hljs-keyword\">from</span> django.test.utils <span class=\"hljs-keyword\">import</span> setup_test_environment, teardown_test_environment\n    <span class=\"hljs-keyword\">from</span> django.conf <span class=\"hljs-keyword\">import</span> settings <span class=\"hljs-keyword\">as</span> S\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DjangoModels</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\n        <span class=\"hljs-string\">\"\"\"Loop through all the models in INSTALLED_APPS and import them.\"\"\"</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n            <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> get_models():\n                <span class=\"hljs-built_in\">setattr</span>(self, m.__name__, m)\n\n    A = DjangoModels()\n    C = Client()\n</code></pre>\n<p>After these tweaks the python interpreter is a lot more powerful and you\nreally lose the need for the more interactive shells like ipython and\nbpython. All of these settings work in both python2 and python3.</p>\n<p>If you want to see my complete ~/.pythonrc.py you can get it on\n<a href=\"https://github.com/sontek/dotfiles/blob/master/_pythonrc.py\">github</a></p>","category":"Development","date":"2010-12-28T00:00:00Z","tags":["Python"],"title":"Tips and Tricks for the Python Interpreter"},{"id":["old","turning_vim_into_a_modern_python_ide"],"path":"old/turning_vim_into_a_modern_python_ide","contentHtml":"<p>TL;DR:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sontek/dotfiles.git</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> dotfiles</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">./install.sh vim</span>\n</code></pre>\n<h1>Intro</h1>\n<p>Back in 2008, I wrote the article <a href=\"http://sontek.net/python-with-a-modular-ide-vim\">Python with a modular IDE\n(Vim)</a>. Years later, I\nhave people e-mailing me and commenting daily asking for more\ninformation, even though most of the information in it is outdated. Here\nis the modern way to work with Python and Vim to achieve the perfect\nenvironment.</p>\n<p>Because one of the most important parts about a development environment\nis the ability to easily reproduce across machines, we are going to\nstore our vim configuration in git:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/{<span class=\"hljs-built_in\">autoload</span>,bundle}</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> ~/.vim/</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">git init</span>\n</code></pre>\n<p>The purpose of the autoload directory is to automatically load the vim\nplugin <a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a>, which we'll\nthen use to load all other plugins that are located in the bundle\ndirectory. So download pathogen and put it in your autoload folder.</p>\n<p>You'll need to add the following to your ~/.vimrc so that pathogen\nwill be loaded properly. Filetype detection must be off when you run the\ncommands so its best to execute them first:</p>\n<pre><code class=\"hljs language-r\">filetype off\n<span class=\"hljs-built_in\">call</span> pathogen<span class=\"hljs-comment\">#runtime_append_all_bundles()</span>\n<span class=\"hljs-built_in\">call</span> pathogen<span class=\"hljs-comment\">#helptags()</span>\n</code></pre>\n<p>Now lets add all of the vim plugins we plan on using as submodules to\nour git repository:</p>\n<pre><code class=\"hljs language-bash\">git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive\ngit submodule add https://github.com/msanders/snipmate.vim.git bundle/snipmate\ngit submodule add https://github.com/tpope/vim-surround.git bundle/surround\ngit submodule add https://github.com/tpope/vim-git.git bundle/git\ngit submodule add https://github.com/ervandew/supertab.git bundle/supertab\ngit submodule add https://github.com/sontek/minibufexpl.vim.git bundle/minibufexpl\ngit submodule add https://github.com/wincent/Command-T.git bundle/command-t\ngit submodule add https://github.com/mitechie/pyflakes-pathogen.git\ngit submodule add https://github.com/mileszs/ack.vim.git bundle/ack\ngit submodule add https://github.com/sjl/gundo.vim.git bundle/gundo\ngit submodule add https://github.com/fs111/pydoc.vim.git bundle/pydoc\ngit submodule add https://github.com/vim-scripts/pep8.git bundle/pep8\ngit submodule add https://github.com/alfredodeza/pytest.vim.git bundle/py.test\ngit submodule add https://github.com/reinh/vim-makegreen bundle/makegreen\ngit submodule add https://github.com/vim-scripts/TaskList.vim.git bundle/tasklist\ngit submodule add https://github.com/vim-scripts/The-NERD-tree.git bundle/nerdtree\ngit submodule add https://github.com/sontek/rope-vim.git bundle/ropevim\ngit submodule init\ngit submodule update\ngit submodule foreach git submodule init\ngit submodule foreach git submodule update\n</code></pre>\n<p>Thats it! Now that we've got our vim configuration in git!</p>\n<p>Now lets look at how to use each of these plugins to improve the power\nof vim:</p>\n<h1>Basic Editing and Debugging</h1>\n<h2>Code Folding</h2>\n<p>Lets first enable code folding. This makes it a lot easier to organize\nyour code and hide portions that you aren't interested in working on.\nThis is quite easy for Python, since whitespace is required.</p>\n<p>In your ~/.vimrc just add:</p>\n<pre><code class=\"hljs language-ini\">set <span class=\"hljs-attr\">foldmethod</span>=indent\nset <span class=\"hljs-attr\">foldlevel</span>=<span class=\"hljs-number\">99</span>\n</code></pre>\n<p>Then you will be able to be inside a method and type 'za' to open and\nclose a fold.</p>\n<h2>Window Splits</h2>\n<p>Sometimes code folding isn't enough; you may need to start opening up\nmultiple windows and working on multiple files at once or different\nlocations within the same file. To do this in vim, you can use these\nshortcuts:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">Vertical Split :</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">v</span>\n<span class=\"hljs-attr\">Horizontal Split:</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">s</span>\n<span class=\"hljs-attr\">Close current windows:</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">q</span>\n</code></pre>\n<p>I also like to bind Ctrl+&#x3C;movement> keys to move around the windows,\ninstead of using Ctrl+w + &#x3C;movement>:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;c-j> &#x3C;c-w>j\nmap &#x3C;c-k> &#x3C;c-w>k\nmap &#x3C;c-l> &#x3C;c-w>l\nmap &#x3C;c-h> &#x3C;c-w>h\n</code></pre>\n<p><img src=\"http://i.imgur.com/krj0l.png\" alt=\"image\"></p>\n<h2>Snippets</h2>\n<p>The next tweak that really speeds up development is using snipmate.\nWe've already included it in our bundle/ folder so its already enabled.\nTry opening up a python file and typing 'def&#x3C;tab>'. It should stub\nout a method definition for you and allow you to tab through and fill\nout the arguments, doc string, etc.</p>\n<p>I also like to create my own snippets folder to put in some custom\nsnippets:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/snippets</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">vim ~/.vim/snippets/python.snippets</span>\n</code></pre>\n<p>Put this in the file:</p>\n<pre><code class=\"hljs language-arduino\">snippet pdb\n    <span class=\"hljs-keyword\">import</span> pdb; pdb.<span class=\"hljs-built_in\">set_trace</span>()\n</code></pre>\n<p>Now you can type pdb&#x3C;tab> and it'll insert your breakpoint!</p>\n<h2>Task lists</h2>\n<p>Another really useful thing is to mark some of your code as TODO or\nFIXME! I know we all like to think we write perfect code, but sometimes\nyou just have to settle and leave a note for yourself to come back\nlater. One of the plugins we included was the tasklist plugin that will\nallow us to search all open buffers for things to fix. Just add a\nmapping to open it in ~/.vimrc:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;leader>td &#x3C;Plug>TaskList\n</code></pre>\n<p>Now you can hit &#x3C;leader>td to open your task list and hit 'q' to\nclose it. You can also hit enter on the task to jump to the buffer and\nline that it is placed on.</p>\n<h2>Revision History</h2>\n<p>The final basic editing tweak I suggest everyone start utilizing is the\nGundo plugin. It'll allow you to view diff's of every save on a file\nyou've made and allow you to quickly revert back and forth:</p>\n<p><img src=\"http://i.imgur.com/2NrPS.png\" alt=\"image\"></p>\n<p>Just bind a key in your .vimrc to toggle the Gundo window:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>g <span class=\"hljs-symbol\">:GundoToggle&#x3C;CR></span>\n</code></pre>\n<h1>Syntax Highlighting and Validation</h1>\n<p>Simply enable syntax highlighting in your ~/.vimrc:</p>\n<pre><code class=\"hljs language-vbnet\">syntax <span class=\"hljs-keyword\">on</span>                           <span class=\"hljs-string\">\" syntax highlighing\nfiletype on                          \"</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">to</span> detect filetypes\nfiletype plugin indent <span class=\"hljs-keyword\">on</span>    <span class=\"hljs-string\">\" enable loading indent file for filetype\n</span></code></pre>\n<p>Because we enabled pyflakes when we added it as a submodule in\n~/.vim/bundle, it will notify you about unused imports and invalid\nsyntax. It will save you a lot of time saving and running just to find\nout you missed a colon. I like to tell it not use the quickfix window:</p>\n<pre><code class=\"hljs language-ini\">let g:<span class=\"hljs-attr\">pyflakes_use_quickfix</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/ZfjFe.png\" alt=\"image\"></p>\n<h2>Pep8</h2>\n<p>The final plugin that really helps validate your code is the pep8\nplugin, it'll make sure your code is consistent across all projects.\nAdd a key mapping to your ~/.vimrc and then you'll be able to jump to\neach of the pep8 violations in the quickfix window:</p>\n<pre><code class=\"hljs language-ini\">let g:<span class=\"hljs-attr\">pep8_map</span>=<span class=\"hljs-string\">'&#x3C;leader>8'</span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/VU9AB.png\" alt=\"image\"></p>\n<h1>Tab Completion and Documentation</h1>\n<p>Vim has many different code completion options. We are going to use the\nSuperTab plugin to check the context of the code you are working on and\nchoose the best for the situation. We've already enabled the SuperTab\nplugin in the bundle/ folder, so we just have to configure it to be\ncontext sensitive and to enable omni code completion in your ~/.vimrc:</p>\n<pre><code class=\"hljs language-ini\">au FileType python set <span class=\"hljs-attr\">omnifunc</span>=pythoncomplete<span class=\"hljs-comment\">#Complete</span>\nlet g:<span class=\"hljs-attr\">SuperTabDefaultCompletionType</span> = <span class=\"hljs-string\">\"context\"</span>\n</code></pre>\n<p>Now we just enable the menu and pydoc preview to get the most useful\ninformation out of the code completion:</p>\n<pre><code class=\"hljs language-ini\">set <span class=\"hljs-attr\">completeopt</span>=menuone,longest,preview\n</code></pre>\n<p><img src=\"http://i.imgur.com/g4lxP.png\" alt=\"image\"></p>\n<p>We also enabled the pydoc plugin at the beginning with all the\nsubmodules; that gives us the ability to hit &#x3C;leader>pw when our\ncursor is on a module and have a new window open with the whole\ndocumentation page for it.</p>\n<h1>Code Navigation</h1>\n<h2>Buffers</h2>\n<p>The most important part about navigating code within vim, is to\ncompletely understand how to use buffers. There is no reason to use\ntabs. Open files with :e &#x3C;filename> to place in a buffer. We already\ninstalled the minibufexpl plugin, so you will already visually see every\nbuffer opened. You can also get a list of them doing :buffers.</p>\n<p>You can switch between the buffers using b&#x3C;number>, such as :b1 for\nthe first buffer. You can also use its name to match, so you can type :b\nmod&#x3C;tab> to autocomplete opening the models.py buffer. You need to\nmake sure you are using the minibufexpl from my github since it has\npatches that make it much better to work with.</p>\n<p>To close a buffer you use :bd or :bw.</p>\n<h2>Fuzzy Text File Search</h2>\n<p>To make finding and opening files within your project even easier, we\nare going to use the command-t plugin. It does have some parts that need\nto be compiled, so its not already installed by adding it as a\nsubmodule. Go to your ~/.vim/bundle/command-t folder and run 'rake\nmake'. Yes you need ruby installed. By default, command-t is bound to\n&#x3C;leader>t. This will use fuzzy text matching to find any file in your\nproject.</p>\n<p>It also supports searching only through opened buffers, instead of files\nusing &#x3C;leader>b.</p>\n<p><img src=\"http://i.imgur.com/hUcSl.png\" alt=\"image\"></p>\n<h2>File Browser</h2>\n<p>NERD Tree is a project file browser. I must admit I used this heavily\nback when I was migrating from Visual Studio and used to the Solution\nExplorer, but I rarely use it anymore. Command-T is usually all you'll\nneed. It is useful when you are getting to know a new codebase for the\nfirst time though. Lets bind a shortcut key for opening it:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>n <span class=\"hljs-symbol\">:NERDTreeToggle&#x3C;CR></span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/R4ZzQ.png\" alt=\"image\"></p>\n<h2>Refactoring and Go to definition</h2>\n<p>Ropevim is also a great tool that will allow you to navigate around your\ncode. It supports automatically inserting import statements, goto\ndefinition, refactoring, and code completion. You'll really want to\nread up on everything it does, but the two big things I use it for is to\njump to function or class definitions quickly and to rename things\n(including all their references).</p>\n<p>For instance, if you are using django and you place your cursor over the\nclass models.Model you reference and then called :RopeGotoDefintion, it\nwould jump you straight to the django library to that class definition.\nWe already have it installed in our bundles, so we bind it to a key to\nuse it:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>j <span class=\"hljs-symbol\">:RopeGotoDefinition&#x3C;CR></span>\nmap &#x3C;leader>r <span class=\"hljs-symbol\">:RopeRename&#x3C;CR></span>\n</code></pre>\n<h2>Searching</h2>\n<p>The final tool that really speeds up navigating your code is the Ack\nplugin. Ack is similar to grep, but much better in my opinion. You can\nfuzzy text search for anything in your code (variable name, class,\nmethod, etc) and it'll give you a list of files and line numbers where\nthey are defined so you can quickly cycle through them. Just bind the\nsearching to a key:</p>\n<pre><code class=\"hljs language-php-template\"><span class=\"xml\">nmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">leader</span>></span>a <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Ack!\n</span></code></pre>\n<p>We use ! at the end of it so it doesn't open the first result\nautomatically.</p>\n<h1>Integration with Git</h1>\n<p>We installed 2 plugins, git.vim and fugitive, that give us all the\nintegration we need. Git.vim will provide us syntax highlighting for git\nconfiguration files; fugitive provides a great interface for interacting\nwith git including getting diffs, status updates, committing, and moving\nfiles.</p>\n<p>Fugitive also allows you to view what branch you are working in directly\nfrom vim. Add this to your statusline in ~/.vimrc:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">%</span><span class=\"bash\">{fugitive<span class=\"hljs-comment\">#statusline()}</span></span>\n</code></pre>\n<p>The big commands you need to know:</p>\n<ul>\n<li><strong>Gblame</strong>: This allows you to view a line by line comparison of who\nthe last person to touch that line of code is.</li>\n<li><strong>Gwrite</strong>: This will stage your file for commit, basically doing\ngit add &#x3C;filename></li>\n<li><strong>Gread</strong>: This will basically run a git checkout &#x3C;filename></li>\n<li><strong>Gcommit</strong>: This will just run git commit. Since its in a vim\nbuffer, you can use keyword completion (Ctrl-N), like\ntest_all&#x3C;Ctrl-N> to find the method name in your buffer and\ncomplete it for the commit message. You can also use + and - on the\nfilenames in the message to stage/unstage them for the commit.</li>\n</ul>\n<p><img src=\"http://i.imgur.com/NuRRj.png\" alt=\"image\"></p>\n<h1>Test Integration</h1>\n<h2>django nose</h2>\n<p>Test runner integration really depends on the testing library you are\nusing and what type of tests you are running but we included a great\ngeneric plugin called MakeGreen that executes off of vim's makeprg\nvariable. So for instance, if you are using django with django-nose you\ncould define a shortcut key in your ~/.vimrc like this:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;leader>dt :set makeprg=python\\ manage.py\\ test\\|:call <span class=\"hljs-built_in\">MakeGreen</span>()&#x3C;CR>\n</code></pre>\n<p>This will just give you a green bar at the bottom of vim if your test\npassed or a red bar with the message of the failed test if it doesn't.\nVery simple.</p>\n<h2>py.test</h2>\n<p>I also included the py.test vim plugin for those who prefer it. This\nplugin has a lot more functionality including executing individual tests\nby class, file, or method. You can also cycle through the individual\nassertion errors. I have the following bindings:</p>\n<pre><code class=\"hljs language-php-template\"><span class=\"xml\">\" Execute the tests\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tf <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest file<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tc <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest class<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tm <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest method<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\n\" cycle through test errors\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tn <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest next<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tp <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest previous<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>te <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest error<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\n</span></code></pre>\n<p><img src=\"http://i.imgur.com/RAE7v.png\" alt=\"image\"></p>\n<h1>Virtualenv</h1>\n<p>Vim doesn't realize that you are in a virtualenv so it wont give you\ncode completion for libraries only installed there. Add the following\nscript to your ~/.vimrc to fix it:</p>\n<pre><code class=\"hljs language-ini\">\" Add the virtualenv's site-packages to vim path\npy &#x3C;&#x3C; EOF\nimport os.path\nimport sys\nimport vim\nif 'VIRTUAL_ENV' in os.environ:\n    <span class=\"hljs-attr\">project_base_dir</span> = os.environ[<span class=\"hljs-string\">'VIRTUAL_ENV'</span>]\n    sys.path.insert(0, project_base_dir)\n    <span class=\"hljs-attr\">activate_this</span> = os.path.join(project_base_dir, <span class=\"hljs-string\">'bin/activate_this.py'</span>)\n    execfile(activate_this, dict(<span class=\"hljs-attr\">__file__</span>=activate_this))\nEOF\n</code></pre>\n<h1>Django</h1>\n<p>The only true django tweak I make is before I open vim I'll export the\nDJANGO_SETTINGS_MODULE environment so that I get code completion for\ndjango modules as well:</p>\n<pre><code class=\"hljs language-ini\">export <span class=\"hljs-attr\">DJANGO_SETTINGS_MODULE</span>=project.settings\n</code></pre>\n<h1>Random Tips</h1>\n<p>If you want to find a new color scheme just go to\n<a href=\"http://code.google.com/p/vimcolorschemetest/\">http://code.google.com/p/vimcolorschemetest/</a> to preview a large\nselection.</p>\n<p>John Anderson &#x3C;<a href=\"mailto:sontek@gmail.com\">sontek@gmail.com</a>> 2011</p>","category":"Development","date":"2011-05-07T00:00:00Z","tags":["Vim","Python"],"title":"Turning Vim into a modern Python IDE"},{"id":["old","writing_tests_for_pyramid_and_sqlalchemy"],"path":"old/writing_tests_for_pyramid_and_sqlalchemy","contentHtml":"<p>TL;DR: Putting it all together, the full code can be found here:\n<a href=\"https://gist.github.com/1420255\">https://gist.github.com/1420255</a></p>\n<h1>Intro</h1>\n<p>Pyramid's documentation doesn't cover the preferred way to test with\nSQLAlchemy, because Pyramid tries to stay out of your way and allow you\nto make your own decisions. However, I feel i'ts necessary to document\nwhat I think is the best way to test.</p>\n<p>When I first started writing tests with SQLAlchemy I found plenty of\nexamples of how to to get started by doing something like this:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> db <span class=\"hljs-keyword\">import</span> session <span class=\"hljs-comment\"># probably a contextbound sessionmaker</span>\n<span class=\"hljs-keyword\">from</span> db <span class=\"hljs-keyword\">import</span> model\n\n<span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> create_engine\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setup</span>():\n    engine = create_engine(<span class=\"hljs-string\">'sqlite:///test.db'</span>)\n    session.configure(bind=engine)\n    model.metadata.create_all(engine)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">teardown</span>():\n    model.metadata.drop_all(engine)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_something</span>():\n    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<p>I have seen this done so many times, but I feel there is so much wrong\nwith it! So let's establish some base rules when testing:</p>\n<blockquote>\n<ul>\n<li>Always test your system like it would be used in production.\nSQLite does not enforce the same rules or have the same features\nas Postgres or MySQL and will allow tests to pass that would\notherwise fail in production.</li>\n<li>Tests should be fast! You should be writing tests for all your\ncode. This is the main reason people do test against SQLite, but\nwe can't violate rule number one. We have to make sure tests\nagainst Postgres are fast, so we shouldn't be tearing down and\nrecreating tables for every single test.</li>\n<li>You should be able to execute in parallel to speed up when you\nhave thousands of tests. Dropping and creating tables per test\nwould not work in a parallel environment.</li>\n</ul>\n</blockquote>\n<p>For an example, I have a project with 600+ tests and it would take 2 and\nhalf minutes to execute running against SQLite. But when we swapped our\ntest configuration to execute against Postgres, testing took well over\nan hour. That is unacceptable!</p>\n<p>But running them in parallel will give us a huge speed up. Check out the\nresults of the tests running in single proc mode vs using all 4 cores:</p>\n<pre><code class=\"hljs language-ini\">$ <span class=\"hljs-attr\">py.test</span>\n======= 616 passed in 143.67 <span class=\"hljs-attr\">seconds</span> =======\n\n$ py.test <span class=\"hljs-attr\">-n4</span>\n======= 616 passed in 68.12 <span class=\"hljs-attr\">seconds</span> =======\n</code></pre>\n<h1>The right way</h1>\n<p>So what is the proper way to setup your tests? You should initialize the\ndatabase when you start your test runner and then use transactions to\nrollback any data changes your tests made. This allows you to keep a\nclean database for each test in a very efficient way.</p>\n<p>In py.test, you just have to create a file called conftest.py that looks\nsimilar to:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n\nROOT_PATH = os.path.dirname(__file__)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pytest_sessionstart</span>():\n    <span class=\"hljs-keyword\">from</span> py.test <span class=\"hljs-keyword\">import</span> config\n\n    <span class=\"hljs-comment\"># Only run database setup on master (in case of xdist/multiproc mode)</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">hasattr</span>(config, <span class=\"hljs-string\">'slaveinput'</span>):\n        <span class=\"hljs-keyword\">from</span> models <span class=\"hljs-keyword\">import</span> initialize_sql\n        <span class=\"hljs-keyword\">from</span> pyramid.config <span class=\"hljs-keyword\">import</span> Configurator\n        <span class=\"hljs-keyword\">from</span> paste.deploy.loadwsgi <span class=\"hljs-keyword\">import</span> appconfig\n        <span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> engine_from_config\n        <span class=\"hljs-keyword\">import</span> os\n\n        ROOT_PATH = os.path.dirname(__file__)\n        settings = appconfig(<span class=\"hljs-string\">'config:'</span> + os.path.join(ROOT_PATH, <span class=\"hljs-string\">'test.ini'</span>))\n        engine = engine_from_config(settings, prefix=<span class=\"hljs-string\">'sqlalchemy.'</span>)\n\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Creating the tables on the test database %s'</span> % engine\n\n        config = Configurator(settings=settings)\n        initialize_sql(settings, config)\n</code></pre>\n<p>With py.test, when you are running in parallel mode, the\npytest_sessionstart hook gets fired for each node, so we check that we\nare on the master node. Then we just grab our test.ini configuration\nfile and execute the initialize_sql function.</p>\n<p>Now that you have your initial test configuration finished, you have to\ndefine a base test class that does the transaction management in setUp\nand teardown.</p>\n<p>First, lets setup the Base testing class what will manage our\ntransactions:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> unittest\n<span class=\"hljs-keyword\">from</span> pyramid <span class=\"hljs-keyword\">import</span> testing\n<span class=\"hljs-keyword\">from</span> paste.deploy.loadwsgi <span class=\"hljs-keyword\">import</span> appconfig\n\n<span class=\"hljs-keyword\">from</span> webtest <span class=\"hljs-keyword\">import</span> TestApp\n<span class=\"hljs-keyword\">from</span> mock <span class=\"hljs-keyword\">import</span> Mock\n\n<span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> engine_from_config\n<span class=\"hljs-keyword\">from</span> sqlalchemy.orm <span class=\"hljs-keyword\">import</span> sessionmaker\n<span class=\"hljs-keyword\">from</span> app.db <span class=\"hljs-keyword\">import</span> Session\n<span class=\"hljs-keyword\">from</span> app.db <span class=\"hljs-keyword\">import</span> Entity  <span class=\"hljs-comment\"># base declarative object</span>\n<span class=\"hljs-keyword\">from</span> app <span class=\"hljs-keyword\">import</span> main\n<span class=\"hljs-keyword\">import</span> os\nhere = os.path.dirname(__file__)\nsettings = appconfig(<span class=\"hljs-string\">'config:'</span> + os.path.join(here, <span class=\"hljs-string\">'../../'</span>, <span class=\"hljs-string\">'test.ini'</span>))\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BaseTestCase</span>(unittest.TestCase):\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setUpClass</span>(<span class=\"hljs-params\">cls</span>):\n        cls.engine = engine_from_config(settings, prefix=<span class=\"hljs-string\">'sqlalchemy.'</span>)\n        cls.Session = sessionmaker()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setUp</span>(<span class=\"hljs-params\">self</span>):\n        connection = self.engine.connect()\n\n        <span class=\"hljs-comment\"># begin a non-ORM transaction</span>\n        self.trans = connection.begin()\n\n        <span class=\"hljs-comment\"># bind an individual Session to the connection</span>\n        Session.configure(bind=connection)\n        self.session = self.Session(bind=connection)\n        Entity.session = self.session\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tearDown</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-comment\"># rollback - everything that happened with the</span>\n        <span class=\"hljs-comment\"># Session above (including calls to commit())</span>\n        <span class=\"hljs-comment\"># is rolled back.</span>\n        testing.tearDown()\n        self.trans.rollback()\n        self.session.close()\n</code></pre>\n<p>This base test case will wrap all your sessions in an external\ntransaction so that you still have the ability to call flush/commit/etc\nand it will still be able to rollback any data changes you make.</p>\n<h1>Unit Tests</h1>\n<p>Now there are a few different types of tests you will want to run.\nFirst, you will want to do unit tests, which are small tests that only\ntest 1 thing at a time. This means you will skip the routes, templates,\netc. So let's setup our Unit Test Base class:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnitTestBase</span>(<span class=\"hljs-title class_ inherited__\">BaseTestCase</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setUp</span>(<span class=\"hljs-params\">self</span>):\n        self.config = testing.setUp(request=testing.DummyRequest())\n        <span class=\"hljs-built_in\">super</span>(UnitTestBase, self).setUp()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_csrf_request</span>(<span class=\"hljs-params\">self, post=<span class=\"hljs-literal\">None</span></span>):\n        csrf = <span class=\"hljs-string\">'abc'</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-string\">u'csrf_token'</span> <span class=\"hljs-keyword\">in</span> post.keys():\n            post.update({\n                <span class=\"hljs-string\">'csrf_token'</span>: csrf\n            })\n\n        request = testing.DummyRequest(post)\n\n        request.session = Mock()\n        csrf_token = Mock()\n        csrf_token.return_value = csrf\n\n        request.session.get_csrf_token = csrf_token\n\n        <span class=\"hljs-keyword\">return</span> request\n</code></pre>\n<p>We built in a utility function to help us test requests that require a\ncsrf token as well. Here is how we would use this class:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestViews</span>(<span class=\"hljs-title class_ inherited__\">UnitTestBase</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_login_fails_empty</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">\"\"\" Make sure we can't login with empty credentials\"\"\"</span>\n        <span class=\"hljs-keyword\">from</span> app.accounts.views <span class=\"hljs-keyword\">import</span> LoginView\n        self.config.add_route(<span class=\"hljs-string\">'index'</span>, <span class=\"hljs-string\">'/'</span>)\n        self.config.add_route(<span class=\"hljs-string\">'dashboard'</span>, <span class=\"hljs-string\">'/'</span>)\n\n        request = testing.DummyRequest(post={\n            <span class=\"hljs-string\">'submit'</span>: <span class=\"hljs-literal\">True</span>,\n        })\n\n        view = LoginView(request)\n        response = view.post()\n        errors = response[<span class=\"hljs-string\">'errors'</span>]\n\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">0</span>].node.name == <span class=\"hljs-string\">u'csrf_token'</span>\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">0</span>].msg == <span class=\"hljs-string\">u'Required'</span>\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">1</span>].node.name == <span class=\"hljs-string\">u'Username'</span>\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">1</span>].msg == <span class=\"hljs-string\">u'Required'</span>\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">2</span>].node.name == <span class=\"hljs-string\">u'Password'</span>\n        <span class=\"hljs-keyword\">assert</span> errors[<span class=\"hljs-number\">2</span>].msg == <span class=\"hljs-string\">u'Required'</span>\n\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_login_succeeds</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">\"\"\" Make sure we can login \"\"\"</span>\n        admin = User(username=<span class=\"hljs-string\">'sontek'</span>, password=<span class=\"hljs-string\">'temp'</span>, kind=<span class=\"hljs-string\">u'admin'</span>)\n        admin.activated = <span class=\"hljs-literal\">True</span>\n        self.session.add(admin)\n        self.session.flush()\n\n        <span class=\"hljs-keyword\">from</span> app.accounts.views <span class=\"hljs-keyword\">import</span> LoginView\n        self.config.add_route(<span class=\"hljs-string\">'index'</span>, <span class=\"hljs-string\">'/'</span>)\n        self.config.add_route(<span class=\"hljs-string\">'dashboard'</span>, <span class=\"hljs-string\">'/dashboard'</span>)\n\n        request = self.get_csrf_request(post={\n                <span class=\"hljs-string\">'submit'</span>: <span class=\"hljs-literal\">True</span>,\n                <span class=\"hljs-string\">'Username'</span>: <span class=\"hljs-string\">'sontek'</span>,\n                <span class=\"hljs-string\">'Password'</span>: <span class=\"hljs-string\">'temp'</span>,\n            })\n\n        view = LoginView(request)\n        response = view.post()\n\n        <span class=\"hljs-keyword\">assert</span> response.status_int == <span class=\"hljs-number\">302</span>\n</code></pre>\n<h1>Integration Tests</h1>\n<p>The second type of test you will want to write is an integration test.\nThis will integrate with the whole web framework and actually hit the\ndefine routes, render the templates, and actually test the full stack of\nyour application.</p>\n<p>Luckily this is pretty easy to do with Pyramid using WebTest:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntegrationTestBase</span>(<span class=\"hljs-title class_ inherited__\">BaseTestCase</span>):\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setUpClass</span>(<span class=\"hljs-params\">cls</span>):\n        cls.app = main({}, **settings)\n        <span class=\"hljs-built_in\">super</span>(IntegrationTestBase, cls).setUpClass()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setUp</span>(<span class=\"hljs-params\">self</span>):\n        self.app = TestApp(self.app)\n        self.config = testing.setUp()\n        <span class=\"hljs-built_in\">super</span>(IntegrationTestBase, self).setUp()\n</code></pre>\n<p>In setUpClass, we run the main function of the applications\n__init__.py that sets up the WSGI application and then we wrap it in\na TestApp that gives us the ability to call get/post on it.</p>\n<p>Here is an example of it in use:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestViews</span>(<span class=\"hljs-title class_ inherited__\">IntegrationTestBase</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_get_login</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">\"\"\" Call the login view, make sure routes are working \"\"\"</span>\n        res = self.app.get(<span class=\"hljs-string\">'/login'</span>)\n        self.assertEqual(res.status_int, <span class=\"hljs-number\">200</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_empty_login</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">\"\"\" Empty login fails \"\"\"</span>\n        res = self.app.post(<span class=\"hljs-string\">'/login'</span>, {<span class=\"hljs-string\">'submit'</span>: <span class=\"hljs-literal\">True</span>})\n\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">\"There was a problem with your submission\"</span> <span class=\"hljs-keyword\">in</span> res.body\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">\"Required\"</span> <span class=\"hljs-keyword\">in</span> res.body\n        <span class=\"hljs-keyword\">assert</span> res.status_int == <span class=\"hljs-number\">200</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_valid_login</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">\"\"\" Call the login view, make sure routes are working \"\"\"</span>\n        admin = User(username=<span class=\"hljs-string\">'sontek'</span>, password=<span class=\"hljs-string\">'temp'</span>, kind=<span class=\"hljs-string\">u'admin'</span>)\n        admin.activated = <span class=\"hljs-literal\">True</span>\n        self.session.add(admin)\n        self.session.flush()\n\n        res = self.app.get(<span class=\"hljs-string\">'/login'</span>)\n\n        csrf = res.form.fields[<span class=\"hljs-string\">'csrf_token'</span>][<span class=\"hljs-number\">0</span>].value\n\n        res = self.app.post(<span class=\"hljs-string\">'/login'</span>,\n            {\n                <span class=\"hljs-string\">'submit'</span>: <span class=\"hljs-literal\">True</span>,\n                <span class=\"hljs-string\">'Username'</span>: <span class=\"hljs-string\">'sontek'</span>,\n                <span class=\"hljs-string\">'Password'</span>: <span class=\"hljs-string\">'temp'</span>,\n                <span class=\"hljs-string\">'csrf_token'</span>: csrf\n            }\n        )\n\n        <span class=\"hljs-keyword\">assert</span> res.status_int == <span class=\"hljs-number\">302</span>\n</code></pre>\n<h1>Problems with this approach</h1>\n<p>If a test causes an error that will prevent the transaction from rolling\nback, such as closing the engine, then this approach will leave your\ndatabase in a state that might cause other tests to fail.</p>\n<p>If this happens tracing the root cause could be difficult but you should\nbe able to just look at the first failed test unless you are running the\ntests in parallel.</p>\n<p>If you are good about writing and running your tests regularly you\nshould be able to catch individual tests causing issues like this fairly\nquickly.</p>\n<h1>Resources</h1>\n<p><a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/testing.html\">http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/testing.html</a></p>\n<p><a href=\"http://www.sqlalchemy.org/docs/orm/session.html#joining-a-session-into-an-external-transaction\">http://www.sqlalchemy.org/docs/orm/session.html#joining-a-session-into-an-external-transaction</a></p>\n<p>John Anderson &#x3C;<a href=\"mailto:sontek@gmail.com\">sontek@gmail.com</a>> 2011</p>","category":"Python","date":"2011-12-01T00:00:00Z","tags":["Python"],"title":"Writing tests for Pyramid and SQLAlchemy"}]},"NodeJS":{"count":1,"posts":[{"id":["2022","intro_to_asdf"],"path":"2022/intro_to_asdf","contentHtml":"<p><a href=\"https://asdf-vm.com/\">asdf</a> is a general purpose version manager that\ncan manage versions of most programming language runtimes through a set\nof plugins.</p>\n<p>With micro-services being all the rage and the ever changing landscape\nof the development world, it is rare to utilize a single version of\nlanguage runtime. Even when you want to upgrade from one to the other\nyou'll need both usable on your system at the same time.</p>\n<p>I've used tools like <code>pyenv</code> and <code>nvm</code> in the past when I needed to change\nversions depending on which project I'm contributing to. But with <code>asdf</code>\nyou have one tool to rule them all!</p>\n<h2>Getting Started</h2>\n<p>The first thing you need to do when working with <code>asdf</code> is grab the\nplugins for the languages you are interested in working with. You can list\nwhat plugins are available:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin list all\ngolang                       *https://github.com/kennyp/asdf-golang.git\ngolangci-lint                 https://github.com/hypnoglow/asdf-golangci-lint.git\nnodejs                       *https://github.com/asdf-vm/asdf-nodejs.git\npoetry                       *https://github.com/asdf-community/asdf-poetry.git\npython                       *https://github.com/danhper/asdf-python.git\nyarn                         *https://github.com/twuni/asdf-yarn.git\n</code></pre>\n<p>On the left will be the name of the plugin and on the right will be the repository\nwhere it lives.  It'll me marked with an asterisk if you already have it installed.</p>\n<p>To install a plugin you say <code>asdf plugin add &#x3C;plugin></code> to get it installed.  You can\nalso provide the repository where you want it pulled from, for example:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n> asdf plugin add python https://github.com/danhper/asdf-python.git\n</code></pre>\n<p>This will not give you any version of those languages, it is only installing the\nplugin that knows how to work with those languages.   You are ready to pull down\nany versions you want at that point:</p>\n<pre><code class=\"hljs language-bash\">> asdf install nodejs 14.19.0\n> asdf install python 3.9.10\n</code></pre>\n<p>Once you have the versions installed you will be able to view them like this:</p>\n<pre><code class=\"hljs language-bash\">> asdf list\ngolang\n  1.17.7\nnodejs\n  --<span class=\"hljs-built_in\">help</span>\n  12.22.10\n  14.19.0\n  16.14.0\n  17.5.0\npoetry\n  1.1.13\npython\n  3.9.10\nyarn\n  1.22.17\n</code></pre>\n<h2>Using the installed languages</h2>\n<p>To activate a specific version of a language you have you have three options:</p>\n<h3>Make it global</h3>\n<p>You can make it global, meaning when you run the tool like <code>python</code> it'll use\nthis version for the system:</p>\n<pre><code class=\"hljs language-bash\">> asdf global python 3.9.10\n</code></pre>\n<h3>Make it local</h3>\n<p>You can make it local, which means it will generate a file in the current\ndirectory named <code>.tool-versions</code> and so whenever you change into a directory\nit will activate the versions defined in there.</p>\n<pre><code class=\"hljs language-bash\">> asdf <span class=\"hljs-built_in\">local</span> nodejs 12.22.10\n> <span class=\"hljs-built_in\">cat</span> .tool-versions \nnodejs 12.22.10\n</code></pre>\n<p>The great thing about this is you can commit that file to git and then anyone\nwho checks out the project and uses <code>asdf</code> will have the same versions activated!</p>\n<h3>Temporary</h3>\n<p>If you want to activate a version of a language temporarily you can swap to it\nfor the current shell:</p>\n<pre><code class=\"hljs language-bash\">> asdf shell golang 1.17.7\n> <span class=\"hljs-built_in\">env</span>|grep -i ASDF\nASDF_GOLANG_VERSION=1.17.7\n</code></pre>\n<p>It sets an environment variable that will have preference over the file. If you\never wonder what versions a directory is using you can run:</p>\n<pre><code class=\"hljs language-bash\">> asdf current\ngolang          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> golang &#x3C;version>\"</span>\nnodejs          12.22.10        .tool-versions\npoetry          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> poetry &#x3C;version>\"</span>\npython          3.9.10          .tool-versions\nyarn            1.22.17         .tool-versions\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://asdf-vm.com/\">asdf</a>  is an AWESOME tool to utilize if you find yourself using many\ndifferent languages or many different versions of the same language. You should check it out\nand see if it can improve your workflow.</p>\n<p>I made a video of me using the tool here:</p>\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/RTaqWRj-6Lg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"Development","date":"2022-02-18T00:00:00Z","tags":["Python","NodeJS","GoLang","Linux"],"title":"Use asdf to manage Python, NodeJS, GoLang and more!"}]},"GoLang":{"count":1,"posts":[{"id":["2022","intro_to_asdf"],"path":"2022/intro_to_asdf","contentHtml":"<p><a href=\"https://asdf-vm.com/\">asdf</a> is a general purpose version manager that\ncan manage versions of most programming language runtimes through a set\nof plugins.</p>\n<p>With micro-services being all the rage and the ever changing landscape\nof the development world, it is rare to utilize a single version of\nlanguage runtime. Even when you want to upgrade from one to the other\nyou'll need both usable on your system at the same time.</p>\n<p>I've used tools like <code>pyenv</code> and <code>nvm</code> in the past when I needed to change\nversions depending on which project I'm contributing to. But with <code>asdf</code>\nyou have one tool to rule them all!</p>\n<h2>Getting Started</h2>\n<p>The first thing you need to do when working with <code>asdf</code> is grab the\nplugins for the languages you are interested in working with. You can list\nwhat plugins are available:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin list all\ngolang                       *https://github.com/kennyp/asdf-golang.git\ngolangci-lint                 https://github.com/hypnoglow/asdf-golangci-lint.git\nnodejs                       *https://github.com/asdf-vm/asdf-nodejs.git\npoetry                       *https://github.com/asdf-community/asdf-poetry.git\npython                       *https://github.com/danhper/asdf-python.git\nyarn                         *https://github.com/twuni/asdf-yarn.git\n</code></pre>\n<p>On the left will be the name of the plugin and on the right will be the repository\nwhere it lives.  It'll me marked with an asterisk if you already have it installed.</p>\n<p>To install a plugin you say <code>asdf plugin add &#x3C;plugin></code> to get it installed.  You can\nalso provide the repository where you want it pulled from, for example:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n> asdf plugin add python https://github.com/danhper/asdf-python.git\n</code></pre>\n<p>This will not give you any version of those languages, it is only installing the\nplugin that knows how to work with those languages.   You are ready to pull down\nany versions you want at that point:</p>\n<pre><code class=\"hljs language-bash\">> asdf install nodejs 14.19.0\n> asdf install python 3.9.10\n</code></pre>\n<p>Once you have the versions installed you will be able to view them like this:</p>\n<pre><code class=\"hljs language-bash\">> asdf list\ngolang\n  1.17.7\nnodejs\n  --<span class=\"hljs-built_in\">help</span>\n  12.22.10\n  14.19.0\n  16.14.0\n  17.5.0\npoetry\n  1.1.13\npython\n  3.9.10\nyarn\n  1.22.17\n</code></pre>\n<h2>Using the installed languages</h2>\n<p>To activate a specific version of a language you have you have three options:</p>\n<h3>Make it global</h3>\n<p>You can make it global, meaning when you run the tool like <code>python</code> it'll use\nthis version for the system:</p>\n<pre><code class=\"hljs language-bash\">> asdf global python 3.9.10\n</code></pre>\n<h3>Make it local</h3>\n<p>You can make it local, which means it will generate a file in the current\ndirectory named <code>.tool-versions</code> and so whenever you change into a directory\nit will activate the versions defined in there.</p>\n<pre><code class=\"hljs language-bash\">> asdf <span class=\"hljs-built_in\">local</span> nodejs 12.22.10\n> <span class=\"hljs-built_in\">cat</span> .tool-versions \nnodejs 12.22.10\n</code></pre>\n<p>The great thing about this is you can commit that file to git and then anyone\nwho checks out the project and uses <code>asdf</code> will have the same versions activated!</p>\n<h3>Temporary</h3>\n<p>If you want to activate a version of a language temporarily you can swap to it\nfor the current shell:</p>\n<pre><code class=\"hljs language-bash\">> asdf shell golang 1.17.7\n> <span class=\"hljs-built_in\">env</span>|grep -i ASDF\nASDF_GOLANG_VERSION=1.17.7\n</code></pre>\n<p>It sets an environment variable that will have preference over the file. If you\never wonder what versions a directory is using you can run:</p>\n<pre><code class=\"hljs language-bash\">> asdf current\ngolang          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> golang &#x3C;version>\"</span>\nnodejs          12.22.10        .tool-versions\npoetry          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> poetry &#x3C;version>\"</span>\npython          3.9.10          .tool-versions\nyarn            1.22.17         .tool-versions\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://asdf-vm.com/\">asdf</a>  is an AWESOME tool to utilize if you find yourself using many\ndifferent languages or many different versions of the same language. You should check it out\nand see if it can improve your workflow.</p>\n<p>I made a video of me using the tool here:</p>\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/RTaqWRj-6Lg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"Development","date":"2022-02-18T00:00:00Z","tags":["Python","NodeJS","GoLang","Linux"],"title":"Use asdf to manage Python, NodeJS, GoLang and more!"}]},"Linux":{"count":4,"posts":[{"id":["2022","intro_to_asdf"],"path":"2022/intro_to_asdf","contentHtml":"<p><a href=\"https://asdf-vm.com/\">asdf</a> is a general purpose version manager that\ncan manage versions of most programming language runtimes through a set\nof plugins.</p>\n<p>With micro-services being all the rage and the ever changing landscape\nof the development world, it is rare to utilize a single version of\nlanguage runtime. Even when you want to upgrade from one to the other\nyou'll need both usable on your system at the same time.</p>\n<p>I've used tools like <code>pyenv</code> and <code>nvm</code> in the past when I needed to change\nversions depending on which project I'm contributing to. But with <code>asdf</code>\nyou have one tool to rule them all!</p>\n<h2>Getting Started</h2>\n<p>The first thing you need to do when working with <code>asdf</code> is grab the\nplugins for the languages you are interested in working with. You can list\nwhat plugins are available:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin list all\ngolang                       *https://github.com/kennyp/asdf-golang.git\ngolangci-lint                 https://github.com/hypnoglow/asdf-golangci-lint.git\nnodejs                       *https://github.com/asdf-vm/asdf-nodejs.git\npoetry                       *https://github.com/asdf-community/asdf-poetry.git\npython                       *https://github.com/danhper/asdf-python.git\nyarn                         *https://github.com/twuni/asdf-yarn.git\n</code></pre>\n<p>On the left will be the name of the plugin and on the right will be the repository\nwhere it lives.  It'll me marked with an asterisk if you already have it installed.</p>\n<p>To install a plugin you say <code>asdf plugin add &#x3C;plugin></code> to get it installed.  You can\nalso provide the repository where you want it pulled from, for example:</p>\n<pre><code class=\"hljs language-bash\">> asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n> asdf plugin add python https://github.com/danhper/asdf-python.git\n</code></pre>\n<p>This will not give you any version of those languages, it is only installing the\nplugin that knows how to work with those languages.   You are ready to pull down\nany versions you want at that point:</p>\n<pre><code class=\"hljs language-bash\">> asdf install nodejs 14.19.0\n> asdf install python 3.9.10\n</code></pre>\n<p>Once you have the versions installed you will be able to view them like this:</p>\n<pre><code class=\"hljs language-bash\">> asdf list\ngolang\n  1.17.7\nnodejs\n  --<span class=\"hljs-built_in\">help</span>\n  12.22.10\n  14.19.0\n  16.14.0\n  17.5.0\npoetry\n  1.1.13\npython\n  3.9.10\nyarn\n  1.22.17\n</code></pre>\n<h2>Using the installed languages</h2>\n<p>To activate a specific version of a language you have you have three options:</p>\n<h3>Make it global</h3>\n<p>You can make it global, meaning when you run the tool like <code>python</code> it'll use\nthis version for the system:</p>\n<pre><code class=\"hljs language-bash\">> asdf global python 3.9.10\n</code></pre>\n<h3>Make it local</h3>\n<p>You can make it local, which means it will generate a file in the current\ndirectory named <code>.tool-versions</code> and so whenever you change into a directory\nit will activate the versions defined in there.</p>\n<pre><code class=\"hljs language-bash\">> asdf <span class=\"hljs-built_in\">local</span> nodejs 12.22.10\n> <span class=\"hljs-built_in\">cat</span> .tool-versions \nnodejs 12.22.10\n</code></pre>\n<p>The great thing about this is you can commit that file to git and then anyone\nwho checks out the project and uses <code>asdf</code> will have the same versions activated!</p>\n<h3>Temporary</h3>\n<p>If you want to activate a version of a language temporarily you can swap to it\nfor the current shell:</p>\n<pre><code class=\"hljs language-bash\">> asdf shell golang 1.17.7\n> <span class=\"hljs-built_in\">env</span>|grep -i ASDF\nASDF_GOLANG_VERSION=1.17.7\n</code></pre>\n<p>It sets an environment variable that will have preference over the file. If you\never wonder what versions a directory is using you can run:</p>\n<pre><code class=\"hljs language-bash\">> asdf current\ngolang          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> golang &#x3C;version>\"</span>\nnodejs          12.22.10        .tool-versions\npoetry          ______          No version <span class=\"hljs-built_in\">set</span>. Run <span class=\"hljs-string\">\"asdf &#x3C;global|shell|local> poetry &#x3C;version>\"</span>\npython          3.9.10          .tool-versions\nyarn            1.22.17         .tool-versions\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://asdf-vm.com/\">asdf</a>  is an AWESOME tool to utilize if you find yourself using many\ndifferent languages or many different versions of the same language. You should check it out\nand see if it can improve your workflow.</p>\n<p>I made a video of me using the tool here:</p>\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/RTaqWRj-6Lg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"Development","date":"2022-02-18T00:00:00Z","tags":["Python","NodeJS","GoLang","Linux"],"title":"Use asdf to manage Python, NodeJS, GoLang and more!"},{"id":["2022","intro_to_just"],"path":"2022/intro_to_just","contentHtml":"<p>I believe every project should have a CLI built around the standard workflows of developing\non the project.  Things like:</p>\n<ul>\n<li>Install dependencies</li>\n<li>Run tests</li>\n<li>Run linter and formatters</li>\n<li>Build project</li>\n<li>Start / Stop the docker environment</li>\n</ul>\n<p>The reason I think this is important is because it makes a nice consistent and discoverable\nentrypoint for understanding how you should work in the project.   If you only provide the\ninstructions in the <code>README</code> then you have to remember to update those docs every time you\nadd a new command.  Those docs aren't easily testable either.</p>\n<p>Most of my career the command runner of choice for my projects as been <code>GNU Make</code> but it was\ndefinitely the wrong tool for the job.  It is a build tool that I bent into shape to work\nas a command runner for me.   These days I use the tool <a href=\"https://github.com/casey/just\">just</a>.</p>\n<h2>Intro to just</h2>\n<p><a href=\"https://github.com/casey/just\">Just</a> is a modern command runner with a similar syntax to <code>make</code>\nthat provides a nice way for building out your project CLI!  You create a file named <code>justfile</code>\nat the root of your project and then the basic syntax is:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">help:</span>\n  @just --list\n\n<span class=\"hljs-comment\"># My first command</span>\n<span class=\"hljs-section\">first:</span>\n  echo <span class=\"hljs-string\">\"Any commands you want to run go here!\"</span>\n</code></pre>\n<p>The first <code>help</code> line defines a command \"help\" for your CLI and it lists out all the other available\ncommans.  I always put this line first because <code>just</code> runs the first command in the file if a specific\ncommand isn't requested.  The output of this file looks like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ just\nAvailable recipes:\n    first <span class=\"hljs-comment\"># My first command</span>\n    <span class=\"hljs-built_in\">help</span>\n</code></pre>\n<p>Having help automatically generated is fantastic!  Its also really helpful that it adds the comment\nto the command so that each command is self-documenting.  If you run the <code>first</code> command you'll notice\nit also has a feature where it prints out the commands being ran so the user knows exactly what is\nhappening:</p>\n<pre><code class=\"hljs language-bash\">â¯ just first\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Any commands you want to run go here!\"</span>\nAny commands you want to run go here!\n</code></pre>\n<p>This doesn't always make sense though, so you can quickly remove that behavior by putting an <code>@</code> in front\nof any of the commands, like I did for the <code>help</code> command above.  You can also declare dependencies if\nyou have re-usable parts of your workflow that many of your commands need.</p>\n<p>For example, you might want to check versions of things like <code>node</code> and <code>python</code> before running the install\nof their dependencies. So you could do something like:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">help:</span>\n  @just --list\n\nnode_version := <span class=\"hljs-string\">\"v17.6.0\"</span>\n\n<span class=\"hljs-comment\"># Verify system dependencies</span>\n<span class=\"hljs-section\">check-dependencies:</span>\n  @if [ ! <span class=\"hljs-string\">\"$(node --version)\"</span> = {{ node_version }} ]; \\\n  then \\\n    echo <span class=\"hljs-string\">\"Missing node version: {{ node_version }}\"</span>; \\\n    exit 1; \\\n  fi\n\n<span class=\"hljs-comment\"># Install frontend</span>\n<span class=\"hljs-section\">install: check-dependencies</span>\n  @echo <span class=\"hljs-string\">\"yarn install\"</span>\n</code></pre>\n<p>which ends up with a CLI that looks like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ just\nAvailable recipes:\n    check-dependencies <span class=\"hljs-comment\"># Verify system dependencies</span>\n    <span class=\"hljs-built_in\">help</span>\n    install            <span class=\"hljs-comment\"># Install frontend</span>\n\nâ¯ just install\nMissing node version: v17.6.0\nerror: Recipe `check-dependencies` failed on line 12 with <span class=\"hljs-built_in\">exit</span> code 1\n</code></pre>\n<p>This opens up a lot of possibilities! In the above <code>justfile</code> you'll notice I'm using a multi-line\ncommand but I have <code>\\</code> at the end of each line.  This is because <code>just</code> by default is going to run\neach new line in their own shell.   So this just makes all those lines run in the same shell.</p>\n<p>You do not have to use this syntax though.  Just is <code>polyglot</code> and can run commands from any language\nyou would like.</p>\n<h3>Polyglot</h3>\n<p>If you want to use a bash script as one of your commands, you can do so by adding a shebang at the top:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">check-dependencies:</span>\n  <span class=\"hljs-comment\">#!/usr/bin/env bash</span>\n  set -euxo pipefail\n  if [ ! <span class=\"hljs-string\">\"$(node --version)\"</span> = {{ node_version }} ];\n  then\n    echo <span class=\"hljs-string\">\"Missing node version: {{ node_version }}\"</span>\n    exit 1\n  fi\n</code></pre>\n<p>Now the entire command is using a bash script to execute! This gets really interesting if you want to start\nusing things like python, so if you'd like to change the dependency checker above to python:</p>\n<pre><code class=\"hljs language-python\">check-dependencies:\n  <span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n  <span class=\"hljs-keyword\">import</span> subprocess\n  result = subprocess.run(\n    [<span class=\"hljs-string\">'node'</span>, <span class=\"hljs-string\">'--version'</span>],\n    stdout=subprocess.PIPE\n  )\n  <span class=\"hljs-keyword\">if</span> result != <span class=\"hljs-string\">\"{{ node_version }}\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Missing node version: {{ node_version }}\"</span>)\n    exit(<span class=\"hljs-number\">1</span>)\n</code></pre>\n<p>You can even tell <code>just</code> that you want to use a specific language for all commands!</p>\n<pre><code class=\"hljs language-arduino\">set shell := [<span class=\"hljs-string\">\"python3\"</span>, <span class=\"hljs-string\">\"-c\"</span>]\n</code></pre>\n<p>This not only affects the commands you have in your recipe but also anything inside\nbackticks!  So something like:</p>\n<pre><code class=\"hljs language-make\">`print(<span class=\"hljs-string\">\"Rust is the best programming language\"</span>)`\n</code></pre>\n<p>It would run through python instead of the shell.</p>\n<h3>Enviornment Files</h3>\n<p>One of the other modern things <code>just</code> adds to your workflow is the ability to utilize dotenv\nfiles.  So for example if you want to define which port you launch your http server on, you can\ncreate a file called <code>.env</code>:</p>\n<pre><code class=\"hljs language-bash\">WEBSERVER_PORT=9000\n</code></pre>\n<p>and then utilize it in your <code>justfile</code>:</p>\n<pre><code class=\"hljs language-make\">set dotenv-load\n\n<span class=\"hljs-section\">http:</span>\n  @echo <span class=\"hljs-string\">\"Starting webserver in current directory\"</span>\n  python3 -m http.server $WEBSERVER_PORT\n</code></pre>\n<p>When you run <code>just http</code> it'll launch the http server on port 9000.  One important line\nin this file is <code>set dotenv-load</code>, it will not load the <code>.env</code> file without you telling it to.</p>\n<h2>Don't use language specific scripts!</h2>\n<p>I'n not a fan of language specific command runners like <code>package.json</code> in the node community.</p>\n<p>It always frustrates me when I start working on a project that heavily uses <code>scripts</code> in their\npackage.json instead of using a real command runner. <code>json</code> is not a great format for writing\ndiscoverable CLI commands. For example if you wanted to write a <code>next.js</code> build script:</p>\n<pre><code class=\"hljs language-json\">    <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"predeploy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"yarn build &#x26;&#x26; yarn export &#x26;&#x26; touch dist/.nojekyll &#x26;&#x26; echo sontek.net > dist/CNAME\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"deploy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"gh-pages -d dist -t true\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"build\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next build\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"export\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next export -o dist/\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>Combining all those commands is really messy and not easily understandable through <code>yarn run</code>:</p>\n<pre><code class=\"hljs language-bash\">â¯ yarn run\nyarn run v1.22.17\ninfo Commands available from binary scripts: autoprefixer, browserslist, css-blank-pseudo, css-has-pseudo, css-prefers-color-scheme, cssesc, esparse, esvalidate, extract-zip, gh-pages, gh-pages-clean, js-yaml, loose-envify, nanoid, next, prettier, resolve, rimraf, semver, svgo, uvu\ninfo Project commands\n   - build\n      next build\n   - deploy\n      gh-pages -d dist -t <span class=\"hljs-literal\">true</span>\n   - <span class=\"hljs-built_in\">export</span>\n      next <span class=\"hljs-built_in\">export</span> -o dist/\n   - predeploy\n      yarn build &#x26;&#x26; yarn <span class=\"hljs-built_in\">export</span> &#x26;&#x26; <span class=\"hljs-built_in\">touch</span> dist/.nojekyll &#x26;&#x26; <span class=\"hljs-built_in\">echo</span> sontek.net > dist/CNAME\n</code></pre>\n<p>I'd much rather have this:</p>\n<pre><code class=\"hljs language-bash\">â¯ just\nAvailable recipes:\n    build       <span class=\"hljs-comment\"># Build frontend assets</span>\n    deploy      <span class=\"hljs-comment\"># Deploy assets to cloudfront</span>\n    <span class=\"hljs-built_in\">export</span>      <span class=\"hljs-comment\"># Export to static assets (no SSR)</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://github.com/casey/just\">Just</a> is a wonderful tool for building project specific CLIs without much effort. It is\na great replacement for <code>Make</code> if you are using it as a command runner and it has most of the features you'd need.</p>\n<p>I recommend adding a <code>justfile</code> to your projects today! If you'd like to see a real world example of how to use <code>just</code>,\nyou can check out the one I use to maintain my <a href=\"https://github.com/sontek/homies/blob/master/justfile\">home directory</a>!</p>","category":"Development","date":"2022-02-26T00:00:00Z","tags":["Linux"],"title":"Automate project workflows with the command runner Just!"},{"id":["2022","local_kubeadm_cluster"],"path":"2022/local_kubeadm_cluster","contentHtml":"<p>Iâm going to show you how to get a real kubernetes cluster setup locally on top of virtual\nmachines!  Iâll be using multipass but feel free to use virtualbox, proxmox, or whatever your\nfavorite cloud provider is.</p>\n<p>kubeadm a production ready kubernetes install tool and I prefer to use it over minikube, kind,\netc. because it gives you a more real world experience for <em>managing</em> the kubernetes cluster.\nThis isnât important if you are a user of the cluster but if you have to run your own this is\na great way to gain some daily experience.</p>\n<p>The kubernetes documentation on kubeadm is great and you can find it <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">here</a>.</p>\n<p>The differences between this blog and the kubernetes docs is that they leave a lot of decisions\nup to the reader such as:</p>\n<ul>\n<li>choosing a container runtime</li>\n<li>Selecting and installing a CNI (container network interface)</li>\n</ul>\n<p>Iâm going to be opinionated and make specific technology decisions such as using containerd and\ncilium so that you don't have to think about those decisions.</p>\n<h2>Getting your Virtual Machines setup!</h2>\n<p>The minimum requirements for a control plane node in kubernetes is 2gb of RAM and 2 CPUs.  Since\nwe actually want to be able to schedule workloads on the workers afterwards we are going to setup\na cluster that looks like this:</p>\n<ul>\n<li>Control Plane: 2gb RAM, 2 CPU</li>\n<li>Worker: 4gb RAM, 2 CPU</li>\n</ul>\n<p>Since weâll be using multipass to launch the nodes, we can do that now:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass launch -c 2 -m 4G -d 10G -n controlplane 22.04\nâ¯ multipass launch -c 2 -m 4G -d 10G -n worker 22.04\nâ¯ multipass list\nName                    State             IPv4             Image\ncontrolplane            Running           192.168.64.7     Ubuntu 22.04 LTS\nworker                  Running           192.168.64.8     Ubuntu 22.04 LTS\n</code></pre>\n<p>Now we can start working on our controlplane first, lets shell in:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell controlplane\n</code></pre>\n<p>Lets first add the kubernetes repo to the system so we have access to all the kubernetes tools:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n</code></pre>\n<p>Now that our system is setup, we can move on to getting a container runtime.</p>\n<h2>Getting your Container Runtime!</h2>\n<p>Before we start pulling in kubernetes components we need to get a container runtime setup on the\nmachine.   We we are going to use containerd for this purpose.  You can view the docs of for it\n<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">here</a>.</p>\n<p>Which will download the latest binary and set it up.   Iâm going to walk you through how to do it\nusing the version packaged with Ubuntu which could be older than the latest release.</p>\n<p>First thing we want to do is configure the networking to allow iptables to manage:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n</code></pre>\n<p>We also need to disable some default systemd settings for <code>rp_filter</code>  because\nthey are not compatible with cilium. See the bug report\n<a href=\"https://github.com/cilium/cilium/commit/cabc6581b8128681f4ed23f8d6dc463180eea61e\">here</a></p>\n<pre><code class=\"hljs language-bash\">â¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n</code></pre>\n<p>Then we need to refresh sysctl so those settings are applied:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n</code></pre>\n<p>You should see it applying all the changes:</p>\n<pre><code class=\"hljs language-ini\">* Applying /etc/sysctl.d/k8s.conf ...\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.ipv4.ip_forward</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>If you do not, the netfilter module may not have loaded properly:</p>\n<pre><code class=\"hljs language-bash\">â¯ lsmod |grep br_netfilter\nbr_netfilter           28672  0\nbridge                176128  1 br_netfilter\n</code></pre>\n<p>You want to make sure <code>rp_filter</code> is <code>0</code> everywhere as well for cilium:</p>\n<pre><code class=\"hljs language-ini\">â¯ sudo sysctl -a | grep '\\.rp_filter'\n<span class=\"hljs-attr\">net.ipv4.conf.all.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_host.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_net.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_vxlan.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.enp0s1.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lo.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxc0965b7b545f7.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxcb05ffd84ab74.rp_filter</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>Now lets pull down the container runtime weâll be using which is containerd.</p>\n<p>Ubuntu ships with a very old version of containerd so you need to upgrade to\nthe version shipped from the docker repos:\nYou can find which versions are available by running:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\nâ¯ sudo apt-get update\n</code></pre>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison containerd.io\ncontainerd.io |    1.6.8-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.7-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.6-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.4-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.11-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.10-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\n</code></pre>\n<p>We are going to use the latest version available which was 1.6.8-1</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install containerd.io=1.6.8-1 -y\n</code></pre>\n<p>Then we'll setup a configuration that enables containerd to use the systemd\ncgroup.  We are hard coding this config instead of using <code>containerd config default</code>\nbecause that currently has had a <a href=\"https://github.com/containerd/containerd/issues/4574\">bug</a>\nfor many years that generates an invalid config.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\n</code></pre>\n<p>You can verify its running with ctr:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo ctr --address /var/run/containerd/containerd.sock containers list\nCONTAINER    IMAGE    RUNTIME\n</code></pre>\n<p>Now that this is working we can move on to getting kubernetes installed!</p>\n<h2>Using kubeadm!</h2>\n<p>Now we need to get the kubernetes tools installed onto the system.  Iâm going to be using 1.23\nbut to find the latest version you can run:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison kubeadm|<span class=\"hljs-built_in\">head</span> -n2\n   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n</code></pre>\n<p>Then install the version you want, we install kubelet and kubeadm here to make\nsure the versions align:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n</code></pre>\n<p>This will pull in a few tools, including an alternative to <code>ctr</code> that we used earlier called\n<code>crictl</code>.  You can check that it is available to you doing this:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps\n</code></pre>\n<p>We can finally init our cluster:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm init\n</code></pre>\n<p>Once that finishes running it should give you some tips setup your configuration, it should look like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\nâ¯ sudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\nâ¯ sudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n<p>You can run those on the master node for now, but later I'll show you how to move\nthe config to your host computer.</p>\n<p>Now you should be able to check that your node is not ready yet:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS     ROLES                  AGE     VERSION\ncontrolplane   NotReady   control-plane,master   4m16s   v1.23.5\n</code></pre>\n<p><em>Note</em>: If you recieve \"The connecto to the server was refused\" error,\nThe cluster starting up and getting all the dependencies running could take\na bit of time.  So if you aren't able to communicate right away you can check\nwhich pods are up and running with <code>crictl</code>.  You'll need <code>kube-apiserver</code> up\nand running.  If it isn't you can check:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps -a\nCONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD\n8322192c4605c       bd8cc6d582470       36 seconds ago      Running             kube-proxy                4                   344c4f7fffbe8       kube-proxy-drm46\n30ce27c40adb2       81a4a8a4ac639       2 minutes ago       Exited              kube-controller-manager   4                   3a819c3a864b2       kube-controller-manager-controlplane\n7709fd5e92898       bd8cc6d582470       2 minutes ago       Exited              kube-proxy                3                   7cc6922c82015       kube-proxy-drm46\n10432b81d7c61       3767741e7fba7       2 minutes ago       Exited              kube-apiserver            4                   e64ddf3679d98       kube-apiserver-controlplane\n</code></pre>\n<p>which will show you pods that have exited. You can grab the container ID for\nkube-apiserver and read its logs:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock logs 10432b81d7c61\n</code></pre>\n<p>There are a few ways to figure out why the node isnât ready yet.  Usually I would check the\n<code>kubelet</code> logs first:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo journalctl -flu kubelet\n-- Logs begin at Sun 2022-04-17 19:22:19 AST. --\nApr 17 20:53:15 controlplane kubelet[19727]: E0417 20:53:15.951350   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\nApr 17 20:53:20 controlplane kubelet[19727]: E0417 20:53:20.952148   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\n</code></pre>\n<p>It is clear the problem is that we are missing the CNI.  The other way you can find out what is\ngoing on is describing the node:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane\n</code></pre>\n<p>This will have a lot of information but if you scroll through there looking at <code>Reason</code> you\nmight see something useful.  In this case under <code>Lease</code> you would see:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane|grep NotReady\nReady            False   Sun, 17 Apr 2022 20:53:37 -0400   Sun, 17 Apr 2022 20:43:07 -0400   KubeletNotReady              container runtime network not ready: NetworkReady=<span class=\"hljs-literal\">false</span> reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialize\n</code></pre>\n<p>Lets get our CNI installed, weâll be using cilium!</p>\n<h2>Setting up your CNI!</h2>\n<p>Cilium has great documentation over <a href=\"https://docs.cilium.io/en/v1.9/gettingstarted/k8s-install-kubeadm/\">here</a>,\nbut Iâll walk you through it anyways.  I do recommend checking out their documentation so you\nare familiar with it.   We will use <code>helm</code> to pull down the version of cilium we want:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL  https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/helm.gpg\n\nâ¯ sudo apt-get install apt-transport-https --<span class=\"hljs-built_in\">yes</span>\n\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://baltocdn.com/helm/stable/debian/ all main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list\n\nâ¯ sudo apt-get update\nâ¯ sudo apt-get install helm\n</code></pre>\n<p>Now we can install cilium!  It is <em>very</em> important that you pay attention to the\ncompatibility of cilium with the version of kubernetes you are intstalling. Check\nthe compatibility list <a href=\"https://docs.cilium.io/en/v1.12/concepts/kubernetes/compatibility/\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">â¯ helm repo add cilium https://helm.cilium.io/\nâ¯ helm repo update\n</code></pre>\n<p>Once the repo is added you can list the versions available:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm search repo -l|<span class=\"hljs-built_in\">head</span> -n8\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\ncilium/cilium  \t1.12.1       \t1.12.1     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.12.0       \t1.12.0     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.8       \t1.11.8     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.7       \t1.11.7     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.6       \t1.11.6     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.5       \t1.11.5     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.4       \t1.11.4     \teBPF-based Networking, Security, and Observability\n</code></pre>\n<p>So we want <code>1.11.4</code>:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm install cilium cilium/cilium --namespace kube-system --version 1.11.4\n</code></pre>\n<p>Now our node should be ready!</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get node\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   24m   v1.23.5\n</code></pre>\n<p>Time to join our worker to the cluster!</p>\n<h2>Joining a worker to the cluster!</h2>\n<p>We have to go through the same steps as the controlplane to get the point that we have a\ncontainer runtime and <code>kubeadm</code>.   Iâm not going to talk about the commands a second time but\nIâll re-iterate them here for ease of following along.</p>\n<p>First open up another shell and connect to the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell worker\n</code></pre>\n<p>Now run the following commands:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\nâ¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\nâ¯ sudo apt-get install containerd.io=1.6.8-1 -y\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\nâ¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n\n</code></pre>\n<p>From there we should be ready to join the cluster.   When we ran <code>kubeadm init</code> previously it\nprinted a join command out that we could use but Iâm going to show you how to do it if you\nwere coming back later and no longer had that token.</p>\n<p>Back on the <em>controplane</em> node run:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubeadm token create --print-join-command\nkubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>Now copy that command and run it with <code>sudo</code> on the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>After this completes itâll take a minute or two for everything to be synced up but if you go\nback to the master node you should have 2 ready nodes now:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   46m   v1.23.5\nworker         Ready    &#x3C;none>                 79s   v1.23.5\n</code></pre>\n<h2>Accessing the cluster outside of the VMs!</h2>\n<p>Now the final part is to get the <code>admin.conf</code> as a kubeconfig on your machine so you can control\nit from outside of the cluster.   To do this we can use scp</p>\n<pre><code class=\"hljs language-bash\">multipass transfer controlplane:/home/ubuntu/.kube/config local.config\n</code></pre>\n<p>Normally kubernetes configuration is in ~/.kube/config but I like to maint a separate file for\neach cluster and then I set the <code>KUBECONFIG</code> env var to access it.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">export</span> KUBECONFIG=local.config\nâ¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   56m   v1.23.5\nworker         Ready    &#x3C;none>                 11m   v1.23.5\n</code></pre>","category":"Kubernetes","date":"2022-04-17T00:00:00Z","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kubeadm"},{"id":["old","preparing_cloud_images_with_libvirt"],"path":"old/preparing_cloud_images_with_libvirt","contentHtml":"<p>This article will show you how to use libvirt to create base images that\ncan be uploaded to OpenStack.</p>\n<h1>Why would you want to do this?</h1>\n<p>Linux distributions like Fedora and Ubuntu already ship \"cloud\" images\nand most providers also have their own custom images for you to use, but\nI find it much more comforting to have full control of the software that\nis installed and I like the ability to easily apply new security patches\nto base images.</p>\n<p>I wouldn't use images to replace config management (CM) with something\nlike <a href=\"http://www.saltstack.com/\">Salt</a> or\n<a href=\"http://www.ansible.com/\">Ansible</a> but they are nice to give sane system\ndefaults in things like <code>grub.conf</code>, <code>sysctl.conf</code>, and shipping a Chef\nor Salt agent so that your CM engine can communicate with your server\nright away.</p>\n<h1>Setting up your environment</h1>\n<p>The first thing you need to do is get a minimal install disk for the\nLinux distribution you want to use. I prefer using Fedora netinst disks\nbut another popular option is Ubuntu Server.</p>\n<p>To get the latest Fedora here, you can choose \"netinst\" under Direct\nDownloads: <a href=\"http://fedoraproject.org/en/get-fedora-all\">http://fedoraproject.org/en/get-fedora-all</a></p>\n<p>To get the latest Ubuntu you can go here:\n<a href=\"http://www.ubuntu.com/download/server\">http://www.ubuntu.com/download/server</a></p>\n<p>Once you have acquired your distribution of choice you just need to\nverify that you have <code>virt-install</code> and <code>virt-viewer</code> installed:</p>\n<p>Fedora:</p>\n<pre><code class=\"hljs language-bash\">yum install virt-install virt-viewer\n</code></pre>\n<p>Ubuntu:</p>\n<pre><code class=\"hljs language-bash\">apt-get install virtinst virt-viewer\n</code></pre>\n<p>If you prefer a graphical user interface, you may use <code>virt-manager</code>\ninstead, but I try to keep everything in the CLI; that way it can be\nrepeated easily.</p>\n<h1>Preparing your disk</h1>\n<p>Now that you have a base ISO and the tools necessary, let's get started\nby creating a disk to install the virtual server into. Resizing an image\nisn't an impossible task but it is much easier to choose a reasonably\nsized disk for the purpose it will be used for.</p>\n<p>I primarily use 8 GB disks -- that way we can fit all the system\ncomponents required as well as our own web applications. Any large files\nshould be placed in a SAN or something like Dreamhost's dreamobjects.</p>\n<p>The other big decision you must make upfront is what disk format you\nwant to use -- the trade-off is disk space vs performance. The two\nprimary formats are qcow2 (QEMU Copy on Write) and Raw. qcow2 is great\nif you have limited disk space and don't want to allocate the full 8 GB\nup front. Raw is preferred if you want the best performance.</p>\n<p>If you choose qcow2, you'll also need to make sure you have <code>qemu-img</code>:</p>\n<p>Fedora:</p>\n<pre><code class=\"hljs language-bash\">yum install qemu-img\n</code></pre>\n<p>Ubuntu:</p>\n<pre><code class=\"hljs language-bash\">apt-get install qemu-utils\n</code></pre>\n<p>Create a raw disk:</p>\n<pre><code class=\"hljs language-bash\">fallocate -l 8192M server.img\n</code></pre>\n<p>Create a qcow2 disk:</p>\n<pre><code class=\"hljs language-bash\">qemu-img create -f qcow2 server.qcow2 8G\n</code></pre>\n<h1>Installing your distribution onto the disk</h1>\n<p>We will use the <code>virt-install</code> command to get the distribution installed\nonto the disk image.</p>\n<p>To install Fedora on a qcow2 disk image:</p>\n<pre><code class=\"hljs language-bash\">virt-install --name base_server --ram 1024 --cdrom=./Fedora-20-x86_64-netinst.iso \\\n--disk path=./server.qcow2,format=qcow2\n</code></pre>\n<p>To install Ubuntu Server on a raw disk image:</p>\n<pre><code class=\"hljs language-bash\">virt-install --name base_server --ram 1024 --cdrom=./ubuntu-12.04.4-server-amd64.iso \\\n--disk path=./server.img,format=raw\n</code></pre>\n<p>You should follow the standard install steps that you normally would\nwhen setting up your distribution. But here are some tips for each:</p>\n<p>Fedora:</p>\n<ul>\n<li>Choose minimal install -- by default it selects \"GNOME\".</li>\n</ul>\n<p>Ubuntu:</p>\n<ul>\n<li>\n<p>Be sure to select OpenSSH server -- it won't install it by\ndefault.</p>\n</li>\n<li>\n<p>On Ubuntu 12.04, there is a bug that makes it hang after running\n<code>fsck</code>. You will need to edit grub to get it to boot, hit _<a href=\"\">e</a> at\nthe boot prompt and add \"nomodeset\" on the linux line. You will\nknow that you need to do this if your boot hangs on fsck:</p>\n<pre><code class=\"hljs language-bash\">fsck from util-linux 2.20.1\n/dev/mapper/ubuntu--vg-root: clean, 57106/441504 files, 286779/1764352 blocks\n/dev/sda1: clean, 230/62248 files, 39833/248832 blocks\n</code></pre>\n</li>\n</ul>\n<h1>Preparing image for openstack</h1>\n<p>To prepare a virtual machine for the cloud, you will need to install the\n<code>cloud-init</code> package, which allows the cloud providers to inject certain\nsystem settings when creating servers based on the image. These are\nthings like hostname and ssh keys.</p>\n<p>On Fedora:</p>\n<pre><code class=\"hljs language-bash\">yum install cloud-init\n</code></pre>\n<p>On Ubuntu:</p>\n<pre><code class=\"hljs language-bash\">apt-get install cloud-init\n</code></pre>\n<p>Then you need to just configure <code>cloud-init</code> by editing\n<code>/etc/cloud/cloud.cfg</code> and update the <code>datasources_list</code> section to\ninclude EC2. OpenStack uses EC2 metadata for <code>cloud-init</code>.</p>\n<p>You should also verify the user setting in this same config and define\nthe user you plan to use, it will be where the <code>authorized_keys</code> file is\nsetup for when the cloud provider injects your SSH key into the server.</p>\n<p><code>cloud-init</code> will not create the user for you, it will just assign the\nSSH keypair and reset the password. So make sure the user defined in\n<code>cloud.cfg</code> is also created on the system.</p>\n<p>Once you have your <code>cloud-init</code> settings the way you want them, just\nshutdown and run the <code>virt-sysprep</code> command.</p>\n<p>On the guest machine:</p>\n<pre><code class=\"hljs language-bash\">shutdown -h now\n</code></pre>\n<p>On the host machine:</p>\n<pre><code class=\"hljs language-bash\">virt-sysprep -d base_server\n</code></pre>\n<h1>Uploading your image to OpenStack</h1>\n<p>Using the glance API it is very straightforward to upload the image to\nOpenStack. Just run the following command:</p>\n<pre><code class=\"hljs language-bash\">glance image-create --name base_server --disk-format=qcow2 \\\n--container-format=bare --is-public=True --file server.qcow2 --progress\n</code></pre>\n<p>Once the image upload completes you will be able to use it immediately\nwithin nova. You can reference it by name or by the id from [glance\nimage-list]{.title-ref}.</p>\n<p>To create your first instance from the image:</p>\n<pre><code class=\"hljs language-bash\">nova boot --flavor m1.tiny --image base_server --key-name devops \\\n--security-groups free_for_all test_server\n</code></pre>\n<p>Obviously the security groups, key name, and flavors are based on your\ninstallation of OpenStack but can all easily be queried from the nova\nAPI:</p>\n<pre><code class=\"hljs language-bash\">nova flavor-list\nnova secgroup-list\nnova keypair-list\n</code></pre>\n<p>And you are done! You'll be able to re-use your new image as a base for\nall new instances you spin up in openstack!</p>","category":"DevOps","date":"2014-08-03T00:00:00Z","tags":["Linux"],"title":"Preparing custom images for OpenStack"}]},"Pandas":{"count":1,"posts":[{"id":["2022","learning_spanish"],"path":"2022/learning_spanish","contentHtml":"<p>I've been living in Puerto Rico for 4 years but two of those have been COVID and so I haven't been able to practice Spanish as much as I'd like. So to speed up my learning I've decided I want to watch a lot of spanish speaking television to start training my ears, but to do this I need a baseline of words I understand to be able to even know what they are saying!</p>\n<p>Learning through apps like Duolingo, Drops, etc start with weird topics like vegetables that don't get you to a very good baseline for actually understanding daily conversations, so I think consuming TV is a better use of my time.</p>\n<h2>Subtitles</h2>\n<p>I've decided the way to understand what the best words to study are is to download every subtitle for every episode of a show I want to watch and then count each word.  The more a word is spoken the more important it is for me to know it since I'll be hearing it a lot in the show.</p>\n<p>I'm going to download subtitles from Netflix. Subtitles in Netflix are in WebVTT format, which looks like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">248</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">58.285</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.163</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">79.33</span>% \nYo de verdad espero que ustedes\nme vean como una amiga, Â¿mmm?\n\n<span class=\"hljs-number\">249</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.247</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">02.539</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nNo como una madrastra.\n\n<span class=\"hljs-number\">250</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">04.250</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">06.127</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nYo nunca te vi como una madrastra.\n</code></pre>\n<p>It gives you a start time, end time, and the text on the screen.   So my first process was parsing this format and just turning it into a list of words using https://github.com/glut23/webvtt-py.</p>\n<h3>Dummy parsing</h3>\n<p>What I basically did was <code>text.split(\" \")</code> and started counting the words.   This approach was quick and painless but it had a few downs falls.    Some words <em>look</em> the same when in reality they are not and so this meant I'd have to study every meaning of a word even if it was more rare.</p>\n<p>An example of this is the word \"como\", you can say:</p>\n<ul>\n<li>Haz como te digo: \"Do as I say\", where como means \"as\"</li>\n<li>como tacos todos los dias: \"I eat tacos every day\", where como is a conjugated form of the verb \"to eat\"</li>\n</ul>\n<p>I need to know which version of a word is being used so I can count it properly.</p>\n<h3>Regular Expressions are always the answer</h3>\n<p>I couldn't figure out what the word was without it being in a complete sentence, but subtitles are fragments.   They are split up into timings for displaying on the screen but they don't include entire sentences.  For example, it might look like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">21.960</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.520</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nSolo las que luchan por ellos\n\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.680</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">25.680</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nconsiguen sus sueÃ±os.\n</code></pre>\n<p>I want to detect the start of a sentence and the end of a sentence and then combine it, so that you end up with \"Solo las que luchan por ellos consiguen sus sueÃ±os.\".   My first thought was a regular expression on punctuation.   This worked well <em>most</em> of the time but there were enough exceptions to the rule that it broke often on generated a lot of broken sentences:</p>\n<ul>\n<li>Abbreviations like \"EE. UU\" for estados unidos (united states)</li>\n<li>Ellipsis</li>\n</ul>\n<p>Splitting on spaces also didn't work for identifying the parts of speech since I needed the context around the word.</p>\n<center>\n<img src=\"/images/posts/learning_spanish/regex-extraction.png\">\n</center>\n<h2>Natural Language Processing</h2>\n<p>So to solve my pain I decided to grab https://spacy.io/ and do some NLP on the subtitles so that I could identify the proper parts of speech and get an accurate representation of the words I needed to learn.</p>\n<p>The way spaCy works is you can send it a sentence and it'll return you a set of tokens:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> spacy\n<span class=\"hljs-meta\">>>> </span>nlp = spacy.load(<span class=\"hljs-string\">\"es_core_news_sm\"</span>)\n<span class=\"hljs-meta\">>>> </span>[x.pos_ <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> nlp(<span class=\"hljs-string\">\"Hola, como estas?\"</span>)]\n[<span class=\"hljs-string\">'PROPN'</span>, <span class=\"hljs-string\">'PUNCT'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'PUNCT'</span>]\n</code></pre>\n<p>So now I could identify the parts of speech and pull sentences together through end of sentence punctation.   The first thing I did was generate a CSV of sentences that looked like this:</p>\n<table>\n<tbody><tr>\n<th>sentence</th>\n<th>start</th>\n<th>end</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>Si no, le voy a cortar todos los deditos</td>\n<td>00:00:20.605</td>\n<td>00:00:24.125</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>Once I had a CSV of sentences I could send those back through spaCy for NLP and then start counting words, to generate another CSV:</p>\n<table>\n<tbody><tr>\n<th>word</th>\n<th>pos</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>a</td>\n<td>ADP</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>cortar</td>\n<td>VERB</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>todos</td>\n<td>PRON</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>From there I had all the data I needed!   So now it was time to start doing some data analysis!</p>\n<h2>Data analysis</h2>\n<p>Using a jupyter notebook ( https://jupyter.org/ ) I grabbed pandas ( https://pandas.pydata.org/ ) and read in my CSVs to start analyzing the results.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\npd.<span class=\"hljs-title function_\">set_option</span>(<span class=\"hljs-string\">'display.max_rows'</span>, <span class=\"hljs-number\">1000</span>)\nwords = pd.<span class=\"hljs-title function_\">read_csv</span>(<span class=\"hljs-string\">'word_data.csv.gz'</span>, compression=<span class=\"hljs-string\">'gzip'</span>, delimiter=<span class=\"hljs-string\">','</span>)\n</code></pre>\n<p>The words dataframe is built up out of the second table I showed above with just words and their parts of speech.   I started off grouping the dataset by the word so I could get a count for how many times it was spoken in every series I parsed:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_result</span> = (words.groupby(words.word).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_result.head(300)\n</code></pre>\n<p>Which returned a list of words and their count:</p>\n<pre><code class=\"hljs language-arduino\">\t<span class=\"hljs-type\">word</span>\tcount\n<span class=\"hljs-number\">0</span>\tque\t<span class=\"hljs-number\">94430</span>\n<span class=\"hljs-number\">1</span>\tno\t<span class=\"hljs-number\">75931</span>\n<span class=\"hljs-number\">2</span>\ta\t<span class=\"hljs-number\">70968</span>\n<span class=\"hljs-number\">3</span>\tde\t<span class=\"hljs-number\">67982</span>\n<span class=\"hljs-number\">4</span>\tser\t<span class=\"hljs-number\">64226</span>\n<span class=\"hljs-number\">5</span>\tla\t<span class=\"hljs-number\">52143</span>\n<span class=\"hljs-number\">6</span>\ty\t<span class=\"hljs-number\">44390</span>\n<span class=\"hljs-number\">7</span>\testar\t<span class=\"hljs-number\">37819</span>\n<span class=\"hljs-number\">8</span>\tel\t<span class=\"hljs-number\">35920</span>\n</code></pre>\n<p>Now I wanted to identify where my diminishing returns would be.   Is there a set of words that I must learn because they are spoken so often that I wouldn't understand a conversation if they weren't in my vocabulary?</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_returns.png\">\n</center>\n<p>As you can see in this chart, the usage for words drops off at around the ~200 mark.   So there are basically 150 words I <em>must</em> know and then the rest are equally important.   I wasn't quite happy with this because some parts of speech are higher priority than others, for example I think having a strong understanding of the popular verbs will go a long way.  So I also wanted to identify what are the most important verbs to learn:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_verbs</span> = (words[words.pos == <span class=\"hljs-string\">'VERB'</span>].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_verbs.head(50)\n</code></pre>\n<p>Which got me this:</p>\n<pre><code class=\"hljs language-yaml\">\t<span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">tener</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">22072</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">hacer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">14946</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">ir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">12570</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">decir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11314</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">querer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11083</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">ver</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">10269</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">estar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">9780</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">saber</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">8704</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">ser</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">7674</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">dar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5722</span>\n<span class=\"hljs-number\">10</span>\t<span class=\"hljs-string\">pasar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5528</span>\n<span class=\"hljs-number\">11</span>\t<span class=\"hljs-string\">hablar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5355</span>\n<span class=\"hljs-number\">12</span>\t<span class=\"hljs-string\">venir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5145</span>\n<span class=\"hljs-number\">13</span>\t<span class=\"hljs-string\">creer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">4895</span>\n<span class=\"hljs-number\">14</span>\t<span class=\"hljs-string\">salir</span> \t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">3395</span>\n</code></pre>\n<p>Verbs had a slightly different drop-off pattern when I targeted them directly:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_verbs.png\">\n</center>\n<p>I get a big bang for my buck by learning those top 40 verbs.   Nouns on the other hand are much more spread out and most are evenly distributed:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">gracias</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4676</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">favor</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4625</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">seÃ±or</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4116</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">verdad</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">3566</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">vida</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2673</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">hombre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2601</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">madre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2597</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">vez</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2537</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">tiempo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2492</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">hijo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2215</span>\n</code></pre>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_nouns.png\">\n</center>\n<p>So then I thought to myself... How much of a show would I understand if I just learned these most important words?  So I started by excluding some of the easy parts of speech and focused on the most important:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">find_important_words</span> = (words[~words.pos.isin([<span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'CONJ'</span>, <span class=\"hljs-string\">'ADP'</span>, <span class=\"hljs-string\">'ADV'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'AUX'</span>, <span class=\"hljs-string\">'INTJ'</span>])].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\nfind_important_words.head(50)\n</code></pre>\n<p>The top 20 were all verbs except for <code>bueno</code> and <code>gracias</code>.   So now with my list of what I considered \"important words\" I plotted it to find what amount of words I wanted to learn:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/important_words.png\">\n</center>\n<p>It looks like 200 learned words would give me a reasonable amount of understanding for a series, so I decided to calculate how much of a series I would understand if I learned just those first 200 words:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">percentages</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">total_words_handled</span> = <span class=\"hljs-number\">0</span>\n\n    for word in grouped_result<span class=\"hljs-section\">['word']</span><span class=\"hljs-section\">[:200]</span>:\n        <span class=\"hljs-attr\">values</span> = words_in_show[words_in_show.word == word][<span class=\"hljs-string\">'count'</span>].values\n\n        if values.size > 0:\n            total_words_handled += values<span class=\"hljs-section\">[0]</span>\n\n    percentages<span class=\"hljs-section\">[show_name]</span> = total_words_handled / words_in_show.sum().loc<span class=\"hljs-section\">['count']</span>\n</code></pre>\n<p>Now I had a table that would show me what percentage of the spoken words were covered by the first 200 words in my list:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">p_df</span> = pd.DataFrame(percentages.items(), columns=[<span class=\"hljs-string\">'show'</span>, <span class=\"hljs-string\">'percentage'</span>])\n<span class=\"hljs-attr\">p_df</span> = p_df.sort_values(by=<span class=\"hljs-string\">'percentage'</span>)\np_df<span class=\"hljs-section\">['percentage']</span> = p_df<span class=\"hljs-section\">['percentage']</span> * 100\n<span class=\"hljs-attr\">pd.options.display.float_format</span> = <span class=\"hljs-string\">'{:,.2f}%'</span>.format\np_df\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>Show</th>\n<th>Percentage</th>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>64.24%</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>65.28%</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>66.68%</td>\n</tr><tr>\n<td>Neruda</td>\n<td>66.89%</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>67.56%</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>68.03%</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>68.19%</td>\n</tr><tr>\n<td>El marginal</td>\n<td>68.47%</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>68.59%</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>70.20%</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>70.95</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>71.52%</td>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>73.15%</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>73.58%</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>73.78%</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>74.03%</td>\n</tr><tr>\n<td>El bar</td>\n<td>74.07%</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>75.40%</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>75.59%</td>\n</tr></tbody></table>\n<p>But living in Puerto Rico, one thing I've realized is speed of speech is also important.  I have a much easier time speaking with people from Colombia and Mexico than I do with Puerto Ricans because they speak so much faster.   So even though I could understand 75% of \"Tarde para la ira\" if I learned the 200 words, I want to make sure they are speaking at a pace I could understand as well.</p>\n<p>So I loaded up the other CSV file that was the full sentences and added a \"time per word\" column:</p>\n<pre><code class=\"hljs language-css\">sentences = pd<span class=\"hljs-selector-class\">.read_csv</span>('sentences<span class=\"hljs-selector-class\">.csv</span><span class=\"hljs-selector-class\">.gz</span>', compression='gzip', delimiter=',', parse_dates=<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>, <span class=\"hljs-string\">'end'</span>]</span>)\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> = (sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'end'</span>]</span> - sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>]</span>)<span class=\"hljs-selector-class\">.dt</span><span class=\"hljs-selector-class\">.total_seconds</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'sentence'</span>]</span><span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.split</span>()<span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.len</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'time_per_word'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> / sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span>\n</code></pre>\n<p>Then I was able to have a speed rating for each show:</p>\n<pre><code class=\"hljs language-scss\">sentence_group = sentences<span class=\"hljs-selector-class\">.groupby</span>([sentences.media])\nsentence_group<span class=\"hljs-selector-class\">.time_per_word</span><span class=\"hljs-selector-class\">.mean</span>()<span class=\"hljs-selector-class\">.reset_index</span>()<span class=\"hljs-selector-class\">.sort_values</span>('time_per_word')\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>media</th>\n<th>time_per_word</th>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>0.58</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>0.59</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>0.61</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>0.63</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>0.64</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>0.64</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>0.65</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>0.67</td>\n</tr><tr>\n<td>Neruda</td>\n<td>0.68</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>0.69</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>0.70</td>\n</tr><tr>\n<td>El bar</td>\n<td>0.70</td>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>0.72</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>0.75</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>0.76</td>\n</tr><tr>\n<td>El marginal</td>\n<td>0.76</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>0.77</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>0.77</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>0.81</td>\n</tr></tbody></table>\n<p>Luckily the two series that have the least amount of vocabulary also speak the slowest!   So these will be the series I start with.    The final question I wanted to answer is \"What are the top words I'm missing for a series\".    Since I'll know 75% of the series from the top 200 words, I'm hoping there are some top words from a specific series that I can also learn to get an even higher understanding.</p>\n<p>First, find which words are in each show but not in the top 200:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">missing_words_by_show</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">frequency_words</span> = grouped_result[<span class=\"hljs-string\">'word'</span>][:<span class=\"hljs-number\">200</span>]\n\n    <span class=\"hljs-attr\">missing_words</span> = words_in_show[~words_in_show.word.isin(frequency_words.values)]\n    missing_words_by_show<span class=\"hljs-section\">[show_name]</span> = missing_words\n</code></pre>\n<p>Then we were able to grab them per show:</p>\n<pre><code class=\"hljs language-css\">missing_words_by_show<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'La casa de las flores'</span>]</span><span class=\"hljs-selector-class\">.head</span>(<span class=\"hljs-number\">50</span>)\n\nword\tcount\n<span class=\"hljs-number\">31</span>\tmamÃ¡\t<span class=\"hljs-number\">252</span>\n<span class=\"hljs-number\">70</span>\tflorerÃ­<span class=\"hljs-selector-tag\">a</span>\t<span class=\"hljs-number\">87</span>\n<span class=\"hljs-number\">98</span>\tperdÃ³n\t<span class=\"hljs-number\">56</span>\n<span class=\"hljs-number\">102</span>\tsea\t<span class=\"hljs-number\">54</span>\n<span class=\"hljs-number\">116</span>\tademÃ¡s\t<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">126</span>\tahorita\t<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">132</span>\tcÃ¡rcel\t<span class=\"hljs-number\">38</span>\n<span class=\"hljs-number\">133</span>\tfiesta\t<span class=\"hljs-number\">38</span>\n</code></pre>\n<p>So adding those few words to my vocabulary will also give me a better understanding of the series.</p>\n<h2>Conclusion</h2>\n<p>I believe a data-driven approach to language learning will be an effective way to get me speaking better spanish.   It was a ton of fun to play with spaCy, pandas, and jupyter as well!</p>\n<p>I'll improve the data analysis over time as well but I do believe this is a pretty good starting point!</p>\n<center>\n<img src=\"/images/posts/learning_spanish/meme.png\">\n</center>","category":"Development","date":"2022-04-30T00:00:00Z","tags":["Python","Pandas","NLP"],"title":"How to speak spanish like a colombian drug lord!"}]},"NLP":{"count":1,"posts":[{"id":["2022","learning_spanish"],"path":"2022/learning_spanish","contentHtml":"<p>I've been living in Puerto Rico for 4 years but two of those have been COVID and so I haven't been able to practice Spanish as much as I'd like. So to speed up my learning I've decided I want to watch a lot of spanish speaking television to start training my ears, but to do this I need a baseline of words I understand to be able to even know what they are saying!</p>\n<p>Learning through apps like Duolingo, Drops, etc start with weird topics like vegetables that don't get you to a very good baseline for actually understanding daily conversations, so I think consuming TV is a better use of my time.</p>\n<h2>Subtitles</h2>\n<p>I've decided the way to understand what the best words to study are is to download every subtitle for every episode of a show I want to watch and then count each word.  The more a word is spoken the more important it is for me to know it since I'll be hearing it a lot in the show.</p>\n<p>I'm going to download subtitles from Netflix. Subtitles in Netflix are in WebVTT format, which looks like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">248</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">58.285</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.163</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">79.33</span>% \nYo de verdad espero que ustedes\nme vean como una amiga, Â¿mmm?\n\n<span class=\"hljs-number\">249</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01.247</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">02.539</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nNo como una madrastra.\n\n<span class=\"hljs-number\">250</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">04.250</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">06.127</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nYo nunca te vi como una madrastra.\n</code></pre>\n<p>It gives you a start time, end time, and the text on the screen.   So my first process was parsing this format and just turning it into a list of words using https://github.com/glut23/webvtt-py.</p>\n<h3>Dummy parsing</h3>\n<p>What I basically did was <code>text.split(\" \")</code> and started counting the words.   This approach was quick and painless but it had a few downs falls.    Some words <em>look</em> the same when in reality they are not and so this meant I'd have to study every meaning of a word even if it was more rare.</p>\n<p>An example of this is the word \"como\", you can say:</p>\n<ul>\n<li>Haz como te digo: \"Do as I say\", where como means \"as\"</li>\n<li>como tacos todos los dias: \"I eat tacos every day\", where como is a conjugated form of the verb \"to eat\"</li>\n</ul>\n<p>I need to know which version of a word is being used so I can count it properly.</p>\n<h3>Regular Expressions are always the answer</h3>\n<p>I couldn't figure out what the word was without it being in a complete sentence, but subtitles are fragments.   They are split up into timings for displaying on the screen but they don't include entire sentences.  For example, it might look like this:</p>\n<pre><code class=\"hljs language-arduino\"><span class=\"hljs-number\">23</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">21.960</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.520</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nSolo las que luchan por ellos\n\n<span class=\"hljs-number\">24</span>\n<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">23.680</span> --> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">25.680</span>  position:<span class=\"hljs-number\">50.00</span>%,middle  align:middle size:<span class=\"hljs-number\">80.00</span>%  line:<span class=\"hljs-number\">84.67</span>% \nconsiguen sus sueÃ±os.\n</code></pre>\n<p>I want to detect the start of a sentence and the end of a sentence and then combine it, so that you end up with \"Solo las que luchan por ellos consiguen sus sueÃ±os.\".   My first thought was a regular expression on punctuation.   This worked well <em>most</em> of the time but there were enough exceptions to the rule that it broke often on generated a lot of broken sentences:</p>\n<ul>\n<li>Abbreviations like \"EE. UU\" for estados unidos (united states)</li>\n<li>Ellipsis</li>\n</ul>\n<p>Splitting on spaces also didn't work for identifying the parts of speech since I needed the context around the word.</p>\n<center>\n<img src=\"/images/posts/learning_spanish/regex-extraction.png\">\n</center>\n<h2>Natural Language Processing</h2>\n<p>So to solve my pain I decided to grab https://spacy.io/ and do some NLP on the subtitles so that I could identify the proper parts of speech and get an accurate representation of the words I needed to learn.</p>\n<p>The way spaCy works is you can send it a sentence and it'll return you a set of tokens:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> spacy\n<span class=\"hljs-meta\">>>> </span>nlp = spacy.load(<span class=\"hljs-string\">\"es_core_news_sm\"</span>)\n<span class=\"hljs-meta\">>>> </span>[x.pos_ <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> nlp(<span class=\"hljs-string\">\"Hola, como estas?\"</span>)]\n[<span class=\"hljs-string\">'PROPN'</span>, <span class=\"hljs-string\">'PUNCT'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'PUNCT'</span>]\n</code></pre>\n<p>So now I could identify the parts of speech and pull sentences together through end of sentence punctation.   The first thing I did was generate a CSV of sentences that looked like this:</p>\n<table>\n<tbody><tr>\n<th>sentence</th>\n<th>start</th>\n<th>end</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>Si no, le voy a cortar todos los deditos</td>\n<td>00:00:20.605</td>\n<td>00:00:24.125</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>Once I had a CSV of sentences I could send those back through spaCy for NLP and then start counting words, to generate another CSV:</p>\n<table>\n<tbody><tr>\n<th>word</th>\n<th>pos</th>\n<th>show</th>\n<th>file</th>\n</tr>\n<tr>\n<td>a</td>\n<td>ADP</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>cortar</td>\n<td>VERB</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n<tr>\n<td>todos</td>\n<td>PRON</td>\n<td>El marginal</td>\n<td>El marginal S02E02 WEBRip Netflix es[cc].vtt</td>\n</tr>\n</tbody></table>\n<p>From there I had all the data I needed!   So now it was time to start doing some data analysis!</p>\n<h2>Data analysis</h2>\n<p>Using a jupyter notebook ( https://jupyter.org/ ) I grabbed pandas ( https://pandas.pydata.org/ ) and read in my CSVs to start analyzing the results.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\npd.<span class=\"hljs-title function_\">set_option</span>(<span class=\"hljs-string\">'display.max_rows'</span>, <span class=\"hljs-number\">1000</span>)\nwords = pd.<span class=\"hljs-title function_\">read_csv</span>(<span class=\"hljs-string\">'word_data.csv.gz'</span>, compression=<span class=\"hljs-string\">'gzip'</span>, delimiter=<span class=\"hljs-string\">','</span>)\n</code></pre>\n<p>The words dataframe is built up out of the second table I showed above with just words and their parts of speech.   I started off grouping the dataset by the word so I could get a count for how many times it was spoken in every series I parsed:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_result</span> = (words.groupby(words.word).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_result.head(300)\n</code></pre>\n<p>Which returned a list of words and their count:</p>\n<pre><code class=\"hljs language-arduino\">\t<span class=\"hljs-type\">word</span>\tcount\n<span class=\"hljs-number\">0</span>\tque\t<span class=\"hljs-number\">94430</span>\n<span class=\"hljs-number\">1</span>\tno\t<span class=\"hljs-number\">75931</span>\n<span class=\"hljs-number\">2</span>\ta\t<span class=\"hljs-number\">70968</span>\n<span class=\"hljs-number\">3</span>\tde\t<span class=\"hljs-number\">67982</span>\n<span class=\"hljs-number\">4</span>\tser\t<span class=\"hljs-number\">64226</span>\n<span class=\"hljs-number\">5</span>\tla\t<span class=\"hljs-number\">52143</span>\n<span class=\"hljs-number\">6</span>\ty\t<span class=\"hljs-number\">44390</span>\n<span class=\"hljs-number\">7</span>\testar\t<span class=\"hljs-number\">37819</span>\n<span class=\"hljs-number\">8</span>\tel\t<span class=\"hljs-number\">35920</span>\n</code></pre>\n<p>Now I wanted to identify where my diminishing returns would be.   Is there a set of words that I must learn because they are spoken so often that I wouldn't understand a conversation if they weren't in my vocabulary?</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_returns.png\">\n</center>\n<p>As you can see in this chart, the usage for words drops off at around the ~200 mark.   So there are basically 150 words I <em>must</em> know and then the rest are equally important.   I wasn't quite happy with this because some parts of speech are higher priority than others, for example I think having a strong understanding of the popular verbs will go a long way.  So I also wanted to identify what are the most important verbs to learn:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">grouped_verbs</span> = (words[words.pos == <span class=\"hljs-string\">'VERB'</span>].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\ngrouped_verbs.head(50)\n</code></pre>\n<p>Which got me this:</p>\n<pre><code class=\"hljs language-yaml\">\t<span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">tener</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">22072</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">hacer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">14946</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">ir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">12570</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">decir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11314</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">querer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">11083</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">ver</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">10269</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">estar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">9780</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">saber</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">8704</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">ser</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">7674</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">dar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5722</span>\n<span class=\"hljs-number\">10</span>\t<span class=\"hljs-string\">pasar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5528</span>\n<span class=\"hljs-number\">11</span>\t<span class=\"hljs-string\">hablar</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5355</span>\n<span class=\"hljs-number\">12</span>\t<span class=\"hljs-string\">venir</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">5145</span>\n<span class=\"hljs-number\">13</span>\t<span class=\"hljs-string\">creer</span>\t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">4895</span>\n<span class=\"hljs-number\">14</span>\t<span class=\"hljs-string\">salir</span> \t<span class=\"hljs-string\">VERB</span>\t<span class=\"hljs-number\">3395</span>\n</code></pre>\n<p>Verbs had a slightly different drop-off pattern when I targeted them directly:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_verbs.png\">\n</center>\n<p>I get a big bang for my buck by learning those top 40 verbs.   Nouns on the other hand are much more spread out and most are evenly distributed:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">word</span>\t<span class=\"hljs-string\">pos</span>\t<span class=\"hljs-string\">count</span>\n<span class=\"hljs-number\">0</span>\t<span class=\"hljs-string\">gracias</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4676</span>\n<span class=\"hljs-number\">1</span>\t<span class=\"hljs-string\">favor</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4625</span>\n<span class=\"hljs-number\">2</span>\t<span class=\"hljs-string\">seÃ±or</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">4116</span>\n<span class=\"hljs-number\">3</span>\t<span class=\"hljs-string\">verdad</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">3566</span>\n<span class=\"hljs-number\">4</span>\t<span class=\"hljs-string\">vida</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2673</span>\n<span class=\"hljs-number\">5</span>\t<span class=\"hljs-string\">hombre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2601</span>\n<span class=\"hljs-number\">6</span>\t<span class=\"hljs-string\">madre</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2597</span>\n<span class=\"hljs-number\">7</span>\t<span class=\"hljs-string\">vez</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2537</span>\n<span class=\"hljs-number\">8</span>\t<span class=\"hljs-string\">tiempo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2492</span>\n<span class=\"hljs-number\">9</span>\t<span class=\"hljs-string\">hijo</span>\t<span class=\"hljs-string\">NOUN</span>\t<span class=\"hljs-number\">2215</span>\n</code></pre>\n<center>\n<img src=\"/images/posts/learning_spanish/diminishing_nouns.png\">\n</center>\n<p>So then I thought to myself... How much of a show would I understand if I just learned these most important words?  So I started by excluding some of the easy parts of speech and focused on the most important:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">find_important_words</span> = (words[~words.pos.isin([<span class=\"hljs-string\">'PRON'</span>, <span class=\"hljs-string\">'CONJ'</span>, <span class=\"hljs-string\">'ADP'</span>, <span class=\"hljs-string\">'ADV'</span>, <span class=\"hljs-string\">'SCONJ'</span>, <span class=\"hljs-string\">'AUX'</span>, <span class=\"hljs-string\">'INTJ'</span>])].groupby([<span class=\"hljs-string\">'word'</span>, <span class=\"hljs-string\">'pos'</span>]).size() \n   .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n   .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n   .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n\nfind_important_words.head(50)\n</code></pre>\n<p>The top 20 were all verbs except for <code>bueno</code> and <code>gracias</code>.   So now with my list of what I considered \"important words\" I plotted it to find what amount of words I wanted to learn:</p>\n<center>\n<img src=\"/images/posts/learning_spanish/important_words.png\">\n</center>\n<p>It looks like 200 learned words would give me a reasonable amount of understanding for a series, so I decided to calculate how much of a series I would understand if I learned just those first 200 words:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">percentages</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">total_words_handled</span> = <span class=\"hljs-number\">0</span>\n\n    for word in grouped_result<span class=\"hljs-section\">['word']</span><span class=\"hljs-section\">[:200]</span>:\n        <span class=\"hljs-attr\">values</span> = words_in_show[words_in_show.word == word][<span class=\"hljs-string\">'count'</span>].values\n\n        if values.size > 0:\n            total_words_handled += values<span class=\"hljs-section\">[0]</span>\n\n    percentages<span class=\"hljs-section\">[show_name]</span> = total_words_handled / words_in_show.sum().loc<span class=\"hljs-section\">['count']</span>\n</code></pre>\n<p>Now I had a table that would show me what percentage of the spoken words were covered by the first 200 words in my list:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">p_df</span> = pd.DataFrame(percentages.items(), columns=[<span class=\"hljs-string\">'show'</span>, <span class=\"hljs-string\">'percentage'</span>])\n<span class=\"hljs-attr\">p_df</span> = p_df.sort_values(by=<span class=\"hljs-string\">'percentage'</span>)\np_df<span class=\"hljs-section\">['percentage']</span> = p_df<span class=\"hljs-section\">['percentage']</span> * 100\n<span class=\"hljs-attr\">pd.options.display.float_format</span> = <span class=\"hljs-string\">'{:,.2f}%'</span>.format\np_df\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>Show</th>\n<th>Percentage</th>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>64.24%</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>65.28%</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>66.68%</td>\n</tr><tr>\n<td>Neruda</td>\n<td>66.89%</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>67.56%</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>68.03%</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>68.19%</td>\n</tr><tr>\n<td>El marginal</td>\n<td>68.47%</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>68.59%</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>70.20%</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>70.95</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>71.52%</td>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>73.15%</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>73.58%</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>73.78%</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>74.03%</td>\n</tr><tr>\n<td>El bar</td>\n<td>74.07%</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>75.40%</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>75.59%</td>\n</tr></tbody></table>\n<p>But living in Puerto Rico, one thing I've realized is speed of speech is also important.  I have a much easier time speaking with people from Colombia and Mexico than I do with Puerto Ricans because they speak so much faster.   So even though I could understand 75% of \"Tarde para la ira\" if I learned the 200 words, I want to make sure they are speaking at a pace I could understand as well.</p>\n<p>So I loaded up the other CSV file that was the full sentences and added a \"time per word\" column:</p>\n<pre><code class=\"hljs language-css\">sentences = pd<span class=\"hljs-selector-class\">.read_csv</span>('sentences<span class=\"hljs-selector-class\">.csv</span><span class=\"hljs-selector-class\">.gz</span>', compression='gzip', delimiter=',', parse_dates=<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>, <span class=\"hljs-string\">'end'</span>]</span>)\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> = (sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'end'</span>]</span> - sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'start'</span>]</span>)<span class=\"hljs-selector-class\">.dt</span><span class=\"hljs-selector-class\">.total_seconds</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'sentence'</span>]</span><span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.split</span>()<span class=\"hljs-selector-class\">.str</span><span class=\"hljs-selector-class\">.len</span>()\nsentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'time_per_word'</span>]</span> = sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'total_time'</span>]</span> / sentences<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'word_count'</span>]</span>\n</code></pre>\n<p>Then I was able to have a speed rating for each show:</p>\n<pre><code class=\"hljs language-scss\">sentence_group = sentences<span class=\"hljs-selector-class\">.groupby</span>([sentences.media])\nsentence_group<span class=\"hljs-selector-class\">.time_per_word</span><span class=\"hljs-selector-class\">.mean</span>()<span class=\"hljs-selector-class\">.reset_index</span>()<span class=\"hljs-selector-class\">.sort_values</span>('time_per_word')\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\n<tbody><tr>\n<th>media</th>\n<th>time_per_word</th>\n</tr><tr>\n<td>Gran Hotel</td>\n<td>0.58</td>\n</tr><tr>\n<td>El Chapo</td>\n<td>0.59</td>\n</tr><tr>\n<td>Las chicas del cable</td>\n<td>0.61</td>\n</tr><tr>\n<td>EÌlite</td>\n<td>0.63</td>\n</tr><tr>\n<td>Ingobernable</td>\n<td>0.64</td>\n</tr><tr>\n<td>El Ministerio del Tiempo</td>\n<td>0.64</td>\n</tr><tr>\n<td>FarinÌa</td>\n<td>0.65</td>\n</tr><tr>\n<td>El ciudadano ilustre</td>\n<td>0.67</td>\n</tr><tr>\n<td>Neruda</td>\n<td>0.68</td>\n</tr><tr>\n<td>La Piloto</td>\n<td>0.69</td>\n</tr><tr>\n<td>La casa de papel</td>\n<td>0.70</td>\n</tr><tr>\n<td>El bar</td>\n<td>0.70</td>\n</tr><tr>\n<td>VeroÌnica</td>\n<td>0.72</td>\n</tr><tr>\n<td>La Reina del Sur</td>\n<td>0.75</td>\n</tr><tr>\n<td>Club de Cuervos</td>\n<td>0.76</td>\n</tr><tr>\n<td>El marginal</td>\n<td>0.76</td>\n</tr><tr>\n<td>Pablo Escobar</td>\n<td>0.77</td>\n</tr><tr>\n<td>Tarde para la ira</td>\n<td>0.77</td>\n</tr><tr>\n<td>La casa de las flores</td>\n<td>0.81</td>\n</tr></tbody></table>\n<p>Luckily the two series that have the least amount of vocabulary also speak the slowest!   So these will be the series I start with.    The final question I wanted to answer is \"What are the top words I'm missing for a series\".    Since I'll know 75% of the series from the top 200 words, I'm hoping there are some top words from a specific series that I can also learn to get an even higher understanding.</p>\n<p>First, find which words are in each show but not in the top 200:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">missing_words_by_show</span> = {}\n\nfor show_name in words<span class=\"hljs-section\">['media']</span>.drop_duplicates().values:\n    <span class=\"hljs-attr\">words_in_show</span> = (words[words.media == show_name].groupby(words.word).size() \n       .sort_values(<span class=\"hljs-attr\">ascending</span>=<span class=\"hljs-literal\">False</span>) \n       .reset_index(<span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">'count'</span>)\n       .drop_duplicates(<span class=\"hljs-attr\">subset</span>=<span class=\"hljs-string\">'word'</span>))\n    \n    <span class=\"hljs-attr\">frequency_words</span> = grouped_result[<span class=\"hljs-string\">'word'</span>][:<span class=\"hljs-number\">200</span>]\n\n    <span class=\"hljs-attr\">missing_words</span> = words_in_show[~words_in_show.word.isin(frequency_words.values)]\n    missing_words_by_show<span class=\"hljs-section\">[show_name]</span> = missing_words\n</code></pre>\n<p>Then we were able to grab them per show:</p>\n<pre><code class=\"hljs language-css\">missing_words_by_show<span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'La casa de las flores'</span>]</span><span class=\"hljs-selector-class\">.head</span>(<span class=\"hljs-number\">50</span>)\n\nword\tcount\n<span class=\"hljs-number\">31</span>\tmamÃ¡\t<span class=\"hljs-number\">252</span>\n<span class=\"hljs-number\">70</span>\tflorerÃ­<span class=\"hljs-selector-tag\">a</span>\t<span class=\"hljs-number\">87</span>\n<span class=\"hljs-number\">98</span>\tperdÃ³n\t<span class=\"hljs-number\">56</span>\n<span class=\"hljs-number\">102</span>\tsea\t<span class=\"hljs-number\">54</span>\n<span class=\"hljs-number\">116</span>\tademÃ¡s\t<span class=\"hljs-number\">44</span>\n<span class=\"hljs-number\">126</span>\tahorita\t<span class=\"hljs-number\">40</span>\n<span class=\"hljs-number\">132</span>\tcÃ¡rcel\t<span class=\"hljs-number\">38</span>\n<span class=\"hljs-number\">133</span>\tfiesta\t<span class=\"hljs-number\">38</span>\n</code></pre>\n<p>So adding those few words to my vocabulary will also give me a better understanding of the series.</p>\n<h2>Conclusion</h2>\n<p>I believe a data-driven approach to language learning will be an effective way to get me speaking better spanish.   It was a ton of fun to play with spaCy, pandas, and jupyter as well!</p>\n<p>I'll improve the data analysis over time as well but I do believe this is a pretty good starting point!</p>\n<center>\n<img src=\"/images/posts/learning_spanish/meme.png\">\n</center>","category":"Development","date":"2022-04-30T00:00:00Z","tags":["Python","Pandas","NLP"],"title":"How to speak spanish like a colombian drug lord!"}]},"Kubernetes":{"count":1,"posts":[{"id":["2022","local_kubeadm_cluster"],"path":"2022/local_kubeadm_cluster","contentHtml":"<p>Iâm going to show you how to get a real kubernetes cluster setup locally on top of virtual\nmachines!  Iâll be using multipass but feel free to use virtualbox, proxmox, or whatever your\nfavorite cloud provider is.</p>\n<p>kubeadm a production ready kubernetes install tool and I prefer to use it over minikube, kind,\netc. because it gives you a more real world experience for <em>managing</em> the kubernetes cluster.\nThis isnât important if you are a user of the cluster but if you have to run your own this is\na great way to gain some daily experience.</p>\n<p>The kubernetes documentation on kubeadm is great and you can find it <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">here</a>.</p>\n<p>The differences between this blog and the kubernetes docs is that they leave a lot of decisions\nup to the reader such as:</p>\n<ul>\n<li>choosing a container runtime</li>\n<li>Selecting and installing a CNI (container network interface)</li>\n</ul>\n<p>Iâm going to be opinionated and make specific technology decisions such as using containerd and\ncilium so that you don't have to think about those decisions.</p>\n<h2>Getting your Virtual Machines setup!</h2>\n<p>The minimum requirements for a control plane node in kubernetes is 2gb of RAM and 2 CPUs.  Since\nwe actually want to be able to schedule workloads on the workers afterwards we are going to setup\na cluster that looks like this:</p>\n<ul>\n<li>Control Plane: 2gb RAM, 2 CPU</li>\n<li>Worker: 4gb RAM, 2 CPU</li>\n</ul>\n<p>Since weâll be using multipass to launch the nodes, we can do that now:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass launch -c 2 -m 4G -d 10G -n controlplane 22.04\nâ¯ multipass launch -c 2 -m 4G -d 10G -n worker 22.04\nâ¯ multipass list\nName                    State             IPv4             Image\ncontrolplane            Running           192.168.64.7     Ubuntu 22.04 LTS\nworker                  Running           192.168.64.8     Ubuntu 22.04 LTS\n</code></pre>\n<p>Now we can start working on our controlplane first, lets shell in:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell controlplane\n</code></pre>\n<p>Lets first add the kubernetes repo to the system so we have access to all the kubernetes tools:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n</code></pre>\n<p>Now that our system is setup, we can move on to getting a container runtime.</p>\n<h2>Getting your Container Runtime!</h2>\n<p>Before we start pulling in kubernetes components we need to get a container runtime setup on the\nmachine.   We we are going to use containerd for this purpose.  You can view the docs of for it\n<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">here</a>.</p>\n<p>Which will download the latest binary and set it up.   Iâm going to walk you through how to do it\nusing the version packaged with Ubuntu which could be older than the latest release.</p>\n<p>First thing we want to do is configure the networking to allow iptables to manage:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n</code></pre>\n<p>We also need to disable some default systemd settings for <code>rp_filter</code>  because\nthey are not compatible with cilium. See the bug report\n<a href=\"https://github.com/cilium/cilium/commit/cabc6581b8128681f4ed23f8d6dc463180eea61e\">here</a></p>\n<pre><code class=\"hljs language-bash\">â¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n</code></pre>\n<p>Then we need to refresh sysctl so those settings are applied:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n</code></pre>\n<p>You should see it applying all the changes:</p>\n<pre><code class=\"hljs language-ini\">* Applying /etc/sysctl.d/k8s.conf ...\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.ipv4.ip_forward</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>If you do not, the netfilter module may not have loaded properly:</p>\n<pre><code class=\"hljs language-bash\">â¯ lsmod |grep br_netfilter\nbr_netfilter           28672  0\nbridge                176128  1 br_netfilter\n</code></pre>\n<p>You want to make sure <code>rp_filter</code> is <code>0</code> everywhere as well for cilium:</p>\n<pre><code class=\"hljs language-ini\">â¯ sudo sysctl -a | grep '\\.rp_filter'\n<span class=\"hljs-attr\">net.ipv4.conf.all.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_host.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_net.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_vxlan.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.enp0s1.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lo.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxc0965b7b545f7.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxcb05ffd84ab74.rp_filter</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>Now lets pull down the container runtime weâll be using which is containerd.</p>\n<p>Ubuntu ships with a very old version of containerd so you need to upgrade to\nthe version shipped from the docker repos:\nYou can find which versions are available by running:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\nâ¯ sudo apt-get update\n</code></pre>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison containerd.io\ncontainerd.io |    1.6.8-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.7-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.6-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.4-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.11-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.10-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\n</code></pre>\n<p>We are going to use the latest version available which was 1.6.8-1</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install containerd.io=1.6.8-1 -y\n</code></pre>\n<p>Then we'll setup a configuration that enables containerd to use the systemd\ncgroup.  We are hard coding this config instead of using <code>containerd config default</code>\nbecause that currently has had a <a href=\"https://github.com/containerd/containerd/issues/4574\">bug</a>\nfor many years that generates an invalid config.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\n</code></pre>\n<p>You can verify its running with ctr:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo ctr --address /var/run/containerd/containerd.sock containers list\nCONTAINER    IMAGE    RUNTIME\n</code></pre>\n<p>Now that this is working we can move on to getting kubernetes installed!</p>\n<h2>Using kubeadm!</h2>\n<p>Now we need to get the kubernetes tools installed onto the system.  Iâm going to be using 1.23\nbut to find the latest version you can run:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison kubeadm|<span class=\"hljs-built_in\">head</span> -n2\n   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n</code></pre>\n<p>Then install the version you want, we install kubelet and kubeadm here to make\nsure the versions align:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n</code></pre>\n<p>This will pull in a few tools, including an alternative to <code>ctr</code> that we used earlier called\n<code>crictl</code>.  You can check that it is available to you doing this:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps\n</code></pre>\n<p>We can finally init our cluster:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm init\n</code></pre>\n<p>Once that finishes running it should give you some tips setup your configuration, it should look like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\nâ¯ sudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\nâ¯ sudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n<p>You can run those on the master node for now, but later I'll show you how to move\nthe config to your host computer.</p>\n<p>Now you should be able to check that your node is not ready yet:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS     ROLES                  AGE     VERSION\ncontrolplane   NotReady   control-plane,master   4m16s   v1.23.5\n</code></pre>\n<p><em>Note</em>: If you recieve \"The connecto to the server was refused\" error,\nThe cluster starting up and getting all the dependencies running could take\na bit of time.  So if you aren't able to communicate right away you can check\nwhich pods are up and running with <code>crictl</code>.  You'll need <code>kube-apiserver</code> up\nand running.  If it isn't you can check:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps -a\nCONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD\n8322192c4605c       bd8cc6d582470       36 seconds ago      Running             kube-proxy                4                   344c4f7fffbe8       kube-proxy-drm46\n30ce27c40adb2       81a4a8a4ac639       2 minutes ago       Exited              kube-controller-manager   4                   3a819c3a864b2       kube-controller-manager-controlplane\n7709fd5e92898       bd8cc6d582470       2 minutes ago       Exited              kube-proxy                3                   7cc6922c82015       kube-proxy-drm46\n10432b81d7c61       3767741e7fba7       2 minutes ago       Exited              kube-apiserver            4                   e64ddf3679d98       kube-apiserver-controlplane\n</code></pre>\n<p>which will show you pods that have exited. You can grab the container ID for\nkube-apiserver and read its logs:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock logs 10432b81d7c61\n</code></pre>\n<p>There are a few ways to figure out why the node isnât ready yet.  Usually I would check the\n<code>kubelet</code> logs first:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo journalctl -flu kubelet\n-- Logs begin at Sun 2022-04-17 19:22:19 AST. --\nApr 17 20:53:15 controlplane kubelet[19727]: E0417 20:53:15.951350   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\nApr 17 20:53:20 controlplane kubelet[19727]: E0417 20:53:20.952148   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\n</code></pre>\n<p>It is clear the problem is that we are missing the CNI.  The other way you can find out what is\ngoing on is describing the node:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane\n</code></pre>\n<p>This will have a lot of information but if you scroll through there looking at <code>Reason</code> you\nmight see something useful.  In this case under <code>Lease</code> you would see:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane|grep NotReady\nReady            False   Sun, 17 Apr 2022 20:53:37 -0400   Sun, 17 Apr 2022 20:43:07 -0400   KubeletNotReady              container runtime network not ready: NetworkReady=<span class=\"hljs-literal\">false</span> reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialize\n</code></pre>\n<p>Lets get our CNI installed, weâll be using cilium!</p>\n<h2>Setting up your CNI!</h2>\n<p>Cilium has great documentation over <a href=\"https://docs.cilium.io/en/v1.9/gettingstarted/k8s-install-kubeadm/\">here</a>,\nbut Iâll walk you through it anyways.  I do recommend checking out their documentation so you\nare familiar with it.   We will use <code>helm</code> to pull down the version of cilium we want:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL  https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/helm.gpg\n\nâ¯ sudo apt-get install apt-transport-https --<span class=\"hljs-built_in\">yes</span>\n\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://baltocdn.com/helm/stable/debian/ all main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list\n\nâ¯ sudo apt-get update\nâ¯ sudo apt-get install helm\n</code></pre>\n<p>Now we can install cilium!  It is <em>very</em> important that you pay attention to the\ncompatibility of cilium with the version of kubernetes you are intstalling. Check\nthe compatibility list <a href=\"https://docs.cilium.io/en/v1.12/concepts/kubernetes/compatibility/\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">â¯ helm repo add cilium https://helm.cilium.io/\nâ¯ helm repo update\n</code></pre>\n<p>Once the repo is added you can list the versions available:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm search repo -l|<span class=\"hljs-built_in\">head</span> -n8\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\ncilium/cilium  \t1.12.1       \t1.12.1     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.12.0       \t1.12.0     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.8       \t1.11.8     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.7       \t1.11.7     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.6       \t1.11.6     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.5       \t1.11.5     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.4       \t1.11.4     \teBPF-based Networking, Security, and Observability\n</code></pre>\n<p>So we want <code>1.11.4</code>:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm install cilium cilium/cilium --namespace kube-system --version 1.11.4\n</code></pre>\n<p>Now our node should be ready!</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get node\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   24m   v1.23.5\n</code></pre>\n<p>Time to join our worker to the cluster!</p>\n<h2>Joining a worker to the cluster!</h2>\n<p>We have to go through the same steps as the controlplane to get the point that we have a\ncontainer runtime and <code>kubeadm</code>.   Iâm not going to talk about the commands a second time but\nIâll re-iterate them here for ease of following along.</p>\n<p>First open up another shell and connect to the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell worker\n</code></pre>\n<p>Now run the following commands:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\nâ¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\nâ¯ sudo apt-get install containerd.io=1.6.8-1 -y\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\nâ¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n\n</code></pre>\n<p>From there we should be ready to join the cluster.   When we ran <code>kubeadm init</code> previously it\nprinted a join command out that we could use but Iâm going to show you how to do it if you\nwere coming back later and no longer had that token.</p>\n<p>Back on the <em>controplane</em> node run:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubeadm token create --print-join-command\nkubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>Now copy that command and run it with <code>sudo</code> on the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>After this completes itâll take a minute or two for everything to be synced up but if you go\nback to the master node you should have 2 ready nodes now:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   46m   v1.23.5\nworker         Ready    &#x3C;none>                 79s   v1.23.5\n</code></pre>\n<h2>Accessing the cluster outside of the VMs!</h2>\n<p>Now the final part is to get the <code>admin.conf</code> as a kubeconfig on your machine so you can control\nit from outside of the cluster.   To do this we can use scp</p>\n<pre><code class=\"hljs language-bash\">multipass transfer controlplane:/home/ubuntu/.kube/config local.config\n</code></pre>\n<p>Normally kubernetes configuration is in ~/.kube/config but I like to maint a separate file for\neach cluster and then I set the <code>KUBECONFIG</code> env var to access it.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">export</span> KUBECONFIG=local.config\nâ¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   56m   v1.23.5\nworker         Ready    &#x3C;none>                 11m   v1.23.5\n</code></pre>","category":"Kubernetes","date":"2022-04-17T00:00:00Z","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kubeadm"}]},"DevOps":{"count":3,"posts":[{"id":["2022","local_kubeadm_cluster"],"path":"2022/local_kubeadm_cluster","contentHtml":"<p>Iâm going to show you how to get a real kubernetes cluster setup locally on top of virtual\nmachines!  Iâll be using multipass but feel free to use virtualbox, proxmox, or whatever your\nfavorite cloud provider is.</p>\n<p>kubeadm a production ready kubernetes install tool and I prefer to use it over minikube, kind,\netc. because it gives you a more real world experience for <em>managing</em> the kubernetes cluster.\nThis isnât important if you are a user of the cluster but if you have to run your own this is\na great way to gain some daily experience.</p>\n<p>The kubernetes documentation on kubeadm is great and you can find it <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">here</a>.</p>\n<p>The differences between this blog and the kubernetes docs is that they leave a lot of decisions\nup to the reader such as:</p>\n<ul>\n<li>choosing a container runtime</li>\n<li>Selecting and installing a CNI (container network interface)</li>\n</ul>\n<p>Iâm going to be opinionated and make specific technology decisions such as using containerd and\ncilium so that you don't have to think about those decisions.</p>\n<h2>Getting your Virtual Machines setup!</h2>\n<p>The minimum requirements for a control plane node in kubernetes is 2gb of RAM and 2 CPUs.  Since\nwe actually want to be able to schedule workloads on the workers afterwards we are going to setup\na cluster that looks like this:</p>\n<ul>\n<li>Control Plane: 2gb RAM, 2 CPU</li>\n<li>Worker: 4gb RAM, 2 CPU</li>\n</ul>\n<p>Since weâll be using multipass to launch the nodes, we can do that now:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass launch -c 2 -m 4G -d 10G -n controlplane 22.04\nâ¯ multipass launch -c 2 -m 4G -d 10G -n worker 22.04\nâ¯ multipass list\nName                    State             IPv4             Image\ncontrolplane            Running           192.168.64.7     Ubuntu 22.04 LTS\nworker                  Running           192.168.64.8     Ubuntu 22.04 LTS\n</code></pre>\n<p>Now we can start working on our controlplane first, lets shell in:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell controlplane\n</code></pre>\n<p>Lets first add the kubernetes repo to the system so we have access to all the kubernetes tools:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n</code></pre>\n<p>Now that our system is setup, we can move on to getting a container runtime.</p>\n<h2>Getting your Container Runtime!</h2>\n<p>Before we start pulling in kubernetes components we need to get a container runtime setup on the\nmachine.   We we are going to use containerd for this purpose.  You can view the docs of for it\n<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">here</a>.</p>\n<p>Which will download the latest binary and set it up.   Iâm going to walk you through how to do it\nusing the version packaged with Ubuntu which could be older than the latest release.</p>\n<p>First thing we want to do is configure the networking to allow iptables to manage:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n</code></pre>\n<p>We also need to disable some default systemd settings for <code>rp_filter</code>  because\nthey are not compatible with cilium. See the bug report\n<a href=\"https://github.com/cilium/cilium/commit/cabc6581b8128681f4ed23f8d6dc463180eea61e\">here</a></p>\n<pre><code class=\"hljs language-bash\">â¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n</code></pre>\n<p>Then we need to refresh sysctl so those settings are applied:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n</code></pre>\n<p>You should see it applying all the changes:</p>\n<pre><code class=\"hljs language-ini\">* Applying /etc/sysctl.d/k8s.conf ...\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.ipv4.ip_forward</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>If you do not, the netfilter module may not have loaded properly:</p>\n<pre><code class=\"hljs language-bash\">â¯ lsmod |grep br_netfilter\nbr_netfilter           28672  0\nbridge                176128  1 br_netfilter\n</code></pre>\n<p>You want to make sure <code>rp_filter</code> is <code>0</code> everywhere as well for cilium:</p>\n<pre><code class=\"hljs language-ini\">â¯ sudo sysctl -a | grep '\\.rp_filter'\n<span class=\"hljs-attr\">net.ipv4.conf.all.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_host.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_net.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_vxlan.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.enp0s1.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lo.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxc0965b7b545f7.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxcb05ffd84ab74.rp_filter</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>Now lets pull down the container runtime weâll be using which is containerd.</p>\n<p>Ubuntu ships with a very old version of containerd so you need to upgrade to\nthe version shipped from the docker repos:\nYou can find which versions are available by running:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\nâ¯ sudo apt-get update\n</code></pre>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison containerd.io\ncontainerd.io |    1.6.8-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.7-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.6-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.4-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.11-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.10-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\n</code></pre>\n<p>We are going to use the latest version available which was 1.6.8-1</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install containerd.io=1.6.8-1 -y\n</code></pre>\n<p>Then we'll setup a configuration that enables containerd to use the systemd\ncgroup.  We are hard coding this config instead of using <code>containerd config default</code>\nbecause that currently has had a <a href=\"https://github.com/containerd/containerd/issues/4574\">bug</a>\nfor many years that generates an invalid config.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\n</code></pre>\n<p>You can verify its running with ctr:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo ctr --address /var/run/containerd/containerd.sock containers list\nCONTAINER    IMAGE    RUNTIME\n</code></pre>\n<p>Now that this is working we can move on to getting kubernetes installed!</p>\n<h2>Using kubeadm!</h2>\n<p>Now we need to get the kubernetes tools installed onto the system.  Iâm going to be using 1.23\nbut to find the latest version you can run:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison kubeadm|<span class=\"hljs-built_in\">head</span> -n2\n   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n</code></pre>\n<p>Then install the version you want, we install kubelet and kubeadm here to make\nsure the versions align:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n</code></pre>\n<p>This will pull in a few tools, including an alternative to <code>ctr</code> that we used earlier called\n<code>crictl</code>.  You can check that it is available to you doing this:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps\n</code></pre>\n<p>We can finally init our cluster:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm init\n</code></pre>\n<p>Once that finishes running it should give you some tips setup your configuration, it should look like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\nâ¯ sudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\nâ¯ sudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n<p>You can run those on the master node for now, but later I'll show you how to move\nthe config to your host computer.</p>\n<p>Now you should be able to check that your node is not ready yet:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS     ROLES                  AGE     VERSION\ncontrolplane   NotReady   control-plane,master   4m16s   v1.23.5\n</code></pre>\n<p><em>Note</em>: If you recieve \"The connecto to the server was refused\" error,\nThe cluster starting up and getting all the dependencies running could take\na bit of time.  So if you aren't able to communicate right away you can check\nwhich pods are up and running with <code>crictl</code>.  You'll need <code>kube-apiserver</code> up\nand running.  If it isn't you can check:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps -a\nCONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD\n8322192c4605c       bd8cc6d582470       36 seconds ago      Running             kube-proxy                4                   344c4f7fffbe8       kube-proxy-drm46\n30ce27c40adb2       81a4a8a4ac639       2 minutes ago       Exited              kube-controller-manager   4                   3a819c3a864b2       kube-controller-manager-controlplane\n7709fd5e92898       bd8cc6d582470       2 minutes ago       Exited              kube-proxy                3                   7cc6922c82015       kube-proxy-drm46\n10432b81d7c61       3767741e7fba7       2 minutes ago       Exited              kube-apiserver            4                   e64ddf3679d98       kube-apiserver-controlplane\n</code></pre>\n<p>which will show you pods that have exited. You can grab the container ID for\nkube-apiserver and read its logs:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock logs 10432b81d7c61\n</code></pre>\n<p>There are a few ways to figure out why the node isnât ready yet.  Usually I would check the\n<code>kubelet</code> logs first:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo journalctl -flu kubelet\n-- Logs begin at Sun 2022-04-17 19:22:19 AST. --\nApr 17 20:53:15 controlplane kubelet[19727]: E0417 20:53:15.951350   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\nApr 17 20:53:20 controlplane kubelet[19727]: E0417 20:53:20.952148   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\n</code></pre>\n<p>It is clear the problem is that we are missing the CNI.  The other way you can find out what is\ngoing on is describing the node:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane\n</code></pre>\n<p>This will have a lot of information but if you scroll through there looking at <code>Reason</code> you\nmight see something useful.  In this case under <code>Lease</code> you would see:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane|grep NotReady\nReady            False   Sun, 17 Apr 2022 20:53:37 -0400   Sun, 17 Apr 2022 20:43:07 -0400   KubeletNotReady              container runtime network not ready: NetworkReady=<span class=\"hljs-literal\">false</span> reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialize\n</code></pre>\n<p>Lets get our CNI installed, weâll be using cilium!</p>\n<h2>Setting up your CNI!</h2>\n<p>Cilium has great documentation over <a href=\"https://docs.cilium.io/en/v1.9/gettingstarted/k8s-install-kubeadm/\">here</a>,\nbut Iâll walk you through it anyways.  I do recommend checking out their documentation so you\nare familiar with it.   We will use <code>helm</code> to pull down the version of cilium we want:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL  https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/helm.gpg\n\nâ¯ sudo apt-get install apt-transport-https --<span class=\"hljs-built_in\">yes</span>\n\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://baltocdn.com/helm/stable/debian/ all main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list\n\nâ¯ sudo apt-get update\nâ¯ sudo apt-get install helm\n</code></pre>\n<p>Now we can install cilium!  It is <em>very</em> important that you pay attention to the\ncompatibility of cilium with the version of kubernetes you are intstalling. Check\nthe compatibility list <a href=\"https://docs.cilium.io/en/v1.12/concepts/kubernetes/compatibility/\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">â¯ helm repo add cilium https://helm.cilium.io/\nâ¯ helm repo update\n</code></pre>\n<p>Once the repo is added you can list the versions available:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm search repo -l|<span class=\"hljs-built_in\">head</span> -n8\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\ncilium/cilium  \t1.12.1       \t1.12.1     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.12.0       \t1.12.0     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.8       \t1.11.8     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.7       \t1.11.7     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.6       \t1.11.6     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.5       \t1.11.5     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.4       \t1.11.4     \teBPF-based Networking, Security, and Observability\n</code></pre>\n<p>So we want <code>1.11.4</code>:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm install cilium cilium/cilium --namespace kube-system --version 1.11.4\n</code></pre>\n<p>Now our node should be ready!</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get node\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   24m   v1.23.5\n</code></pre>\n<p>Time to join our worker to the cluster!</p>\n<h2>Joining a worker to the cluster!</h2>\n<p>We have to go through the same steps as the controlplane to get the point that we have a\ncontainer runtime and <code>kubeadm</code>.   Iâm not going to talk about the commands a second time but\nIâll re-iterate them here for ease of following along.</p>\n<p>First open up another shell and connect to the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell worker\n</code></pre>\n<p>Now run the following commands:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\nâ¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\nâ¯ sudo apt-get install containerd.io=1.6.8-1 -y\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\nâ¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n\n</code></pre>\n<p>From there we should be ready to join the cluster.   When we ran <code>kubeadm init</code> previously it\nprinted a join command out that we could use but Iâm going to show you how to do it if you\nwere coming back later and no longer had that token.</p>\n<p>Back on the <em>controplane</em> node run:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubeadm token create --print-join-command\nkubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>Now copy that command and run it with <code>sudo</code> on the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>After this completes itâll take a minute or two for everything to be synced up but if you go\nback to the master node you should have 2 ready nodes now:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   46m   v1.23.5\nworker         Ready    &#x3C;none>                 79s   v1.23.5\n</code></pre>\n<h2>Accessing the cluster outside of the VMs!</h2>\n<p>Now the final part is to get the <code>admin.conf</code> as a kubeconfig on your machine so you can control\nit from outside of the cluster.   To do this we can use scp</p>\n<pre><code class=\"hljs language-bash\">multipass transfer controlplane:/home/ubuntu/.kube/config local.config\n</code></pre>\n<p>Normally kubernetes configuration is in ~/.kube/config but I like to maint a separate file for\neach cluster and then I set the <code>KUBECONFIG</code> env var to access it.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">export</span> KUBECONFIG=local.config\nâ¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   56m   v1.23.5\nworker         Ready    &#x3C;none>                 11m   v1.23.5\n</code></pre>","category":"Kubernetes","date":"2022-04-17T00:00:00Z","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kubeadm"},{"id":["2023","aws_from_scratch_apply_before_merge"],"path":"2023/aws_from_scratch_apply_before_merge","contentHtml":"<p>The two most popular workflows when using terraform are:</p>\n<ul>\n<li>\n<p><strong>Apply after Merge</strong>: This is the default for things like\n<a href=\"https://terraform.io\">terraform cloud</a> and most github actions.</p>\n</li>\n<li>\n<p><strong>Apply before Merge</strong>: This is the default for things like\n<a href=\"https://www.runatlantis.io/\">Atlantis</a>.</p>\n</li>\n</ul>\n<p>I don't like apply-after-merge.  There are a lot of ways where a <code>plan</code>\ncan succeed but an <code>apply</code> will fail and you end up with broken configuration\nin <code>main</code>.</p>\n<p>So in this article I'll show you how to implement <strong>apply-before-merge</strong> with\ngithub actions.</p>\n<p>If you haven't ready my <a href=\"/blog/2023/aws_from_scratch_root_account\">previous article</a>,\nit covers how to setup terraform cloud with apply after merge and bootstrap your AWS\naccount with terraform.  I will assume you have read that article going forward.</p>\n<h1>TL;DR</h1>\n<p>The code for the github actions we create in this post can be found\n<a href=\"https://github.com/sontek/aws-terraform-github-actions\">here</a></p>\n<h1>Repairing the bootstrap</h1>\n<p>With apply-before-merge we need to implement it in github actions rather than\nutilizing the terraform cloud webhooks.  So lets drop the VCS repo and usage of\nthe webhook from our github repository. Basically anything that references\n<code>github_oauth_client</code> can be removed because we will no longer be using OAuth\nwith Github for our CI/CD pipeline.</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-comment\">diff --git a/1-variables.tf b/1-variables.tf</span>\n<span class=\"hljs-comment\">index bf1f434..7109924 100644</span>\n<span class=\"hljs-comment\">--- a/1-variables.tf</span>\n<span class=\"hljs-comment\">+++ b/1-variables.tf</span>\n<span class=\"hljs-meta\">@@ -47,12 +47,6 @@</span> variable \"github_default_branch\" {\n   default     = \"main\"\n }\n \n<span class=\"hljs-deletion\">-variable \"github_oauth_client_id\" {</span>\n<span class=\"hljs-deletion\">-  description = \"The token for the TFC OAuth client shown under VCS providers\"</span>\n<span class=\"hljs-deletion\">-  type        = string</span>\n<span class=\"hljs-deletion\">-  default     = null</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n variable \"aws_root_account_id\" {\n   description = \"The AWS root account we want to apply these changes to\"\n   type        = string\n<span class=\"hljs-comment\">diff --git a/4-tfc.tf b/4-tfc.tf</span>\n<span class=\"hljs-comment\">index a8217b7..9852228 100644</span>\n<span class=\"hljs-comment\">--- a/4-tfc.tf</span>\n<span class=\"hljs-comment\">+++ b/4-tfc.tf</span>\n<span class=\"hljs-meta\">@@ -77,31 +77,12 @@</span> resource \"aws_iam_role_policy_attachment\" \"tfc-access-attach\" {\n   policy_arn = aws_iam_policy.tfc-agent.arn\n }\n \n<span class=\"hljs-deletion\">-/* Fetch an oauth token from the client */</span>\n<span class=\"hljs-deletion\">-data \"tfe_oauth_client\" \"github\" {</span>\n<span class=\"hljs-deletion\">-  /* Don't fetch the client if we don't have the client_id */</span>\n<span class=\"hljs-deletion\">-  count           = var.github_oauth_client_id != null ? 1 : 0</span>\n<span class=\"hljs-deletion\">-  oauth_client_id = var.github_oauth_client_id</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n resource \"tfe_workspace\" \"workspaces\" {\n   count        = length(var.tfc_workspaces)\n   name         = var.tfc_workspaces[count.index]\n   organization = tfe_organization.organization.name\n \n   working_directory = var.tfc_workspaces[count.index]\n<span class=\"hljs-deletion\">-</span>\n<span class=\"hljs-deletion\">-  /* This generates a webhook on the github repository so plans are triggered</span>\n<span class=\"hljs-deletion\">-  automatically.   We dynamically set the setting because we will not have the</span>\n<span class=\"hljs-deletion\">-  oauth client ID on first pass.</span>\n<span class=\"hljs-deletion\">-  */</span>\n<span class=\"hljs-deletion\">-  dynamic \"vcs_repo\" {</span>\n<span class=\"hljs-deletion\">-    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []</span>\n<span class=\"hljs-deletion\">-    content {</span>\n<span class=\"hljs-deletion\">-      identifier     = format(\"%s/%s\", var.github_organization, github_repository.repo.name)</span>\n<span class=\"hljs-deletion\">-      oauth_token_id = data.tfe_oauth_client.github[0].oauth_token_id</span>\n<span class=\"hljs-deletion\">-    }</span>\n<span class=\"hljs-deletion\">-  }</span>\n }\n \n /* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-comment\">diff --git a/settings.auto.tfvars.example b/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">index 3327f02..79221c1 100644</span>\n<span class=\"hljs-comment\">--- a/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">+++ b/settings.auto.tfvars.example</span>\n<span class=\"hljs-meta\">@@ -4,6 +4,5 @@</span> tfc_workspaces = [\n   \"root\"\n ]\n github_organization    = \"github-org\"\n<span class=\"hljs-deletion\">-github_oauth_client_id = \"oc-...\"</span>\n github_repo_name       = \"my-infra\"\n aws_root_account_id    =  \"888888888888\"\n</code></pre>\n<p>Once that is removed from your <code>infra-bootstrap</code> repository we need to create\na new github secret with a token for Github to be able to talk with TFC. Make\na new file called <code>5-github-actions.tf</code> with the following content:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_team\"</span> <span class=\"hljs-string\">\"owners\"</span> {\n  name         = <span class=\"hljs-string\">\"owners\"</span>\n  organization = tfe_organization.organization.name\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_team_token\"</span> <span class=\"hljs-string\">\"github_actions_token\"</span> {\n  team_id = <span class=\"hljs-keyword\">data</span>.tfe_team.owners.id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_actions_secret\"</span> <span class=\"hljs-string\">\"tfe_secret\"</span> {\n  repository      = github_repository.repo.name\n  secret_name     = <span class=\"hljs-string\">\"TFE_TOKEN\"</span>\n  plaintext_value = tfe_team_token.github_actions_token.token\n}\n</code></pre>\n<p>Then you should <code>plan</code> and <code>apply</code> the change:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\nâ¯ terraform apply\n</code></pre>\n<p>The only change to the infrastructure should be to remove the VCS link and\nadding the secret:</p>\n<pre><code class=\"hljs language-diff\">  # tfe_workspace.workspaces[0] will be updated in-place\n  ~ resource \"tfe_workspace\" \"workspaces\" {\n        id                            = \"ws-K1M4tdXUUeASgmUR\"\n        name                          = \"root\"\n        # (20 unchanged attributes hidden)\n\n<span class=\"hljs-deletion\">-       vcs_repo {</span>\n<span class=\"hljs-deletion\">-           identifier         = \"sontek/sontek-infra\" -> null</span>\n<span class=\"hljs-deletion\">-           ingress_submodules = false -> null</span>\n<span class=\"hljs-deletion\">-           oauth_token_id     = \"ot-nMYJRbBb2SH9zCP7\" -> null</span>\n        }\n    }\n\n  # github_actions_secret.tfe_secret will be created\n<span class=\"hljs-addition\">+   resource \"github_actions_secret\" \"tfe_secret\" {</span>\n<span class=\"hljs-addition\">+       created_at      = (known after apply)</span>\n<span class=\"hljs-addition\">+       id              = (known after apply)</span>\n<span class=\"hljs-addition\">+       plaintext_value = (sensitive value)</span>\n<span class=\"hljs-addition\">+       repository      = \"sontek-infra\"</span>\n<span class=\"hljs-addition\">+       secret_name     = \"TFE_TOKEN\"</span>\n<span class=\"hljs-addition\">+       updated_at      = (known after apply)</span>\n    }\n\n  # tfe_team_token.github_actions_token will be created\n<span class=\"hljs-addition\">+   resource \"tfe_team_token\" \"github_actions_token\" {</span>\n<span class=\"hljs-addition\">+       id      = (known after apply)</span>\n<span class=\"hljs-addition\">+       team_id = \"team-...\"</span>\n<span class=\"hljs-addition\">+       token   = (sensitive value)</span>\n    }\n</code></pre>\n<h1>Github Actions</h1>\n<p>Now we need to connect the github actions to replace the plan and apply actions\nthat were being taken by the TFC webhook previously. All of these changes will\nbe in the <code>infra</code> repository that was generated from <code>bootstrap</code>.  We are done\nwith the bootstrap at this point.</p>\n<p>First, lets setup the <code>.github</code> folder, the end result we want is:</p>\n<pre><code class=\"hljs language-bash\">.github/\nâââ workflows\n    âââ on-apply-finished.yml\n    âââ on-pull-request-labeled.yml\n    âââ on-pull-request.yml\n</code></pre>\n<p>So create the folders:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p .github/workflows\nâ¯ terraform apply\n</code></pre>\n<h1>On Pull Request</h1>\n<p>The first flow we'll create is the <code>terraform plan</code> workflow which should be\nran whenever a pull request is opened. Create the file\n<code>.github/workflows/on-pull-request.yml</code> and put this content in it:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_build</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_validate:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">validate</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-validate@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_fmt:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">fmt</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-fmt-check@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_plan:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">plan</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-plan@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This creates three jobs:</p>\n<ul>\n<li><strong>terraform_validate</strong>: This validates the terraform via <code>terraform validate</code>\ncommand to make sure that it is correct and doesn't have duplicate resources\nor anything like that.</li>\n<li><strong>terraform_fmt</strong>: This verifies that the terraform is well formatted by\nrunning the <code>terraform fmt</code> command.`</li>\n<li><strong>terraform_plan</strong>: This runs the <code>terraform</code> plan and comments on the PR a\ndiff of the changes for you to verify.</li>\n</ul>\n<p>To verify this is working, lets make a change to the infrastructure so that we\ncan see a plan executed. We can bring back the <code>SQS</code> resource we destroyed in\nthe previous article. Create a file called <code>root/2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                      = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>Lets push a branch and make a pull request to see the result so far:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add .github/ root/\nâ¯ git checkout -b apply-before-merge\nâ¯ git commit -m <span class=\"hljs-string\">\"Implemented on-pull-request\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<p>After you make the pull request you should 3 checks on it and a comment that\nshows the plan:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/github_comment.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/github_checks.png\" width=\"400\">\n</center>\n<h1>Apply on Label</h1>\n<p>So now that the plan is working we need some way to <code>apply</code> the changes. I've\nfound the best way to do this is via a label rather than a comment because of\nthe way github actions work. Their event based actions like <code>on-comment</code> aren't\nexecuted in the context of a pull-request.</p>\n<p>Since we will be using a label to signal a plan is ready to be applied lets\ncreate a new file <code>.github/workflows/on-pull-request-labeled.yml</code> and provide\nthis content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_apply</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">types:</span> [ <span class=\"hljs-string\">labeled</span> ]\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_apply:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.label.name</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'tfc-apply'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-apply@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will fire whenever a pull request is labeled with the <code>tfc-apply</code> label.\nIt will run the <code>apply</code> and update the previous plan comment to let you\nknow the status.</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying_comment.png\" width=\"400\">\n</center>\n<h1>Merge on Apply</h1>\n<p>One thing you'll notice is that the pull request stayed open even after the\ninfrastructure is applied and we don't want that. We want any changes that have\nmade it into the environment to be merged into <code>main</code> automatically. To do\nthis we'll create our final action.</p>\n<p>Create a new file <code>.github/workflows/on-apply-finished.yml</code> with this content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_merge</span>\n\n<span class=\"hljs-comment\"># Only trigger, when the build workflow succeeded</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">workflow_run:</span>\n    <span class=\"hljs-attr\">workflows:</span> [<span class=\"hljs-string\">pr_apply</span>]\n    <span class=\"hljs-attr\">types:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">completed</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">merge:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.conclusion</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'success'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">checks:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">statuses:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">actions:</span> <span class=\"hljs-string\">read</span>\n    <span class=\"hljs-attr\">outputs:</span>\n      <span class=\"hljs-attr\">pullRequestNumber:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"Get information about the current run\"</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">potiuk/get-workflow-origin@v1_5</span>\n        <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">workflow-run-info</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">sourceRunId:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.id</span> <span class=\"hljs-string\">}}</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">merge</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">request</span> <span class=\"hljs-string\">after</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">apply</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">sudo-bot/action-pull-request-merge@v1.2.0</span>\n        <span class=\"hljs-attr\">with:</span>\n            <span class=\"hljs-attr\">github-token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n            <span class=\"hljs-attr\">number:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will wait until the <code>pr_apply</code> job completes and as long as it was\nsuccessful it'll merge the branch!</p>\n<p><strong>NOTE</strong>: As I mentioned earlier, the event based actions do not run in the\ncontext of the pull request which means you cannot test changes to them during\nthe PR either.  You must merge the <code>on-apply-finished.yml</code> file to <code>main</code>\nbefore it starts working.</p>\n<h1>Branch Protection</h1>\n<p>The final step to the process is to make sure you go to your github settings\nand make sure these status checks are required before merging. Branch protection\nis a feature that will prevent merging changes into a branch unless all\nrequired checks are passing.</p>\n<p>Go to <code>Settings</code> -> <code>Branches</code> -> <code>Branch Protection</code> and add a branch\nprotection rule:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/branch_protection.png\" width=\"500\">\n</center>\n<p>You want to enable the following settings:</p>\n<ul>\n<li><strong>Branch Name</strong>: main</li>\n<li>â Require a pull request before merging</li>\n<li>â Require status checks to pass before merging</li>\n</ul>\n<p>Then for <code>Status checks that are required.</code> select all of the ones we've\ncreated:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/required_checks.png\" height=\"200\">\n</center>\n<h1>Next Steps</h1>\n<p>Now that you have the ability to manage your AWS accounts through terraform\nvia pull request the next step is to start creating infrastructure that can\ncreate real workloads.   In my next post I'll show you how to boostrap an\nEKS (Kubernetes cluster) using terraform.</p>","category":"AWS","date":"2023-04-02T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Apply before Merge with Github Actions"},{"id":["2023","aws_from_scratch_root_account"],"path":"2023/aws_from_scratch_root_account","contentHtml":"<p>Following this article will get you setup with an AWS Root account that can be\nmanaged through through Terraform Cloud with OIDC. As a best practice you\nshould not keep long-lived access keys in your CI/CD pipelines when\ndeploying to AWS, instead you should use OIDC (OpenID Connect) to securely\ndeploy to AWS when using Terraform Cloud or Github Actions.</p>\n<h1>TL;DR</h1>\n<p>Download all the source from the blog post here:</p>\n<p><a href=\"https://github.com/sontek/aws-terraform-bootstrap\">https://github.com/sontek/aws-terraform-bootstrap</a></p>\n<h1>How does OIDC work</h1>\n<p>OIDC enables us to request a short-lived access token directly from AWS. We\njust have to create trust relationship that controls which workflows are able\nto request the access tokens.</p>\n<ul>\n<li>No need to duplicate AWS credentials as long-lived GitHub secrets.</li>\n<li>Since we are using a short-lived access token that is only valid for a single\njob there is no reason to worry about rotating secrets.</li>\n</ul>\n<p>The following diagram gives an overview of how we can use Terraform Cloud's\nOIDC provider to integrate with AWS:</p>\n<div class=\"remark-mermaid remark-mermaid-default\"><svg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"-8 -8 843.078125 320\" style=\"max-width: 843.078px; background-color: transparent;\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-1680783553753\"><style>#mermaid-1680783553753{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1680783553753 .error-icon{fill:#552222;}#mermaid-1680783553753 .error-text{fill:#552222;stroke:#552222;}#mermaid-1680783553753 .edge-thickness-normal{stroke-width:2px;}#mermaid-1680783553753 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1680783553753 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1680783553753 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1680783553753 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1680783553753 .marker{fill:#333333;stroke:#333333;}#mermaid-1680783553753 .marker.cross{stroke:#333333;}#mermaid-1680783553753 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1680783553753 .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:#333;}#mermaid-1680783553753 .cluster-label text{fill:#333;}#mermaid-1680783553753 .cluster-label span{color:#333;}#mermaid-1680783553753 .label text,#mermaid-1680783553753 span{fill:#333;color:#333;}#mermaid-1680783553753 .node rect,#mermaid-1680783553753 .node circle,#mermaid-1680783553753 .node ellipse,#mermaid-1680783553753 .node polygon,#mermaid-1680783553753 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1680783553753 .node .label{text-align:center;}#mermaid-1680783553753 .node.clickable{cursor:pointer;}#mermaid-1680783553753 .arrowheadPath{fill:#333333;}#mermaid-1680783553753 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1680783553753 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1680783553753 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1680783553753 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1680783553753 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1680783553753 .cluster text{fill:#333;}#mermaid-1680783553753 .cluster span{color:#333;}#mermaid-1680783553753 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1680783553753 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-1680783553753 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"10\" viewBox=\"0 0 12 20\" class=\"marker flowchart\" id=\"flowchart-pointEnd\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\"></path></marker><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"0\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-pointStart\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleEnd\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleStart\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossEnd\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossStart\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-AWS LE-Token\" id=\"L-AWS-Token-0\" d=\"M185.671875,134.5L181.50520833333334,134.5C177.33854166666666,134.5,169.00520833333334,134.5,152.378260969764,145.875C135.75131360619469,157.25,110.83075221238937,180,98.37047151548673,191.375L85.91019081858407,202.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Token LE-Terraform\" id=\"L-Token-Terraform-0\" d=\"M85.91019081858407,235.75L98.37047151548673,247.125C110.83075221238937,258.5,135.75131360619469,281.25,164.46289638643069,292.625C193.17447916666666,304,225.67708333333334,304,258.1796875,304C290.6822916666667,304,323.1848958333333,304,359.3528645833333,304C395.5208333333333,304,435.3541666666667,304,475.1875,304C515.0208333333334,304,554.8541666666666,304,585.6956312991642,296.7916666666667C616.5370959316618,289.5833333333333,638.3866918633236,275.1666666666667,649.3114898291544,267.9583333333333L660.2362877949853,260.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Terraform LE-JWT\" id=\"L-Terraform-JWT-0\" d=\"M660.2362877949853,177.75L649.3114898291544,170.54166666666666C638.3866918633236,163.33333333333334,616.5370959316618,148.91666666666666,601.4456312991642,141.70833333333334C586.3541666666666,134.5,578.0208333333334,134.5,573.8541666666666,134.5L569.6875,134.5\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-JWT LE-AWS\" id=\"L-JWT-AWS-0\" d=\"M380.6875,134.5L376.5208333333333,134.5C372.3541666666667,134.5,364.0208333333333,134.5,355.6875,134.5C347.3541666666667,134.5,339.0208333333333,134.5,334.8541666666667,134.5L330.6875,134.5\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g transform=\"translate(621.1171875, 169.75)\" class=\"root\"><g class=\"clusters\"><g id=\"Terraform\" class=\"cluster default\"><rect height=\"83\" width=\"206.890625\" y=\"8\" x=\"-0.9296875\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(-0.9296875, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"206.890625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Terraform Cloud Workflow #2</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(102.515625, 49.5)\" id=\"flowchart-OIDCProvider-23\" class=\"node default default\"><rect height=\"33\" width=\"119.03125\" y=\"-16.5\" x=\"-59.515625\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-52.015625, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"104.03125\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Provider</span></div></foreignObject></g></g></g></g><g transform=\"translate(178.171875, -8)\" class=\"root\"><g class=\"clusters\"><g id=\"AWS\" class=\"cluster default\"><rect height=\"269\" width=\"145.015625\" y=\"8\" x=\"8\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(51.4609375, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"58.09375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">AWS #1</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(80.5078125, 59.5)\" id=\"flowchart-OIDC-20\" class=\"node default default\"><rect height=\"33\" width=\"95.015625\" y=\"-16.5\" x=\"-47.5078125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-40.0078125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"80.015625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Trust</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 142.5)\" id=\"flowchart-Roles-21\" class=\"node default default\"><rect height=\"33\" width=\"55.90625\" y=\"-16.5\" x=\"-27.953125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-20.453125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"40.90625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Roles</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 225.5)\" id=\"flowchart-Resources-22\" class=\"node default default\"><rect height=\"33\" width=\"91.484375\" y=\"-16.5\" x=\"-45.7421875\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-38.2421875, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"76.484375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Resources</span></div></foreignObject></g></g></g></g><g transform=\"translate(67.8359375, 219.25)\" id=\"flowchart-Token-25\" class=\"node default default\"><rect height=\"33\" width=\"135.671875\" y=\"-16.5\" x=\"-67.8359375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-60.3359375, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"120.671875\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Access Token #4</span></div></foreignObject></g></g><g transform=\"translate(475.1875, 134.5)\" id=\"flowchart-JWT-28\" class=\"node default default\"><rect height=\"33\" width=\"189\" y=\"-16.5\" x=\"-94.5\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-87, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"174\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">JWT &#x26; Cloud Role ID #3</span></div></foreignObject></g></g></g></g></g></svg></div>\n<ol>\n<li>In AWS, create an OIDC trust between a role and our terraform cloud\nworkflow(s) that need access to the cloud.</li>\n<li>Every time a job runs, TFC's OIDC Provider auto-generates an OIDC token.\nThis token contains multiple claims to establish a security-hardened and\nverifiable identity about the specific workflow that is trying to authenticate.</li>\n<li>Request this token from TFC's OIDC provider, and present it to AWS</li>\n<li>Once AWS successfully validates the claims presented in the token, it then\nprovides a short-lived cloud access token that is available only for the duration\nof the job.</li>\n</ol>\n<h1>What does this post accomplish</h1>\n<ul>\n<li>Setup a root AWS account that is managed througuh terraform</li>\n<li>Setup OIDC authentication with Terraform Cloud so it can talk to AWS</li>\n<li>Setup Github Actions authentication with Terraform Cloud so we can run plan\nand apply through the CI/CD pipeline.</li>\n</ul>\n<h1>Setup AWS Access</h1>\n<p>It is very bad practice to use the root account for much of anything but for\nbootstrapping the account it is necessary, so the first step is to get your\n<code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code></p>\n<p>To do this click your account and choose <code>Security Credentials</code> in the top\nright:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/security_credentials.png\" height=\"200\">\n</center>\n<p>Then choose <code>Create Access key</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/create_access_token.png\" width=\"200\">\n</center>\n<p>You need to set these environment variables in your shell so that your local\nshell has access to AWS. After you set them you can verify you set them correct\nby running:</p>\n<pre><code class=\"hljs language-bash\">â¯ aws sts get-caller-identity\n</code></pre>\n<p>and you should get a result similar to:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"UserId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"777777777777\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Account\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"888888888888\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Arn\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"arn:aws:iam::888888888888:root\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Bootstrap</h2>\n<p>Before you can manage any of your accounts through Terraform Cloud you'll need\nbootstrap some core infrastructure like OIDC so Terraform Cloud can authenticate\nsecurely and manage AWS Resources on your behalf.</p>\n<p>I personally prefer doing this in two repositories:</p>\n<ul>\n<li>\n<p><code>infra-bootstrap</code>: This repository does the bare minimum to hook up terraform\ncloud with your AWS account and stores the state in git.  Its the only infra\nthat will not be controlled by your CI/CD pipeline.</p>\n</li>\n<li>\n<p><code>infra</code>: The actual repository where all the rest of your AWS resources are\nmanaged.  It will store state in Terraform Cloud and you can introduce a\nCI/CD pipeline for approving changes.</p>\n<p><strong>Note</strong>: This repository will be generated with the terraform code.</p>\n</li>\n</ul>\n<p>After manually creating the git repository <code>infra-boostrap</code> in your Github\naccount We will need 3 providers to bootstrap the account <code>aws</code>, <code>github</code>, and\n<code>tfe</code>.</p>\n<h3>Variables</h3>\n<p>Create a <code>1-variables.tf</code> where we can define the variables we'll need\nfor creating these resources.</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_aws_audience\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"aws.workload.identity\"</span>\n  description = <span class=\"hljs-string\">\"The audience value to use in run identity tokens\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_hostname\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"app.terraform.io\"</span>\n  description = <span class=\"hljs-string\">\"The hostname of the TFC or TFE instance you'd like to use with AWS\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_project_name\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"Default Project\"</span>\n  description = <span class=\"hljs-string\">\"The project under which a workspace will be created\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_name\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The name of your Terraform Cloud organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_owner\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The owner of the TFC organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_workspaces\"</span> {\n  type        = list(string)\n  description = <span class=\"hljs-string\">\"The list of TFC workspaces\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_organization\"</span> {\n  description = <span class=\"hljs-string\">\"The organization the repositories are owned by\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_repo_name\"</span> {\n  description = <span class=\"hljs-string\">\"The name of the git reppository we'll create for managing infra\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_default_branch\"</span> {\n  description = <span class=\"hljs-string\">\"The default branch to utilize\"</span>\n  type        = string\n  default     = <span class=\"hljs-string\">\"main\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_oauth_client_id\"</span> {\n  description = <span class=\"hljs-string\">\"The token for the TFC OAuth client shown under VCS providers\"</span>\n  type        = string\n  default     = null\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"aws_root_account_id\"</span> {\n  description = <span class=\"hljs-string\">\"The AWS root account we want to apply these changes to\"</span>\n  type        = string\n}\n</code></pre>\n<p>We will use these variables in the later modules but they are mostly metadata\naround the terraform and github accounts you'll need to setup manually.</p>\n<h3>Providers</h3>\n<p>Create a file called <code>2-main.tf</code> and define the providers:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  required_providers {\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.41.0\"</span>\n    }\n\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    github = {\n      source  = <span class=\"hljs-string\">\"integrations/github\"</span>\n      version = <span class=\"hljs-string\">\"5.18.3\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  <span class=\"hljs-comment\"># Root account, all other accounts should be provisioned</span>\n  <span class=\"hljs-comment\"># via pull requests</span>\n  allowed_account_ids = [var.aws_root_account_id]\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"github\"</span> {\n  owner = var.github_organization\n}\n</code></pre>\n<p>The key things there are we define <code>allowed_account_ids</code> to prevent us from\nworking against any account that isn't the root and we are using one of the\nvariables we defines earlier.</p>\n<h3>Github</h3>\n<p>We will utilize <code>terraform</code> to create the second git repository where the rest\nof the infrastructure will go. Create a file called <code>3-github.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_repository\"</span> <span class=\"hljs-string\">\"repo\"</span> {\n  name        = var.github_repo_name\n  description = <span class=\"hljs-string\">\"Infrastructure Repository\"</span>\n  visibility  = <span class=\"hljs-string\">\"private\"</span>\n  auto_init   = true\n  has_issues  = true\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_branch_default\"</span> <span class=\"hljs-string\">\"default\"</span> {\n  repository = github_repository.repo.name\n  branch     = var.github_default_branch\n}\n\n<span class=\"hljs-keyword\">output</span> <span class=\"hljs-string\">\"repository_id\"</span> {\n  value = github_repository.repo.id\n}\n</code></pre>\n<p>This will generate a new repository in your account called <code>infra</code>.</p>\n<h3>Terraform Cloud</h3>\n<p>Now we need to setup dynamic credentials so the terraform cloud agent is\nallowed to take actions on your behalf.   To do this we'll setup an IAM\nrole and an OIDC provider. Create a file called <code>4-tfc.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_organization\"</span> <span class=\"hljs-string\">\"organization\"</span> {\n  name  = var.tfc_organization_name\n  email = var.tfc_organization_owner\n}\n\n/* AWS will use this TLS certificate to verify that requests for dynamic\ncredentials come from Terraform Cloud.*/\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tls_certificate\"</span> <span class=\"hljs-string\">\"tfc_certificate\"</span> {\n  url = <span class=\"hljs-string\">\"https://<span class=\"hljs-variable\">${var.tfc_hostname}</span>\"</span>\n}\n\n/* sets up an OIDC <span class=\"hljs-keyword\">provider</span> in AWS with Terraform Cloud's TLS certificate,\nthe SHA1 fingerprint from the TLS certificate \n*/\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_openid_connect_provider\"</span> <span class=\"hljs-string\">\"tfc_provider\"</span> {\n  url            = <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.url\n  client_id_list = [var.tfc_aws_audience]\n  thumbprint_list = [\n    <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.certificates[<span class=\"hljs-number\">0</span>].sha1_fingerprint\n  ]\n}\n\n/* Policy to allow TFC to assume the AWS IAM role in our account */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n\n    principals {\n      type        = <span class=\"hljs-string\">\"Federated\"</span>\n      identifiers = [aws_iam_openid_connect_provider.tfc_provider.arn]\n    }\n    condition {\n      test     = <span class=\"hljs-string\">\"StringEquals\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:aud\"</span>\n\n      values = [\n        <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${<span class=\"hljs-meta\">one(aws_iam_openid_connect_provider.tfc_provider.client_id_list)</span>}</span>\"</span>\n      ]\n    }\n\n    condition {\n      test     = <span class=\"hljs-string\">\"StringLike\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:sub\"</span>\n\n      values = [\n        for workspace in var.tfc_workspaces : <span class=\"hljs-string\">\"organization:<span class=\"hljs-variable\">${tfe_organization.organization.name}</span>:project:<span class=\"hljs-variable\">${var.tfc_project_name}</span>:workspace:<span class=\"hljs-variable\">${workspace}</span>:run_phase:*\"</span>\n      ]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRoleWithWebIdentity\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name               = <span class=\"hljs-string\">\"tfc-agent\"</span>\n  assume_role_policy = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.assume_role.json\n}\n\n/* Policy for what the TFC agent is allowed to do */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  version = <span class=\"hljs-string\">\"2012-10-17\"</span>\n\n  statement {\n    actions   = [<span class=\"hljs-string\">\"*\"</span>]\n    effect    = <span class=\"hljs-string\">\"Allow\"</span>\n    resources = [<span class=\"hljs-string\">\"*\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_policy\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name        = <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>\n  description = <span class=\"hljs-string\">\"Access policy for the TFC agent\"</span>\n  policy      = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.tfc-agent.json\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"hljs-string\">\"tfc-access-attach\"</span> {\n  role       = aws_iam_role.tfc-agent.name\n  policy_arn = aws_iam_policy.tfc-agent.arn\n}\n\n/* Fetch an oauth token from the client */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_oauth_client\"</span> <span class=\"hljs-string\">\"github\"</span> {\n  /* Don't fetch the client if we don't have the client_id */\n  count           = var.github_oauth_client_id != null ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n  oauth_client_id = var.github_oauth_client_id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n  count        = length(var.tfc_workspaces)\n  name         = var.tfc_workspaces[count.index]\n  organization = tfe_organization.organization.name\n\n  working_directory = var.tfc_workspaces[count.index]\n\n  /* This generates a webhook on the github repository so plans are triggered\n  automatically.   We dynamically set the setting because we will not have the\n  oauth client ID on first pass.\n  */\n  dynamic <span class=\"hljs-string\">\"vcs_repo\"</span> {\n    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []\n    content {\n      identifier     = format(<span class=\"hljs-string\">\"%s/%s\"</span>, var.github_organization, github_repository.repo.name)\n      oauth_token_id = <span class=\"hljs-keyword\">data</span>.tfe_oauth_client.github[<span class=\"hljs-number\">0</span>].oauth_token_id\n    }\n  }\n}\n\n/* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-auth\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_PROVIDER_AUTH\"</span>\n  value        = true\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Enable dynamic auth on the TFC agents\"</span>\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-role\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_RUN_ROLE_ARN\"</span>\n  value        = aws_iam_role.tfc-agent.arn\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Tell TFC what Role to run as\"</span>\n}\n</code></pre>\n<p>This module is dynamic because there is one piece that will require a\nmanul oauth setup for github.  So the first pass will apply without it\nand then later on we'll create it and run the apply again.</p>\n<h2>Applying the changes</h2>\n<p>Now we just need to define our settings for the module and we'll get our\ninfrastructure applied.  Create a file called <code>settings.auto.tfvars</code> and\npopulate it with the content for your account.  This is an example of what\nthis should look like:</p>\n<pre><code class=\"hljs language-hcl\">tfc_organization_name  = <span class=\"hljs-string\">\"sontek\"</span>\ntfc_organization_owner = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n\n<span class=\"hljs-comment\"># The workspaces you want to create and be able to manage with IaC</span>\ntfc_workspaces = [\n  <span class=\"hljs-string\">\"root\"</span>\n]\n<span class=\"hljs-comment\"># this can be your username</span>\ngithub_organization    = <span class=\"hljs-string\">\"sontek\"</span>\ngithub_repo_name       = <span class=\"hljs-string\">\"sontek-infra\"</span>\naws_root_account_id    =  <span class=\"hljs-string\">\"888888888888\"</span>\n</code></pre>\n<p>Now run:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform login\nâ¯ terraform init\n</code></pre>\n<p>and you should see:</p>\n<pre><code class=\"hljs\">Terraform has been successfully initialized!\n</code></pre>\n<p>Now lets run our plan:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> plan\n</code></pre>\n<p>You should see a result:</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Plan:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">to</span> add, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> change, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> destroy.\n</code></pre>\n<p>Apply it to make those resources:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>At this point it:</p>\n<ol>\n<li>Created a terraform cloud organization</li>\n<li>Created a terraform cloud workspace</li>\n<li>Created a git repository</li>\n</ol>\n<h1>Verify TFC can talk to AWS</h1>\n<p>To verify that TFC can communicate with AWS through the dynamic credentials,\nlets clone the repository and make some dummy resources. After you've cloned\nthe repository lets make a folder for the workspace <code>root</code> that we defined in\nbootstrap:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> root\nâ¯ <span class=\"hljs-built_in\">cd</span> root\n</code></pre>\n<p>Now create a <code>1-providers.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  cloud {\n    organization = <span class=\"hljs-string\">\"sontek\"</span>\n\n    workspaces {\n      name = <span class=\"hljs-string\">\"root\"</span>\n    }\n  }\n\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.42.0\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  default_tags {\n    tags = {\n      Owner   = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n      Env     = <span class=\"hljs-string\">\"Root\"</span>\n      Service = <span class=\"hljs-string\">\"BusinessOperations\"</span>\n    }\n  }\n}\n</code></pre>\n<p><strong>NOTE</strong>: You should replace <code>organization</code>, <code>workspaces.name</code>, and\n<code>tags.Owner</code> to be your own values.</p>\n<p>Now create a small resource to prove everything is working, we'll use SQS for\nthis. Create a file called <code>2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                        = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>If you run the plan you should see the resource it wants to create:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform init\nâ¯ terraform plan\n\n</code></pre>\n<p>and you should see the run is executing in terraform cloud:</p>\n<pre><code class=\"hljs language-arduino\">Running plan in Terraform Cloud. Output will stream here. Pressing Ctrl-C\nwill stop streaming the logs, but will <span class=\"hljs-keyword\">not</span> stop the plan running remotely.\n</code></pre>\n<p>You can click the link it provides to see the logs. Now lets apply this\nresource to see it all working:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>You should get a response like:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">Apply</span> <span class=\"hljs-string\">complete!</span> <span class=\"hljs-attr\">Resources:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">added,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">changed,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">destroyed.</span>\n</code></pre>\n<p>So Terraform Cloud has full access to create AWS resources!   The final step\nis to get github running the plan/apply on pull requests. Commit these files\nto your repository and we'll remove them in a pull request. Create a\n<code>.gitignore</code> file in the root:</p>\n<pre><code class=\"hljs language-hcl\">.<span class=\"hljs-keyword\">terraform</span>*\n</code></pre>\n<p>and commit all the files:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add *\nâ¯ git commit -m <span class=\"hljs-string\">\"initial infra\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<h1>Github VCS Provider</h1>\n<p>To setup oauth between github and terraform cloud so it can manage the webhooks\nyou need to login to the [https://app.terraform.io](Terraform Cloud Console) and\ninitiate the connection.</p>\n<p>Select the newly created organization and then click <code>Settings</code>.  In the sidebar\nthere will be a section <code>Version Control</code> and you want to select <code>Providers</code> under\nthat.</p>\n<p>At this point you should see an <code>Add a VCS Provider</code> button, you want to select\n<code>Github.com (Custom)</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_vcs_provider.png\" height=\"250\">\n</center>\n<p>Follow the on-screen instructions to create a new GitHub OAuth application on your\naccount. For me, I went to <a href=\"https://github.com/settings/applications/new\">here</a> and\nprovided the information TFC displayed:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_github_app.png\" height=\"300\">\n</center>\n<p>On the Github side you need to save the <code>Client ID</code> and you need to click\n<code>Generate a new client secret</code>.   Provide those details to terraform cloud and\nthen we should be ready to send our first PR!</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_oauth_settings.png\" height=\"300\">\n</center>\n<h2>Finish Bootstrap</h2>\n<p>At this point we need to return to the bootstrap repository and provide it the\nnew OAuth Client ID for its <code>github_oauth_client_id</code> setting.  To get the value\nfor this the easiest way is to drill into the VCS provider in terraform and click\n<code>Edit Client</code>.   In the URL you'll see the Client ID, it should start with\n<code>oc-...</code>.</p>\n<p>Now return back to the <code>bootstrap</code> repository and edit <code>settings.auto.tfvars</code> and\nset the final setting:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">github_oauth_client_id</span> = <span class=\"hljs-string\">\"oc-......\"</span>\n</code></pre>\n<p>Now you should be able to run a plan and see the <code>vcs_repo</code> get added in-place:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\n\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  <span class=\"hljs-comment\"># tfe_workspace.workspaces[0] will be updated in-place</span>\n  ~ resource <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n        <span class=\"hljs-built_in\">id</span>                            = <span class=\"hljs-string\">\"ws-...\"</span>\n        name                          = <span class=\"hljs-string\">\"root\"</span>\n        <span class=\"hljs-comment\"># (20 unchanged attributes hidden)</span>\n\n      + vcs_repo {\n          + identifier         = <span class=\"hljs-string\">\"sontek/sontek-infra\"</span>\n          + ingress_submodules = <span class=\"hljs-literal\">false</span>\n          + oauth_token_id     = <span class=\"hljs-string\">\"ot-...\"</span>\n        }\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre>\n<p>Apply the change!</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>After you apply the change, if you go to <code>Settings</code> -> <code>Webhooks</code> of the <code>infra</code>\nrepository that was created earlier you should see a new terraform cloud webhook\nwas created.</p>\n<center>\n<img src=\"/images/posts/aws_root_account/github_webhooks.png\" width=\"350\">\n</center>\n<h1>Send your first pull request</h1>\n<p>Now you should be able to send a pull request tearing down the SQS resource we\ngenerated at the beginning and terraform cloud will take care of the rest! Make\nsure you are on the generated <code>infra</code> repo and:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">rm</span> root/sqs.tf\n</code></pre>\n<p>and commit / push that to a branch and open a pull request. When you merge it\nwill apply the changes.</p>\n<h1>Next Steps</h1>\n<p>This should be good enough for you to manage your AWS cloud infrastructure as\ncode with terraform but I <strong>personally</strong> don't like that terraform cloud applies\nthe changes on merge.  There are a lot of ways where a <code>plan</code> can succeed but an\n<code>apply</code> will fail and you end up with broken configuration in <code>main</code>.</p>\n<p>I prefer a worfklow called <code>apply-before-merge</code> and in my next post I'll show you\nhow to do that through github actions instead of utilizing the TFC webhook.</p>\n<p>Check out that post <a href=\"/blog/2023/aws_from_scratch_apply_before_merge\">here</a>!</p>\n<h1>Helpful Resources</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials?product_intent=terraform\">Terraform Dynamic Credentials Tutorial</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration\">Terraform docs on Dynamic Credentials</a></li>\n<li><a href=\"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token\">Github's understanding OIDC</a></li>\n</ul>","category":"AWS","date":"2023-04-01T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Setting up your Root Account for IaC (using Terraform Cloud)"}]},"SRE":{"count":3,"posts":[{"id":["2022","local_kubeadm_cluster"],"path":"2022/local_kubeadm_cluster","contentHtml":"<p>Iâm going to show you how to get a real kubernetes cluster setup locally on top of virtual\nmachines!  Iâll be using multipass but feel free to use virtualbox, proxmox, or whatever your\nfavorite cloud provider is.</p>\n<p>kubeadm a production ready kubernetes install tool and I prefer to use it over minikube, kind,\netc. because it gives you a more real world experience for <em>managing</em> the kubernetes cluster.\nThis isnât important if you are a user of the cluster but if you have to run your own this is\na great way to gain some daily experience.</p>\n<p>The kubernetes documentation on kubeadm is great and you can find it <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">here</a>.</p>\n<p>The differences between this blog and the kubernetes docs is that they leave a lot of decisions\nup to the reader such as:</p>\n<ul>\n<li>choosing a container runtime</li>\n<li>Selecting and installing a CNI (container network interface)</li>\n</ul>\n<p>Iâm going to be opinionated and make specific technology decisions such as using containerd and\ncilium so that you don't have to think about those decisions.</p>\n<h2>Getting your Virtual Machines setup!</h2>\n<p>The minimum requirements for a control plane node in kubernetes is 2gb of RAM and 2 CPUs.  Since\nwe actually want to be able to schedule workloads on the workers afterwards we are going to setup\na cluster that looks like this:</p>\n<ul>\n<li>Control Plane: 2gb RAM, 2 CPU</li>\n<li>Worker: 4gb RAM, 2 CPU</li>\n</ul>\n<p>Since weâll be using multipass to launch the nodes, we can do that now:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass launch -c 2 -m 4G -d 10G -n controlplane 22.04\nâ¯ multipass launch -c 2 -m 4G -d 10G -n worker 22.04\nâ¯ multipass list\nName                    State             IPv4             Image\ncontrolplane            Running           192.168.64.7     Ubuntu 22.04 LTS\nworker                  Running           192.168.64.8     Ubuntu 22.04 LTS\n</code></pre>\n<p>Now we can start working on our controlplane first, lets shell in:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell controlplane\n</code></pre>\n<p>Lets first add the kubernetes repo to the system so we have access to all the kubernetes tools:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\n\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n</code></pre>\n<p>Now that our system is setup, we can move on to getting a container runtime.</p>\n<h2>Getting your Container Runtime!</h2>\n<p>Before we start pulling in kubernetes components we need to get a container runtime setup on the\nmachine.   We we are going to use containerd for this purpose.  You can view the docs of for it\n<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">here</a>.</p>\n<p>Which will download the latest binary and set it up.   Iâm going to walk you through how to do it\nusing the version packaged with Ubuntu which could be older than the latest release.</p>\n<p>First thing we want to do is configure the networking to allow iptables to manage:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\n</code></pre>\n<p>We also need to disable some default systemd settings for <code>rp_filter</code>  because\nthey are not compatible with cilium. See the bug report\n<a href=\"https://github.com/cilium/cilium/commit/cabc6581b8128681f4ed23f8d6dc463180eea61e\">here</a></p>\n<pre><code class=\"hljs language-bash\">â¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n</code></pre>\n<p>Then we need to refresh sysctl so those settings are applied:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n</code></pre>\n<p>You should see it applying all the changes:</p>\n<pre><code class=\"hljs language-ini\">* Applying /etc/sysctl.d/k8s.conf ...\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-ip6tables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.bridge.bridge-nf-call-iptables</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">net.ipv4.ip_forward</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>If you do not, the netfilter module may not have loaded properly:</p>\n<pre><code class=\"hljs language-bash\">â¯ lsmod |grep br_netfilter\nbr_netfilter           28672  0\nbridge                176128  1 br_netfilter\n</code></pre>\n<p>You want to make sure <code>rp_filter</code> is <code>0</code> everywhere as well for cilium:</p>\n<pre><code class=\"hljs language-ini\">â¯ sudo sysctl -a | grep '\\.rp_filter'\n<span class=\"hljs-attr\">net.ipv4.conf.all.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_host.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_net.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.cilium_vxlan.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.enp0s1.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lo.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxc0965b7b545f7.rp_filter</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">net.ipv4.conf.lxcb05ffd84ab74.rp_filter</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>Now lets pull down the container runtime weâll be using which is containerd.</p>\n<p>Ubuntu ships with a very old version of containerd so you need to upgrade to\nthe version shipped from the docker repos:\nYou can find which versions are available by running:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\nâ¯ sudo apt-get update\n</code></pre>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison containerd.io\ncontainerd.io |    1.6.8-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.7-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.6-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |    1.6.4-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.11-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\ncontainerd.io |   1.5.10-1 | https://download.docker.com/linux/ubuntu jammy/stable arm64 Packages\n</code></pre>\n<p>We are going to use the latest version available which was 1.6.8-1</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install containerd.io=1.6.8-1 -y\n</code></pre>\n<p>Then we'll setup a configuration that enables containerd to use the systemd\ncgroup.  We are hard coding this config instead of using <code>containerd config default</code>\nbecause that currently has had a <a href=\"https://github.com/containerd/containerd/issues/4574\">bug</a>\nfor many years that generates an invalid config.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\n</code></pre>\n<p>You can verify its running with ctr:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo ctr --address /var/run/containerd/containerd.sock containers list\nCONTAINER    IMAGE    RUNTIME\n</code></pre>\n<p>Now that this is working we can move on to getting kubernetes installed!</p>\n<h2>Using kubeadm!</h2>\n<p>Now we need to get the kubernetes tools installed onto the system.  Iâm going to be using 1.23\nbut to find the latest version you can run:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-cache madison kubeadm|<span class=\"hljs-built_in\">head</span> -n2\n   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages\n</code></pre>\n<p>Then install the version you want, we install kubelet and kubeadm here to make\nsure the versions align:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n</code></pre>\n<p>This will pull in a few tools, including an alternative to <code>ctr</code> that we used earlier called\n<code>crictl</code>.  You can check that it is available to you doing this:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps\n</code></pre>\n<p>We can finally init our cluster:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm init\n</code></pre>\n<p>Once that finishes running it should give you some tips setup your configuration, it should look like this:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\nâ¯ sudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\nâ¯ sudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n<p>You can run those on the master node for now, but later I'll show you how to move\nthe config to your host computer.</p>\n<p>Now you should be able to check that your node is not ready yet:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS     ROLES                  AGE     VERSION\ncontrolplane   NotReady   control-plane,master   4m16s   v1.23.5\n</code></pre>\n<p><em>Note</em>: If you recieve \"The connecto to the server was refused\" error,\nThe cluster starting up and getting all the dependencies running could take\na bit of time.  So if you aren't able to communicate right away you can check\nwhich pods are up and running with <code>crictl</code>.  You'll need <code>kube-apiserver</code> up\nand running.  If it isn't you can check:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock ps -a\nCONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD\n8322192c4605c       bd8cc6d582470       36 seconds ago      Running             kube-proxy                4                   344c4f7fffbe8       kube-proxy-drm46\n30ce27c40adb2       81a4a8a4ac639       2 minutes ago       Exited              kube-controller-manager   4                   3a819c3a864b2       kube-controller-manager-controlplane\n7709fd5e92898       bd8cc6d582470       2 minutes ago       Exited              kube-proxy                3                   7cc6922c82015       kube-proxy-drm46\n10432b81d7c61       3767741e7fba7       2 minutes ago       Exited              kube-apiserver            4                   e64ddf3679d98       kube-apiserver-controlplane\n</code></pre>\n<p>which will show you pods that have exited. You can grab the container ID for\nkube-apiserver and read its logs:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock logs 10432b81d7c61\n</code></pre>\n<p>There are a few ways to figure out why the node isnât ready yet.  Usually I would check the\n<code>kubelet</code> logs first:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo journalctl -flu kubelet\n-- Logs begin at Sun 2022-04-17 19:22:19 AST. --\nApr 17 20:53:15 controlplane kubelet[19727]: E0417 20:53:15.951350   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\nApr 17 20:53:20 controlplane kubelet[19727]: E0417 20:53:20.952148   19727 kubelet.go:2347] <span class=\"hljs-string\">\"Container runtime network not ready\"</span> networkReady=<span class=\"hljs-string\">\"NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\"</span>\n</code></pre>\n<p>It is clear the problem is that we are missing the CNI.  The other way you can find out what is\ngoing on is describing the node:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane\n</code></pre>\n<p>This will have a lot of information but if you scroll through there looking at <code>Reason</code> you\nmight see something useful.  In this case under <code>Lease</code> you would see:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl describe node controlplane|grep NotReady\nReady            False   Sun, 17 Apr 2022 20:53:37 -0400   Sun, 17 Apr 2022 20:43:07 -0400   KubeletNotReady              container runtime network not ready: NetworkReady=<span class=\"hljs-literal\">false</span> reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialize\n</code></pre>\n<p>Lets get our CNI installed, weâll be using cilium!</p>\n<h2>Setting up your CNI!</h2>\n<p>Cilium has great documentation over <a href=\"https://docs.cilium.io/en/v1.9/gettingstarted/k8s-install-kubeadm/\">here</a>,\nbut Iâll walk you through it anyways.  I do recommend checking out their documentation so you\nare familiar with it.   We will use <code>helm</code> to pull down the version of cilium we want:</p>\n<pre><code class=\"hljs language-bash\">â¯ curl -fsSL  https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/helm.gpg\n\nâ¯ sudo apt-get install apt-transport-https --<span class=\"hljs-built_in\">yes</span>\n\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://baltocdn.com/helm/stable/debian/ all main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list\n\nâ¯ sudo apt-get update\nâ¯ sudo apt-get install helm\n</code></pre>\n<p>Now we can install cilium!  It is <em>very</em> important that you pay attention to the\ncompatibility of cilium with the version of kubernetes you are intstalling. Check\nthe compatibility list <a href=\"https://docs.cilium.io/en/v1.12/concepts/kubernetes/compatibility/\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">â¯ helm repo add cilium https://helm.cilium.io/\nâ¯ helm repo update\n</code></pre>\n<p>Once the repo is added you can list the versions available:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm search repo -l|<span class=\"hljs-built_in\">head</span> -n8\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\ncilium/cilium  \t1.12.1       \t1.12.1     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.12.0       \t1.12.0     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.8       \t1.11.8     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.7       \t1.11.7     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.6       \t1.11.6     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.5       \t1.11.5     \teBPF-based Networking, Security, and Observability\ncilium/cilium  \t1.11.4       \t1.11.4     \teBPF-based Networking, Security, and Observability\n</code></pre>\n<p>So we want <code>1.11.4</code>:</p>\n<pre><code class=\"hljs language-bash\">â¯ helm install cilium cilium/cilium --namespace kube-system --version 1.11.4\n</code></pre>\n<p>Now our node should be ready!</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get node\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   24m   v1.23.5\n</code></pre>\n<p>Time to join our worker to the cluster!</p>\n<h2>Joining a worker to the cluster!</h2>\n<p>We have to go through the same steps as the controlplane to get the point that we have a\ncontainer runtime and <code>kubeadm</code>.   Iâm not going to talk about the commands a second time but\nIâll re-iterate them here for ease of following along.</p>\n<p>First open up another shell and connect to the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ multipass shell worker\n</code></pre>\n<p>Now run the following commands:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb  http://apt.kubernetes.io/  kubernetes-xenial  main\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list\nâ¯ curl -fsSL  https://packages.cloud.google.com/apt/doc/apt-key.gpg|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg\nâ¯ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg\nâ¯ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"deb https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF</span>\n\nâ¯ sudo sed -i -e <span class=\"hljs-string\">'/net.ipv4.conf.*.rp_filter/d'</span> $(grep -ril <span class=\"hljs-string\">'\\.rp_filter'</span> /etc/sysctl.d/ /usr/lib/sysctl.d/)\nâ¯ sudo sysctl -a | grep <span class=\"hljs-string\">'\\.rp_filter'</span> | awk <span class=\"hljs-string\">'{print $1\" = 0\"}'</span> | sudo <span class=\"hljs-built_in\">tee</span> -a /etc/sysctl.d/1000-cilium.conf\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nEOF</span>\n\nâ¯ sudo systemctl restart systemd-modules-load\nâ¯ sudo sysctl --system\n\nâ¯ sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\nâ¯ sudo apt-get install containerd.io=1.6.8-1 -y\n\nâ¯ <span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C;<span class=\"hljs-string\">EOF | sudo tee /etc/containerd/config.toml\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n   [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          runtime_type = \"io.containerd.runc.v2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            SystemdCgroup = true\nEOF</span>\n\nâ¯ sudo systemctl restart containerd.service\nâ¯ sudo apt-get install kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00 -y\n\n</code></pre>\n<p>From there we should be ready to join the cluster.   When we ran <code>kubeadm init</code> previously it\nprinted a join command out that we could use but Iâm going to show you how to do it if you\nwere coming back later and no longer had that token.</p>\n<p>Back on the <em>controplane</em> node run:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubeadm token create --print-join-command\nkubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>Now copy that command and run it with <code>sudo</code> on the worker:</p>\n<pre><code class=\"hljs language-bash\">â¯ sudo kubeadm <span class=\"hljs-built_in\">join</span> 192.168.64.7:6443 --token wxs197.cco6mjj9ricvu8ov --discovery-token-ca-cert-hash sha256:bd01c065240fa76f30a02ecb70a8cea6e329c9678994d4da1f6ccac7694b97fb\n</code></pre>\n<p>After this completes itâll take a minute or two for everything to be synced up but if you go\nback to the master node you should have 2 ready nodes now:</p>\n<pre><code class=\"hljs language-bash\">â¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   46m   v1.23.5\nworker         Ready    &#x3C;none>                 79s   v1.23.5\n</code></pre>\n<h2>Accessing the cluster outside of the VMs!</h2>\n<p>Now the final part is to get the <code>admin.conf</code> as a kubeconfig on your machine so you can control\nit from outside of the cluster.   To do this we can use scp</p>\n<pre><code class=\"hljs language-bash\">multipass transfer controlplane:/home/ubuntu/.kube/config local.config\n</code></pre>\n<p>Normally kubernetes configuration is in ~/.kube/config but I like to maint a separate file for\neach cluster and then I set the <code>KUBECONFIG</code> env var to access it.</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">export</span> KUBECONFIG=local.config\nâ¯ kubectl get nodes\nNAME           STATUS   ROLES                  AGE   VERSION\ncontrolplane   Ready    control-plane,master   56m   v1.23.5\nworker         Ready    &#x3C;none>                 11m   v1.23.5\n</code></pre>","category":"Kubernetes","date":"2022-04-17T00:00:00Z","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kubeadm"},{"id":["2023","aws_from_scratch_apply_before_merge"],"path":"2023/aws_from_scratch_apply_before_merge","contentHtml":"<p>The two most popular workflows when using terraform are:</p>\n<ul>\n<li>\n<p><strong>Apply after Merge</strong>: This is the default for things like\n<a href=\"https://terraform.io\">terraform cloud</a> and most github actions.</p>\n</li>\n<li>\n<p><strong>Apply before Merge</strong>: This is the default for things like\n<a href=\"https://www.runatlantis.io/\">Atlantis</a>.</p>\n</li>\n</ul>\n<p>I don't like apply-after-merge.  There are a lot of ways where a <code>plan</code>\ncan succeed but an <code>apply</code> will fail and you end up with broken configuration\nin <code>main</code>.</p>\n<p>So in this article I'll show you how to implement <strong>apply-before-merge</strong> with\ngithub actions.</p>\n<p>If you haven't ready my <a href=\"/blog/2023/aws_from_scratch_root_account\">previous article</a>,\nit covers how to setup terraform cloud with apply after merge and bootstrap your AWS\naccount with terraform.  I will assume you have read that article going forward.</p>\n<h1>TL;DR</h1>\n<p>The code for the github actions we create in this post can be found\n<a href=\"https://github.com/sontek/aws-terraform-github-actions\">here</a></p>\n<h1>Repairing the bootstrap</h1>\n<p>With apply-before-merge we need to implement it in github actions rather than\nutilizing the terraform cloud webhooks.  So lets drop the VCS repo and usage of\nthe webhook from our github repository. Basically anything that references\n<code>github_oauth_client</code> can be removed because we will no longer be using OAuth\nwith Github for our CI/CD pipeline.</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-comment\">diff --git a/1-variables.tf b/1-variables.tf</span>\n<span class=\"hljs-comment\">index bf1f434..7109924 100644</span>\n<span class=\"hljs-comment\">--- a/1-variables.tf</span>\n<span class=\"hljs-comment\">+++ b/1-variables.tf</span>\n<span class=\"hljs-meta\">@@ -47,12 +47,6 @@</span> variable \"github_default_branch\" {\n   default     = \"main\"\n }\n \n<span class=\"hljs-deletion\">-variable \"github_oauth_client_id\" {</span>\n<span class=\"hljs-deletion\">-  description = \"The token for the TFC OAuth client shown under VCS providers\"</span>\n<span class=\"hljs-deletion\">-  type        = string</span>\n<span class=\"hljs-deletion\">-  default     = null</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n variable \"aws_root_account_id\" {\n   description = \"The AWS root account we want to apply these changes to\"\n   type        = string\n<span class=\"hljs-comment\">diff --git a/4-tfc.tf b/4-tfc.tf</span>\n<span class=\"hljs-comment\">index a8217b7..9852228 100644</span>\n<span class=\"hljs-comment\">--- a/4-tfc.tf</span>\n<span class=\"hljs-comment\">+++ b/4-tfc.tf</span>\n<span class=\"hljs-meta\">@@ -77,31 +77,12 @@</span> resource \"aws_iam_role_policy_attachment\" \"tfc-access-attach\" {\n   policy_arn = aws_iam_policy.tfc-agent.arn\n }\n \n<span class=\"hljs-deletion\">-/* Fetch an oauth token from the client */</span>\n<span class=\"hljs-deletion\">-data \"tfe_oauth_client\" \"github\" {</span>\n<span class=\"hljs-deletion\">-  /* Don't fetch the client if we don't have the client_id */</span>\n<span class=\"hljs-deletion\">-  count           = var.github_oauth_client_id != null ? 1 : 0</span>\n<span class=\"hljs-deletion\">-  oauth_client_id = var.github_oauth_client_id</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n resource \"tfe_workspace\" \"workspaces\" {\n   count        = length(var.tfc_workspaces)\n   name         = var.tfc_workspaces[count.index]\n   organization = tfe_organization.organization.name\n \n   working_directory = var.tfc_workspaces[count.index]\n<span class=\"hljs-deletion\">-</span>\n<span class=\"hljs-deletion\">-  /* This generates a webhook on the github repository so plans are triggered</span>\n<span class=\"hljs-deletion\">-  automatically.   We dynamically set the setting because we will not have the</span>\n<span class=\"hljs-deletion\">-  oauth client ID on first pass.</span>\n<span class=\"hljs-deletion\">-  */</span>\n<span class=\"hljs-deletion\">-  dynamic \"vcs_repo\" {</span>\n<span class=\"hljs-deletion\">-    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []</span>\n<span class=\"hljs-deletion\">-    content {</span>\n<span class=\"hljs-deletion\">-      identifier     = format(\"%s/%s\", var.github_organization, github_repository.repo.name)</span>\n<span class=\"hljs-deletion\">-      oauth_token_id = data.tfe_oauth_client.github[0].oauth_token_id</span>\n<span class=\"hljs-deletion\">-    }</span>\n<span class=\"hljs-deletion\">-  }</span>\n }\n \n /* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-comment\">diff --git a/settings.auto.tfvars.example b/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">index 3327f02..79221c1 100644</span>\n<span class=\"hljs-comment\">--- a/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">+++ b/settings.auto.tfvars.example</span>\n<span class=\"hljs-meta\">@@ -4,6 +4,5 @@</span> tfc_workspaces = [\n   \"root\"\n ]\n github_organization    = \"github-org\"\n<span class=\"hljs-deletion\">-github_oauth_client_id = \"oc-...\"</span>\n github_repo_name       = \"my-infra\"\n aws_root_account_id    =  \"888888888888\"\n</code></pre>\n<p>Once that is removed from your <code>infra-bootstrap</code> repository we need to create\na new github secret with a token for Github to be able to talk with TFC. Make\na new file called <code>5-github-actions.tf</code> with the following content:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_team\"</span> <span class=\"hljs-string\">\"owners\"</span> {\n  name         = <span class=\"hljs-string\">\"owners\"</span>\n  organization = tfe_organization.organization.name\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_team_token\"</span> <span class=\"hljs-string\">\"github_actions_token\"</span> {\n  team_id = <span class=\"hljs-keyword\">data</span>.tfe_team.owners.id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_actions_secret\"</span> <span class=\"hljs-string\">\"tfe_secret\"</span> {\n  repository      = github_repository.repo.name\n  secret_name     = <span class=\"hljs-string\">\"TFE_TOKEN\"</span>\n  plaintext_value = tfe_team_token.github_actions_token.token\n}\n</code></pre>\n<p>Then you should <code>plan</code> and <code>apply</code> the change:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\nâ¯ terraform apply\n</code></pre>\n<p>The only change to the infrastructure should be to remove the VCS link and\nadding the secret:</p>\n<pre><code class=\"hljs language-diff\">  # tfe_workspace.workspaces[0] will be updated in-place\n  ~ resource \"tfe_workspace\" \"workspaces\" {\n        id                            = \"ws-K1M4tdXUUeASgmUR\"\n        name                          = \"root\"\n        # (20 unchanged attributes hidden)\n\n<span class=\"hljs-deletion\">-       vcs_repo {</span>\n<span class=\"hljs-deletion\">-           identifier         = \"sontek/sontek-infra\" -> null</span>\n<span class=\"hljs-deletion\">-           ingress_submodules = false -> null</span>\n<span class=\"hljs-deletion\">-           oauth_token_id     = \"ot-nMYJRbBb2SH9zCP7\" -> null</span>\n        }\n    }\n\n  # github_actions_secret.tfe_secret will be created\n<span class=\"hljs-addition\">+   resource \"github_actions_secret\" \"tfe_secret\" {</span>\n<span class=\"hljs-addition\">+       created_at      = (known after apply)</span>\n<span class=\"hljs-addition\">+       id              = (known after apply)</span>\n<span class=\"hljs-addition\">+       plaintext_value = (sensitive value)</span>\n<span class=\"hljs-addition\">+       repository      = \"sontek-infra\"</span>\n<span class=\"hljs-addition\">+       secret_name     = \"TFE_TOKEN\"</span>\n<span class=\"hljs-addition\">+       updated_at      = (known after apply)</span>\n    }\n\n  # tfe_team_token.github_actions_token will be created\n<span class=\"hljs-addition\">+   resource \"tfe_team_token\" \"github_actions_token\" {</span>\n<span class=\"hljs-addition\">+       id      = (known after apply)</span>\n<span class=\"hljs-addition\">+       team_id = \"team-...\"</span>\n<span class=\"hljs-addition\">+       token   = (sensitive value)</span>\n    }\n</code></pre>\n<h1>Github Actions</h1>\n<p>Now we need to connect the github actions to replace the plan and apply actions\nthat were being taken by the TFC webhook previously. All of these changes will\nbe in the <code>infra</code> repository that was generated from <code>bootstrap</code>.  We are done\nwith the bootstrap at this point.</p>\n<p>First, lets setup the <code>.github</code> folder, the end result we want is:</p>\n<pre><code class=\"hljs language-bash\">.github/\nâââ workflows\n    âââ on-apply-finished.yml\n    âââ on-pull-request-labeled.yml\n    âââ on-pull-request.yml\n</code></pre>\n<p>So create the folders:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p .github/workflows\nâ¯ terraform apply\n</code></pre>\n<h1>On Pull Request</h1>\n<p>The first flow we'll create is the <code>terraform plan</code> workflow which should be\nran whenever a pull request is opened. Create the file\n<code>.github/workflows/on-pull-request.yml</code> and put this content in it:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_build</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_validate:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">validate</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-validate@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_fmt:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">fmt</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-fmt-check@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_plan:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">plan</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-plan@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This creates three jobs:</p>\n<ul>\n<li><strong>terraform_validate</strong>: This validates the terraform via <code>terraform validate</code>\ncommand to make sure that it is correct and doesn't have duplicate resources\nor anything like that.</li>\n<li><strong>terraform_fmt</strong>: This verifies that the terraform is well formatted by\nrunning the <code>terraform fmt</code> command.`</li>\n<li><strong>terraform_plan</strong>: This runs the <code>terraform</code> plan and comments on the PR a\ndiff of the changes for you to verify.</li>\n</ul>\n<p>To verify this is working, lets make a change to the infrastructure so that we\ncan see a plan executed. We can bring back the <code>SQS</code> resource we destroyed in\nthe previous article. Create a file called <code>root/2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                      = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>Lets push a branch and make a pull request to see the result so far:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add .github/ root/\nâ¯ git checkout -b apply-before-merge\nâ¯ git commit -m <span class=\"hljs-string\">\"Implemented on-pull-request\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<p>After you make the pull request you should 3 checks on it and a comment that\nshows the plan:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/github_comment.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/github_checks.png\" width=\"400\">\n</center>\n<h1>Apply on Label</h1>\n<p>So now that the plan is working we need some way to <code>apply</code> the changes. I've\nfound the best way to do this is via a label rather than a comment because of\nthe way github actions work. Their event based actions like <code>on-comment</code> aren't\nexecuted in the context of a pull-request.</p>\n<p>Since we will be using a label to signal a plan is ready to be applied lets\ncreate a new file <code>.github/workflows/on-pull-request-labeled.yml</code> and provide\nthis content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_apply</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">types:</span> [ <span class=\"hljs-string\">labeled</span> ]\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_apply:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.label.name</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'tfc-apply'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-apply@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will fire whenever a pull request is labeled with the <code>tfc-apply</code> label.\nIt will run the <code>apply</code> and update the previous plan comment to let you\nknow the status.</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying_comment.png\" width=\"400\">\n</center>\n<h1>Merge on Apply</h1>\n<p>One thing you'll notice is that the pull request stayed open even after the\ninfrastructure is applied and we don't want that. We want any changes that have\nmade it into the environment to be merged into <code>main</code> automatically. To do\nthis we'll create our final action.</p>\n<p>Create a new file <code>.github/workflows/on-apply-finished.yml</code> with this content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_merge</span>\n\n<span class=\"hljs-comment\"># Only trigger, when the build workflow succeeded</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">workflow_run:</span>\n    <span class=\"hljs-attr\">workflows:</span> [<span class=\"hljs-string\">pr_apply</span>]\n    <span class=\"hljs-attr\">types:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">completed</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">merge:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.conclusion</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'success'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">checks:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">statuses:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">actions:</span> <span class=\"hljs-string\">read</span>\n    <span class=\"hljs-attr\">outputs:</span>\n      <span class=\"hljs-attr\">pullRequestNumber:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"Get information about the current run\"</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">potiuk/get-workflow-origin@v1_5</span>\n        <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">workflow-run-info</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">sourceRunId:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.id</span> <span class=\"hljs-string\">}}</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">merge</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">request</span> <span class=\"hljs-string\">after</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">apply</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">sudo-bot/action-pull-request-merge@v1.2.0</span>\n        <span class=\"hljs-attr\">with:</span>\n            <span class=\"hljs-attr\">github-token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n            <span class=\"hljs-attr\">number:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will wait until the <code>pr_apply</code> job completes and as long as it was\nsuccessful it'll merge the branch!</p>\n<p><strong>NOTE</strong>: As I mentioned earlier, the event based actions do not run in the\ncontext of the pull request which means you cannot test changes to them during\nthe PR either.  You must merge the <code>on-apply-finished.yml</code> file to <code>main</code>\nbefore it starts working.</p>\n<h1>Branch Protection</h1>\n<p>The final step to the process is to make sure you go to your github settings\nand make sure these status checks are required before merging. Branch protection\nis a feature that will prevent merging changes into a branch unless all\nrequired checks are passing.</p>\n<p>Go to <code>Settings</code> -> <code>Branches</code> -> <code>Branch Protection</code> and add a branch\nprotection rule:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/branch_protection.png\" width=\"500\">\n</center>\n<p>You want to enable the following settings:</p>\n<ul>\n<li><strong>Branch Name</strong>: main</li>\n<li>â Require a pull request before merging</li>\n<li>â Require status checks to pass before merging</li>\n</ul>\n<p>Then for <code>Status checks that are required.</code> select all of the ones we've\ncreated:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/required_checks.png\" height=\"200\">\n</center>\n<h1>Next Steps</h1>\n<p>Now that you have the ability to manage your AWS accounts through terraform\nvia pull request the next step is to start creating infrastructure that can\ncreate real workloads.   In my next post I'll show you how to boostrap an\nEKS (Kubernetes cluster) using terraform.</p>","category":"AWS","date":"2023-04-02T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Apply before Merge with Github Actions"},{"id":["2023","aws_from_scratch_root_account"],"path":"2023/aws_from_scratch_root_account","contentHtml":"<p>Following this article will get you setup with an AWS Root account that can be\nmanaged through through Terraform Cloud with OIDC. As a best practice you\nshould not keep long-lived access keys in your CI/CD pipelines when\ndeploying to AWS, instead you should use OIDC (OpenID Connect) to securely\ndeploy to AWS when using Terraform Cloud or Github Actions.</p>\n<h1>TL;DR</h1>\n<p>Download all the source from the blog post here:</p>\n<p><a href=\"https://github.com/sontek/aws-terraform-bootstrap\">https://github.com/sontek/aws-terraform-bootstrap</a></p>\n<h1>How does OIDC work</h1>\n<p>OIDC enables us to request a short-lived access token directly from AWS. We\njust have to create trust relationship that controls which workflows are able\nto request the access tokens.</p>\n<ul>\n<li>No need to duplicate AWS credentials as long-lived GitHub secrets.</li>\n<li>Since we are using a short-lived access token that is only valid for a single\njob there is no reason to worry about rotating secrets.</li>\n</ul>\n<p>The following diagram gives an overview of how we can use Terraform Cloud's\nOIDC provider to integrate with AWS:</p>\n<div class=\"remark-mermaid remark-mermaid-default\"><svg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"-8 -8 843.078125 320\" style=\"max-width: 843.078px; background-color: transparent;\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-1680783553753\"><style>#mermaid-1680783553753{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1680783553753 .error-icon{fill:#552222;}#mermaid-1680783553753 .error-text{fill:#552222;stroke:#552222;}#mermaid-1680783553753 .edge-thickness-normal{stroke-width:2px;}#mermaid-1680783553753 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1680783553753 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1680783553753 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1680783553753 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1680783553753 .marker{fill:#333333;stroke:#333333;}#mermaid-1680783553753 .marker.cross{stroke:#333333;}#mermaid-1680783553753 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1680783553753 .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:#333;}#mermaid-1680783553753 .cluster-label text{fill:#333;}#mermaid-1680783553753 .cluster-label span{color:#333;}#mermaid-1680783553753 .label text,#mermaid-1680783553753 span{fill:#333;color:#333;}#mermaid-1680783553753 .node rect,#mermaid-1680783553753 .node circle,#mermaid-1680783553753 .node ellipse,#mermaid-1680783553753 .node polygon,#mermaid-1680783553753 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1680783553753 .node .label{text-align:center;}#mermaid-1680783553753 .node.clickable{cursor:pointer;}#mermaid-1680783553753 .arrowheadPath{fill:#333333;}#mermaid-1680783553753 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1680783553753 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1680783553753 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1680783553753 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1680783553753 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1680783553753 .cluster text{fill:#333;}#mermaid-1680783553753 .cluster span{color:#333;}#mermaid-1680783553753 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1680783553753 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-1680783553753 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"10\" viewBox=\"0 0 12 20\" class=\"marker flowchart\" id=\"flowchart-pointEnd\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\"></path></marker><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"0\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-pointStart\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleEnd\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleStart\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossEnd\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossStart\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-AWS LE-Token\" id=\"L-AWS-Token-0\" d=\"M185.671875,134.5L181.50520833333334,134.5C177.33854166666666,134.5,169.00520833333334,134.5,152.378260969764,145.875C135.75131360619469,157.25,110.83075221238937,180,98.37047151548673,191.375L85.91019081858407,202.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Token LE-Terraform\" id=\"L-Token-Terraform-0\" d=\"M85.91019081858407,235.75L98.37047151548673,247.125C110.83075221238937,258.5,135.75131360619469,281.25,164.46289638643069,292.625C193.17447916666666,304,225.67708333333334,304,258.1796875,304C290.6822916666667,304,323.1848958333333,304,359.3528645833333,304C395.5208333333333,304,435.3541666666667,304,475.1875,304C515.0208333333334,304,554.8541666666666,304,585.6956312991642,296.7916666666667C616.5370959316618,289.5833333333333,638.3866918633236,275.1666666666667,649.3114898291544,267.9583333333333L660.2362877949853,260.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Terraform LE-JWT\" id=\"L-Terraform-JWT-0\" d=\"M660.2362877949853,177.75L649.3114898291544,170.54166666666666C638.3866918633236,163.33333333333334,616.5370959316618,148.91666666666666,601.4456312991642,141.70833333333334C586.3541666666666,134.5,578.0208333333334,134.5,573.8541666666666,134.5L569.6875,134.5\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-JWT LE-AWS\" id=\"L-JWT-AWS-0\" d=\"M380.6875,134.5L376.5208333333333,134.5C372.3541666666667,134.5,364.0208333333333,134.5,355.6875,134.5C347.3541666666667,134.5,339.0208333333333,134.5,334.8541666666667,134.5L330.6875,134.5\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g transform=\"translate(621.1171875, 169.75)\" class=\"root\"><g class=\"clusters\"><g id=\"Terraform\" class=\"cluster default\"><rect height=\"83\" width=\"206.890625\" y=\"8\" x=\"-0.9296875\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(-0.9296875, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"206.890625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Terraform Cloud Workflow #2</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(102.515625, 49.5)\" id=\"flowchart-OIDCProvider-23\" class=\"node default default\"><rect height=\"33\" width=\"119.03125\" y=\"-16.5\" x=\"-59.515625\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-52.015625, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"104.03125\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Provider</span></div></foreignObject></g></g></g></g><g transform=\"translate(178.171875, -8)\" class=\"root\"><g class=\"clusters\"><g id=\"AWS\" class=\"cluster default\"><rect height=\"269\" width=\"145.015625\" y=\"8\" x=\"8\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(51.4609375, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"58.09375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">AWS #1</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(80.5078125, 59.5)\" id=\"flowchart-OIDC-20\" class=\"node default default\"><rect height=\"33\" width=\"95.015625\" y=\"-16.5\" x=\"-47.5078125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-40.0078125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"80.015625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Trust</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 142.5)\" id=\"flowchart-Roles-21\" class=\"node default default\"><rect height=\"33\" width=\"55.90625\" y=\"-16.5\" x=\"-27.953125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-20.453125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"40.90625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Roles</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 225.5)\" id=\"flowchart-Resources-22\" class=\"node default default\"><rect height=\"33\" width=\"91.484375\" y=\"-16.5\" x=\"-45.7421875\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-38.2421875, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"76.484375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Resources</span></div></foreignObject></g></g></g></g><g transform=\"translate(67.8359375, 219.25)\" id=\"flowchart-Token-25\" class=\"node default default\"><rect height=\"33\" width=\"135.671875\" y=\"-16.5\" x=\"-67.8359375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-60.3359375, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"120.671875\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Access Token #4</span></div></foreignObject></g></g><g transform=\"translate(475.1875, 134.5)\" id=\"flowchart-JWT-28\" class=\"node default default\"><rect height=\"33\" width=\"189\" y=\"-16.5\" x=\"-94.5\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-87, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"174\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">JWT &#x26; Cloud Role ID #3</span></div></foreignObject></g></g></g></g></g></svg></div>\n<ol>\n<li>In AWS, create an OIDC trust between a role and our terraform cloud\nworkflow(s) that need access to the cloud.</li>\n<li>Every time a job runs, TFC's OIDC Provider auto-generates an OIDC token.\nThis token contains multiple claims to establish a security-hardened and\nverifiable identity about the specific workflow that is trying to authenticate.</li>\n<li>Request this token from TFC's OIDC provider, and present it to AWS</li>\n<li>Once AWS successfully validates the claims presented in the token, it then\nprovides a short-lived cloud access token that is available only for the duration\nof the job.</li>\n</ol>\n<h1>What does this post accomplish</h1>\n<ul>\n<li>Setup a root AWS account that is managed througuh terraform</li>\n<li>Setup OIDC authentication with Terraform Cloud so it can talk to AWS</li>\n<li>Setup Github Actions authentication with Terraform Cloud so we can run plan\nand apply through the CI/CD pipeline.</li>\n</ul>\n<h1>Setup AWS Access</h1>\n<p>It is very bad practice to use the root account for much of anything but for\nbootstrapping the account it is necessary, so the first step is to get your\n<code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code></p>\n<p>To do this click your account and choose <code>Security Credentials</code> in the top\nright:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/security_credentials.png\" height=\"200\">\n</center>\n<p>Then choose <code>Create Access key</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/create_access_token.png\" width=\"200\">\n</center>\n<p>You need to set these environment variables in your shell so that your local\nshell has access to AWS. After you set them you can verify you set them correct\nby running:</p>\n<pre><code class=\"hljs language-bash\">â¯ aws sts get-caller-identity\n</code></pre>\n<p>and you should get a result similar to:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"UserId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"777777777777\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Account\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"888888888888\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Arn\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"arn:aws:iam::888888888888:root\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Bootstrap</h2>\n<p>Before you can manage any of your accounts through Terraform Cloud you'll need\nbootstrap some core infrastructure like OIDC so Terraform Cloud can authenticate\nsecurely and manage AWS Resources on your behalf.</p>\n<p>I personally prefer doing this in two repositories:</p>\n<ul>\n<li>\n<p><code>infra-bootstrap</code>: This repository does the bare minimum to hook up terraform\ncloud with your AWS account and stores the state in git.  Its the only infra\nthat will not be controlled by your CI/CD pipeline.</p>\n</li>\n<li>\n<p><code>infra</code>: The actual repository where all the rest of your AWS resources are\nmanaged.  It will store state in Terraform Cloud and you can introduce a\nCI/CD pipeline for approving changes.</p>\n<p><strong>Note</strong>: This repository will be generated with the terraform code.</p>\n</li>\n</ul>\n<p>After manually creating the git repository <code>infra-boostrap</code> in your Github\naccount We will need 3 providers to bootstrap the account <code>aws</code>, <code>github</code>, and\n<code>tfe</code>.</p>\n<h3>Variables</h3>\n<p>Create a <code>1-variables.tf</code> where we can define the variables we'll need\nfor creating these resources.</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_aws_audience\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"aws.workload.identity\"</span>\n  description = <span class=\"hljs-string\">\"The audience value to use in run identity tokens\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_hostname\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"app.terraform.io\"</span>\n  description = <span class=\"hljs-string\">\"The hostname of the TFC or TFE instance you'd like to use with AWS\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_project_name\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"Default Project\"</span>\n  description = <span class=\"hljs-string\">\"The project under which a workspace will be created\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_name\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The name of your Terraform Cloud organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_owner\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The owner of the TFC organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_workspaces\"</span> {\n  type        = list(string)\n  description = <span class=\"hljs-string\">\"The list of TFC workspaces\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_organization\"</span> {\n  description = <span class=\"hljs-string\">\"The organization the repositories are owned by\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_repo_name\"</span> {\n  description = <span class=\"hljs-string\">\"The name of the git reppository we'll create for managing infra\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_default_branch\"</span> {\n  description = <span class=\"hljs-string\">\"The default branch to utilize\"</span>\n  type        = string\n  default     = <span class=\"hljs-string\">\"main\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_oauth_client_id\"</span> {\n  description = <span class=\"hljs-string\">\"The token for the TFC OAuth client shown under VCS providers\"</span>\n  type        = string\n  default     = null\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"aws_root_account_id\"</span> {\n  description = <span class=\"hljs-string\">\"The AWS root account we want to apply these changes to\"</span>\n  type        = string\n}\n</code></pre>\n<p>We will use these variables in the later modules but they are mostly metadata\naround the terraform and github accounts you'll need to setup manually.</p>\n<h3>Providers</h3>\n<p>Create a file called <code>2-main.tf</code> and define the providers:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  required_providers {\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.41.0\"</span>\n    }\n\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    github = {\n      source  = <span class=\"hljs-string\">\"integrations/github\"</span>\n      version = <span class=\"hljs-string\">\"5.18.3\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  <span class=\"hljs-comment\"># Root account, all other accounts should be provisioned</span>\n  <span class=\"hljs-comment\"># via pull requests</span>\n  allowed_account_ids = [var.aws_root_account_id]\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"github\"</span> {\n  owner = var.github_organization\n}\n</code></pre>\n<p>The key things there are we define <code>allowed_account_ids</code> to prevent us from\nworking against any account that isn't the root and we are using one of the\nvariables we defines earlier.</p>\n<h3>Github</h3>\n<p>We will utilize <code>terraform</code> to create the second git repository where the rest\nof the infrastructure will go. Create a file called <code>3-github.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_repository\"</span> <span class=\"hljs-string\">\"repo\"</span> {\n  name        = var.github_repo_name\n  description = <span class=\"hljs-string\">\"Infrastructure Repository\"</span>\n  visibility  = <span class=\"hljs-string\">\"private\"</span>\n  auto_init   = true\n  has_issues  = true\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_branch_default\"</span> <span class=\"hljs-string\">\"default\"</span> {\n  repository = github_repository.repo.name\n  branch     = var.github_default_branch\n}\n\n<span class=\"hljs-keyword\">output</span> <span class=\"hljs-string\">\"repository_id\"</span> {\n  value = github_repository.repo.id\n}\n</code></pre>\n<p>This will generate a new repository in your account called <code>infra</code>.</p>\n<h3>Terraform Cloud</h3>\n<p>Now we need to setup dynamic credentials so the terraform cloud agent is\nallowed to take actions on your behalf.   To do this we'll setup an IAM\nrole and an OIDC provider. Create a file called <code>4-tfc.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_organization\"</span> <span class=\"hljs-string\">\"organization\"</span> {\n  name  = var.tfc_organization_name\n  email = var.tfc_organization_owner\n}\n\n/* AWS will use this TLS certificate to verify that requests for dynamic\ncredentials come from Terraform Cloud.*/\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tls_certificate\"</span> <span class=\"hljs-string\">\"tfc_certificate\"</span> {\n  url = <span class=\"hljs-string\">\"https://<span class=\"hljs-variable\">${var.tfc_hostname}</span>\"</span>\n}\n\n/* sets up an OIDC <span class=\"hljs-keyword\">provider</span> in AWS with Terraform Cloud's TLS certificate,\nthe SHA1 fingerprint from the TLS certificate \n*/\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_openid_connect_provider\"</span> <span class=\"hljs-string\">\"tfc_provider\"</span> {\n  url            = <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.url\n  client_id_list = [var.tfc_aws_audience]\n  thumbprint_list = [\n    <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.certificates[<span class=\"hljs-number\">0</span>].sha1_fingerprint\n  ]\n}\n\n/* Policy to allow TFC to assume the AWS IAM role in our account */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n\n    principals {\n      type        = <span class=\"hljs-string\">\"Federated\"</span>\n      identifiers = [aws_iam_openid_connect_provider.tfc_provider.arn]\n    }\n    condition {\n      test     = <span class=\"hljs-string\">\"StringEquals\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:aud\"</span>\n\n      values = [\n        <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${<span class=\"hljs-meta\">one(aws_iam_openid_connect_provider.tfc_provider.client_id_list)</span>}</span>\"</span>\n      ]\n    }\n\n    condition {\n      test     = <span class=\"hljs-string\">\"StringLike\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:sub\"</span>\n\n      values = [\n        for workspace in var.tfc_workspaces : <span class=\"hljs-string\">\"organization:<span class=\"hljs-variable\">${tfe_organization.organization.name}</span>:project:<span class=\"hljs-variable\">${var.tfc_project_name}</span>:workspace:<span class=\"hljs-variable\">${workspace}</span>:run_phase:*\"</span>\n      ]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRoleWithWebIdentity\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name               = <span class=\"hljs-string\">\"tfc-agent\"</span>\n  assume_role_policy = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.assume_role.json\n}\n\n/* Policy for what the TFC agent is allowed to do */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  version = <span class=\"hljs-string\">\"2012-10-17\"</span>\n\n  statement {\n    actions   = [<span class=\"hljs-string\">\"*\"</span>]\n    effect    = <span class=\"hljs-string\">\"Allow\"</span>\n    resources = [<span class=\"hljs-string\">\"*\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_policy\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name        = <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>\n  description = <span class=\"hljs-string\">\"Access policy for the TFC agent\"</span>\n  policy      = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.tfc-agent.json\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"hljs-string\">\"tfc-access-attach\"</span> {\n  role       = aws_iam_role.tfc-agent.name\n  policy_arn = aws_iam_policy.tfc-agent.arn\n}\n\n/* Fetch an oauth token from the client */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_oauth_client\"</span> <span class=\"hljs-string\">\"github\"</span> {\n  /* Don't fetch the client if we don't have the client_id */\n  count           = var.github_oauth_client_id != null ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n  oauth_client_id = var.github_oauth_client_id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n  count        = length(var.tfc_workspaces)\n  name         = var.tfc_workspaces[count.index]\n  organization = tfe_organization.organization.name\n\n  working_directory = var.tfc_workspaces[count.index]\n\n  /* This generates a webhook on the github repository so plans are triggered\n  automatically.   We dynamically set the setting because we will not have the\n  oauth client ID on first pass.\n  */\n  dynamic <span class=\"hljs-string\">\"vcs_repo\"</span> {\n    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []\n    content {\n      identifier     = format(<span class=\"hljs-string\">\"%s/%s\"</span>, var.github_organization, github_repository.repo.name)\n      oauth_token_id = <span class=\"hljs-keyword\">data</span>.tfe_oauth_client.github[<span class=\"hljs-number\">0</span>].oauth_token_id\n    }\n  }\n}\n\n/* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-auth\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_PROVIDER_AUTH\"</span>\n  value        = true\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Enable dynamic auth on the TFC agents\"</span>\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-role\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_RUN_ROLE_ARN\"</span>\n  value        = aws_iam_role.tfc-agent.arn\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Tell TFC what Role to run as\"</span>\n}\n</code></pre>\n<p>This module is dynamic because there is one piece that will require a\nmanul oauth setup for github.  So the first pass will apply without it\nand then later on we'll create it and run the apply again.</p>\n<h2>Applying the changes</h2>\n<p>Now we just need to define our settings for the module and we'll get our\ninfrastructure applied.  Create a file called <code>settings.auto.tfvars</code> and\npopulate it with the content for your account.  This is an example of what\nthis should look like:</p>\n<pre><code class=\"hljs language-hcl\">tfc_organization_name  = <span class=\"hljs-string\">\"sontek\"</span>\ntfc_organization_owner = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n\n<span class=\"hljs-comment\"># The workspaces you want to create and be able to manage with IaC</span>\ntfc_workspaces = [\n  <span class=\"hljs-string\">\"root\"</span>\n]\n<span class=\"hljs-comment\"># this can be your username</span>\ngithub_organization    = <span class=\"hljs-string\">\"sontek\"</span>\ngithub_repo_name       = <span class=\"hljs-string\">\"sontek-infra\"</span>\naws_root_account_id    =  <span class=\"hljs-string\">\"888888888888\"</span>\n</code></pre>\n<p>Now run:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform login\nâ¯ terraform init\n</code></pre>\n<p>and you should see:</p>\n<pre><code class=\"hljs\">Terraform has been successfully initialized!\n</code></pre>\n<p>Now lets run our plan:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> plan\n</code></pre>\n<p>You should see a result:</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Plan:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">to</span> add, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> change, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> destroy.\n</code></pre>\n<p>Apply it to make those resources:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>At this point it:</p>\n<ol>\n<li>Created a terraform cloud organization</li>\n<li>Created a terraform cloud workspace</li>\n<li>Created a git repository</li>\n</ol>\n<h1>Verify TFC can talk to AWS</h1>\n<p>To verify that TFC can communicate with AWS through the dynamic credentials,\nlets clone the repository and make some dummy resources. After you've cloned\nthe repository lets make a folder for the workspace <code>root</code> that we defined in\nbootstrap:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> root\nâ¯ <span class=\"hljs-built_in\">cd</span> root\n</code></pre>\n<p>Now create a <code>1-providers.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  cloud {\n    organization = <span class=\"hljs-string\">\"sontek\"</span>\n\n    workspaces {\n      name = <span class=\"hljs-string\">\"root\"</span>\n    }\n  }\n\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.42.0\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  default_tags {\n    tags = {\n      Owner   = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n      Env     = <span class=\"hljs-string\">\"Root\"</span>\n      Service = <span class=\"hljs-string\">\"BusinessOperations\"</span>\n    }\n  }\n}\n</code></pre>\n<p><strong>NOTE</strong>: You should replace <code>organization</code>, <code>workspaces.name</code>, and\n<code>tags.Owner</code> to be your own values.</p>\n<p>Now create a small resource to prove everything is working, we'll use SQS for\nthis. Create a file called <code>2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                        = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>If you run the plan you should see the resource it wants to create:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform init\nâ¯ terraform plan\n\n</code></pre>\n<p>and you should see the run is executing in terraform cloud:</p>\n<pre><code class=\"hljs language-arduino\">Running plan in Terraform Cloud. Output will stream here. Pressing Ctrl-C\nwill stop streaming the logs, but will <span class=\"hljs-keyword\">not</span> stop the plan running remotely.\n</code></pre>\n<p>You can click the link it provides to see the logs. Now lets apply this\nresource to see it all working:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>You should get a response like:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">Apply</span> <span class=\"hljs-string\">complete!</span> <span class=\"hljs-attr\">Resources:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">added,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">changed,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">destroyed.</span>\n</code></pre>\n<p>So Terraform Cloud has full access to create AWS resources!   The final step\nis to get github running the plan/apply on pull requests. Commit these files\nto your repository and we'll remove them in a pull request. Create a\n<code>.gitignore</code> file in the root:</p>\n<pre><code class=\"hljs language-hcl\">.<span class=\"hljs-keyword\">terraform</span>*\n</code></pre>\n<p>and commit all the files:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add *\nâ¯ git commit -m <span class=\"hljs-string\">\"initial infra\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<h1>Github VCS Provider</h1>\n<p>To setup oauth between github and terraform cloud so it can manage the webhooks\nyou need to login to the [https://app.terraform.io](Terraform Cloud Console) and\ninitiate the connection.</p>\n<p>Select the newly created organization and then click <code>Settings</code>.  In the sidebar\nthere will be a section <code>Version Control</code> and you want to select <code>Providers</code> under\nthat.</p>\n<p>At this point you should see an <code>Add a VCS Provider</code> button, you want to select\n<code>Github.com (Custom)</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_vcs_provider.png\" height=\"250\">\n</center>\n<p>Follow the on-screen instructions to create a new GitHub OAuth application on your\naccount. For me, I went to <a href=\"https://github.com/settings/applications/new\">here</a> and\nprovided the information TFC displayed:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_github_app.png\" height=\"300\">\n</center>\n<p>On the Github side you need to save the <code>Client ID</code> and you need to click\n<code>Generate a new client secret</code>.   Provide those details to terraform cloud and\nthen we should be ready to send our first PR!</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_oauth_settings.png\" height=\"300\">\n</center>\n<h2>Finish Bootstrap</h2>\n<p>At this point we need to return to the bootstrap repository and provide it the\nnew OAuth Client ID for its <code>github_oauth_client_id</code> setting.  To get the value\nfor this the easiest way is to drill into the VCS provider in terraform and click\n<code>Edit Client</code>.   In the URL you'll see the Client ID, it should start with\n<code>oc-...</code>.</p>\n<p>Now return back to the <code>bootstrap</code> repository and edit <code>settings.auto.tfvars</code> and\nset the final setting:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">github_oauth_client_id</span> = <span class=\"hljs-string\">\"oc-......\"</span>\n</code></pre>\n<p>Now you should be able to run a plan and see the <code>vcs_repo</code> get added in-place:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\n\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  <span class=\"hljs-comment\"># tfe_workspace.workspaces[0] will be updated in-place</span>\n  ~ resource <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n        <span class=\"hljs-built_in\">id</span>                            = <span class=\"hljs-string\">\"ws-...\"</span>\n        name                          = <span class=\"hljs-string\">\"root\"</span>\n        <span class=\"hljs-comment\"># (20 unchanged attributes hidden)</span>\n\n      + vcs_repo {\n          + identifier         = <span class=\"hljs-string\">\"sontek/sontek-infra\"</span>\n          + ingress_submodules = <span class=\"hljs-literal\">false</span>\n          + oauth_token_id     = <span class=\"hljs-string\">\"ot-...\"</span>\n        }\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre>\n<p>Apply the change!</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>After you apply the change, if you go to <code>Settings</code> -> <code>Webhooks</code> of the <code>infra</code>\nrepository that was created earlier you should see a new terraform cloud webhook\nwas created.</p>\n<center>\n<img src=\"/images/posts/aws_root_account/github_webhooks.png\" width=\"350\">\n</center>\n<h1>Send your first pull request</h1>\n<p>Now you should be able to send a pull request tearing down the SQS resource we\ngenerated at the beginning and terraform cloud will take care of the rest! Make\nsure you are on the generated <code>infra</code> repo and:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">rm</span> root/sqs.tf\n</code></pre>\n<p>and commit / push that to a branch and open a pull request. When you merge it\nwill apply the changes.</p>\n<h1>Next Steps</h1>\n<p>This should be good enough for you to manage your AWS cloud infrastructure as\ncode with terraform but I <strong>personally</strong> don't like that terraform cloud applies\nthe changes on merge.  There are a lot of ways where a <code>plan</code> can succeed but an\n<code>apply</code> will fail and you end up with broken configuration in <code>main</code>.</p>\n<p>I prefer a worfklow called <code>apply-before-merge</code> and in my next post I'll show you\nhow to do that through github actions instead of utilizing the TFC webhook.</p>\n<p>Check out that post <a href=\"/blog/2023/aws_from_scratch_apply_before_merge\">here</a>!</p>\n<h1>Helpful Resources</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials?product_intent=terraform\">Terraform Dynamic Credentials Tutorial</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration\">Terraform docs on Dynamic Credentials</a></li>\n<li><a href=\"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token\">Github's understanding OIDC</a></li>\n</ul>","category":"AWS","date":"2023-04-01T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Setting up your Root Account for IaC (using Terraform Cloud)"}]},"AWS":{"count":2,"posts":[{"id":["2023","aws_from_scratch_apply_before_merge"],"path":"2023/aws_from_scratch_apply_before_merge","contentHtml":"<p>The two most popular workflows when using terraform are:</p>\n<ul>\n<li>\n<p><strong>Apply after Merge</strong>: This is the default for things like\n<a href=\"https://terraform.io\">terraform cloud</a> and most github actions.</p>\n</li>\n<li>\n<p><strong>Apply before Merge</strong>: This is the default for things like\n<a href=\"https://www.runatlantis.io/\">Atlantis</a>.</p>\n</li>\n</ul>\n<p>I don't like apply-after-merge.  There are a lot of ways where a <code>plan</code>\ncan succeed but an <code>apply</code> will fail and you end up with broken configuration\nin <code>main</code>.</p>\n<p>So in this article I'll show you how to implement <strong>apply-before-merge</strong> with\ngithub actions.</p>\n<p>If you haven't ready my <a href=\"/blog/2023/aws_from_scratch_root_account\">previous article</a>,\nit covers how to setup terraform cloud with apply after merge and bootstrap your AWS\naccount with terraform.  I will assume you have read that article going forward.</p>\n<h1>TL;DR</h1>\n<p>The code for the github actions we create in this post can be found\n<a href=\"https://github.com/sontek/aws-terraform-github-actions\">here</a></p>\n<h1>Repairing the bootstrap</h1>\n<p>With apply-before-merge we need to implement it in github actions rather than\nutilizing the terraform cloud webhooks.  So lets drop the VCS repo and usage of\nthe webhook from our github repository. Basically anything that references\n<code>github_oauth_client</code> can be removed because we will no longer be using OAuth\nwith Github for our CI/CD pipeline.</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-comment\">diff --git a/1-variables.tf b/1-variables.tf</span>\n<span class=\"hljs-comment\">index bf1f434..7109924 100644</span>\n<span class=\"hljs-comment\">--- a/1-variables.tf</span>\n<span class=\"hljs-comment\">+++ b/1-variables.tf</span>\n<span class=\"hljs-meta\">@@ -47,12 +47,6 @@</span> variable \"github_default_branch\" {\n   default     = \"main\"\n }\n \n<span class=\"hljs-deletion\">-variable \"github_oauth_client_id\" {</span>\n<span class=\"hljs-deletion\">-  description = \"The token for the TFC OAuth client shown under VCS providers\"</span>\n<span class=\"hljs-deletion\">-  type        = string</span>\n<span class=\"hljs-deletion\">-  default     = null</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n variable \"aws_root_account_id\" {\n   description = \"The AWS root account we want to apply these changes to\"\n   type        = string\n<span class=\"hljs-comment\">diff --git a/4-tfc.tf b/4-tfc.tf</span>\n<span class=\"hljs-comment\">index a8217b7..9852228 100644</span>\n<span class=\"hljs-comment\">--- a/4-tfc.tf</span>\n<span class=\"hljs-comment\">+++ b/4-tfc.tf</span>\n<span class=\"hljs-meta\">@@ -77,31 +77,12 @@</span> resource \"aws_iam_role_policy_attachment\" \"tfc-access-attach\" {\n   policy_arn = aws_iam_policy.tfc-agent.arn\n }\n \n<span class=\"hljs-deletion\">-/* Fetch an oauth token from the client */</span>\n<span class=\"hljs-deletion\">-data \"tfe_oauth_client\" \"github\" {</span>\n<span class=\"hljs-deletion\">-  /* Don't fetch the client if we don't have the client_id */</span>\n<span class=\"hljs-deletion\">-  count           = var.github_oauth_client_id != null ? 1 : 0</span>\n<span class=\"hljs-deletion\">-  oauth_client_id = var.github_oauth_client_id</span>\n<span class=\"hljs-deletion\">-}</span>\n<span class=\"hljs-deletion\">-</span>\n resource \"tfe_workspace\" \"workspaces\" {\n   count        = length(var.tfc_workspaces)\n   name         = var.tfc_workspaces[count.index]\n   organization = tfe_organization.organization.name\n \n   working_directory = var.tfc_workspaces[count.index]\n<span class=\"hljs-deletion\">-</span>\n<span class=\"hljs-deletion\">-  /* This generates a webhook on the github repository so plans are triggered</span>\n<span class=\"hljs-deletion\">-  automatically.   We dynamically set the setting because we will not have the</span>\n<span class=\"hljs-deletion\">-  oauth client ID on first pass.</span>\n<span class=\"hljs-deletion\">-  */</span>\n<span class=\"hljs-deletion\">-  dynamic \"vcs_repo\" {</span>\n<span class=\"hljs-deletion\">-    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []</span>\n<span class=\"hljs-deletion\">-    content {</span>\n<span class=\"hljs-deletion\">-      identifier     = format(\"%s/%s\", var.github_organization, github_repository.repo.name)</span>\n<span class=\"hljs-deletion\">-      oauth_token_id = data.tfe_oauth_client.github[0].oauth_token_id</span>\n<span class=\"hljs-deletion\">-    }</span>\n<span class=\"hljs-deletion\">-  }</span>\n }\n \n /* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-comment\">diff --git a/settings.auto.tfvars.example b/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">index 3327f02..79221c1 100644</span>\n<span class=\"hljs-comment\">--- a/settings.auto.tfvars.example</span>\n<span class=\"hljs-comment\">+++ b/settings.auto.tfvars.example</span>\n<span class=\"hljs-meta\">@@ -4,6 +4,5 @@</span> tfc_workspaces = [\n   \"root\"\n ]\n github_organization    = \"github-org\"\n<span class=\"hljs-deletion\">-github_oauth_client_id = \"oc-...\"</span>\n github_repo_name       = \"my-infra\"\n aws_root_account_id    =  \"888888888888\"\n</code></pre>\n<p>Once that is removed from your <code>infra-bootstrap</code> repository we need to create\na new github secret with a token for Github to be able to talk with TFC. Make\na new file called <code>5-github-actions.tf</code> with the following content:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_team\"</span> <span class=\"hljs-string\">\"owners\"</span> {\n  name         = <span class=\"hljs-string\">\"owners\"</span>\n  organization = tfe_organization.organization.name\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_team_token\"</span> <span class=\"hljs-string\">\"github_actions_token\"</span> {\n  team_id = <span class=\"hljs-keyword\">data</span>.tfe_team.owners.id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_actions_secret\"</span> <span class=\"hljs-string\">\"tfe_secret\"</span> {\n  repository      = github_repository.repo.name\n  secret_name     = <span class=\"hljs-string\">\"TFE_TOKEN\"</span>\n  plaintext_value = tfe_team_token.github_actions_token.token\n}\n</code></pre>\n<p>Then you should <code>plan</code> and <code>apply</code> the change:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\nâ¯ terraform apply\n</code></pre>\n<p>The only change to the infrastructure should be to remove the VCS link and\nadding the secret:</p>\n<pre><code class=\"hljs language-diff\">  # tfe_workspace.workspaces[0] will be updated in-place\n  ~ resource \"tfe_workspace\" \"workspaces\" {\n        id                            = \"ws-K1M4tdXUUeASgmUR\"\n        name                          = \"root\"\n        # (20 unchanged attributes hidden)\n\n<span class=\"hljs-deletion\">-       vcs_repo {</span>\n<span class=\"hljs-deletion\">-           identifier         = \"sontek/sontek-infra\" -> null</span>\n<span class=\"hljs-deletion\">-           ingress_submodules = false -> null</span>\n<span class=\"hljs-deletion\">-           oauth_token_id     = \"ot-nMYJRbBb2SH9zCP7\" -> null</span>\n        }\n    }\n\n  # github_actions_secret.tfe_secret will be created\n<span class=\"hljs-addition\">+   resource \"github_actions_secret\" \"tfe_secret\" {</span>\n<span class=\"hljs-addition\">+       created_at      = (known after apply)</span>\n<span class=\"hljs-addition\">+       id              = (known after apply)</span>\n<span class=\"hljs-addition\">+       plaintext_value = (sensitive value)</span>\n<span class=\"hljs-addition\">+       repository      = \"sontek-infra\"</span>\n<span class=\"hljs-addition\">+       secret_name     = \"TFE_TOKEN\"</span>\n<span class=\"hljs-addition\">+       updated_at      = (known after apply)</span>\n    }\n\n  # tfe_team_token.github_actions_token will be created\n<span class=\"hljs-addition\">+   resource \"tfe_team_token\" \"github_actions_token\" {</span>\n<span class=\"hljs-addition\">+       id      = (known after apply)</span>\n<span class=\"hljs-addition\">+       team_id = \"team-...\"</span>\n<span class=\"hljs-addition\">+       token   = (sensitive value)</span>\n    }\n</code></pre>\n<h1>Github Actions</h1>\n<p>Now we need to connect the github actions to replace the plan and apply actions\nthat were being taken by the TFC webhook previously. All of these changes will\nbe in the <code>infra</code> repository that was generated from <code>bootstrap</code>.  We are done\nwith the bootstrap at this point.</p>\n<p>First, lets setup the <code>.github</code> folder, the end result we want is:</p>\n<pre><code class=\"hljs language-bash\">.github/\nâââ workflows\n    âââ on-apply-finished.yml\n    âââ on-pull-request-labeled.yml\n    âââ on-pull-request.yml\n</code></pre>\n<p>So create the folders:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> -p .github/workflows\nâ¯ terraform apply\n</code></pre>\n<h1>On Pull Request</h1>\n<p>The first flow we'll create is the <code>terraform plan</code> workflow which should be\nran whenever a pull request is opened. Create the file\n<code>.github/workflows/on-pull-request.yml</code> and put this content in it:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_build</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_validate:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">validate</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-validate@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_fmt:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">fmt</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-fmt-check@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n\n  <span class=\"hljs-attr\">terraform_plan:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">plan</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-plan@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This creates three jobs:</p>\n<ul>\n<li><strong>terraform_validate</strong>: This validates the terraform via <code>terraform validate</code>\ncommand to make sure that it is correct and doesn't have duplicate resources\nor anything like that.</li>\n<li><strong>terraform_fmt</strong>: This verifies that the terraform is well formatted by\nrunning the <code>terraform fmt</code> command.`</li>\n<li><strong>terraform_plan</strong>: This runs the <code>terraform</code> plan and comments on the PR a\ndiff of the changes for you to verify.</li>\n</ul>\n<p>To verify this is working, lets make a change to the infrastructure so that we\ncan see a plan executed. We can bring back the <code>SQS</code> resource we destroyed in\nthe previous article. Create a file called <code>root/2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                      = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>Lets push a branch and make a pull request to see the result so far:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add .github/ root/\nâ¯ git checkout -b apply-before-merge\nâ¯ git commit -m <span class=\"hljs-string\">\"Implemented on-pull-request\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<p>After you make the pull request you should 3 checks on it and a comment that\nshows the plan:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/github_comment.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/github_checks.png\" width=\"400\">\n</center>\n<h1>Apply on Label</h1>\n<p>So now that the plan is working we need some way to <code>apply</code> the changes. I've\nfound the best way to do this is via a label rather than a comment because of\nthe way github actions work. Their event based actions like <code>on-comment</code> aren't\nexecuted in the context of a pull-request.</p>\n<p>Since we will be using a label to signal a plan is ready to be applied lets\ncreate a new file <code>.github/workflows/on-pull-request-labeled.yml</code> and provide\nthis content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_apply</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">types:</span> [ <span class=\"hljs-string\">labeled</span> ]\n\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">TERRAFORM_CLOUD_TOKENS:</span> <span class=\"hljs-string\">app.terraform.io=${{</span> <span class=\"hljs-string\">secrets.TFE_TOKEN</span> <span class=\"hljs-string\">}}</span>\n  <span class=\"hljs-attr\">GITHUB_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform_apply:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.label.name</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'tfc-apply'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">fail-fast:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">folder:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">dflook/terraform-apply@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">workspace:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.folder</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will fire whenever a pull request is labeled with the <code>tfc-apply</code> label.\nIt will run the <code>apply</code> and update the previous plan comment to let you\nknow the status.</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying.png\" width=\"400\">\n<img src=\"/images/posts/aws_apply_before_merge/tfc_applying_comment.png\" width=\"400\">\n</center>\n<h1>Merge on Apply</h1>\n<p>One thing you'll notice is that the pull request stayed open even after the\ninfrastructure is applied and we don't want that. We want any changes that have\nmade it into the environment to be merged into <code>main</code> automatically. To do\nthis we'll create our final action.</p>\n<p>Create a new file <code>.github/workflows/on-apply-finished.yml</code> with this content:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pr_merge</span>\n\n<span class=\"hljs-comment\"># Only trigger, when the build workflow succeeded</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">workflow_run:</span>\n    <span class=\"hljs-attr\">workflows:</span> [<span class=\"hljs-string\">pr_apply</span>]\n    <span class=\"hljs-attr\">types:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">completed</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">merge:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.conclusion</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'success'</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-22.04</span>\n    <span class=\"hljs-attr\">permissions:</span>\n      <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">pull-requests:</span> <span class=\"hljs-string\">write</span>\n      <span class=\"hljs-attr\">checks:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">statuses:</span> <span class=\"hljs-string\">read</span>\n      <span class=\"hljs-attr\">actions:</span> <span class=\"hljs-string\">read</span>\n    <span class=\"hljs-attr\">outputs:</span>\n      <span class=\"hljs-attr\">pullRequestNumber:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"Get information about the current run\"</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">potiuk/get-workflow-origin@v1_5</span>\n        <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">workflow-run-info</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">sourceRunId:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.event.workflow_run.id</span> <span class=\"hljs-string\">}}</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">merge</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">request</span> <span class=\"hljs-string\">after</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">apply</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">sudo-bot/action-pull-request-merge@v1.2.0</span>\n        <span class=\"hljs-attr\">with:</span>\n            <span class=\"hljs-attr\">github-token:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GITHUB_TOKEN</span> <span class=\"hljs-string\">}}</span>\n            <span class=\"hljs-attr\">number:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">steps.workflow-run-info.outputs.pullRequestNumber</span> <span class=\"hljs-string\">}}</span>\n</code></pre>\n<p>This will wait until the <code>pr_apply</code> job completes and as long as it was\nsuccessful it'll merge the branch!</p>\n<p><strong>NOTE</strong>: As I mentioned earlier, the event based actions do not run in the\ncontext of the pull request which means you cannot test changes to them during\nthe PR either.  You must merge the <code>on-apply-finished.yml</code> file to <code>main</code>\nbefore it starts working.</p>\n<h1>Branch Protection</h1>\n<p>The final step to the process is to make sure you go to your github settings\nand make sure these status checks are required before merging. Branch protection\nis a feature that will prevent merging changes into a branch unless all\nrequired checks are passing.</p>\n<p>Go to <code>Settings</code> -> <code>Branches</code> -> <code>Branch Protection</code> and add a branch\nprotection rule:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/branch_protection.png\" width=\"500\">\n</center>\n<p>You want to enable the following settings:</p>\n<ul>\n<li><strong>Branch Name</strong>: main</li>\n<li>â Require a pull request before merging</li>\n<li>â Require status checks to pass before merging</li>\n</ul>\n<p>Then for <code>Status checks that are required.</code> select all of the ones we've\ncreated:</p>\n<center>\n<img src=\"/images/posts/aws_apply_before_merge/required_checks.png\" height=\"200\">\n</center>\n<h1>Next Steps</h1>\n<p>Now that you have the ability to manage your AWS accounts through terraform\nvia pull request the next step is to start creating infrastructure that can\ncreate real workloads.   In my next post I'll show you how to boostrap an\nEKS (Kubernetes cluster) using terraform.</p>","category":"AWS","date":"2023-04-02T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Apply before Merge with Github Actions"},{"id":["2023","aws_from_scratch_root_account"],"path":"2023/aws_from_scratch_root_account","contentHtml":"<p>Following this article will get you setup with an AWS Root account that can be\nmanaged through through Terraform Cloud with OIDC. As a best practice you\nshould not keep long-lived access keys in your CI/CD pipelines when\ndeploying to AWS, instead you should use OIDC (OpenID Connect) to securely\ndeploy to AWS when using Terraform Cloud or Github Actions.</p>\n<h1>TL;DR</h1>\n<p>Download all the source from the blog post here:</p>\n<p><a href=\"https://github.com/sontek/aws-terraform-bootstrap\">https://github.com/sontek/aws-terraform-bootstrap</a></p>\n<h1>How does OIDC work</h1>\n<p>OIDC enables us to request a short-lived access token directly from AWS. We\njust have to create trust relationship that controls which workflows are able\nto request the access tokens.</p>\n<ul>\n<li>No need to duplicate AWS credentials as long-lived GitHub secrets.</li>\n<li>Since we are using a short-lived access token that is only valid for a single\njob there is no reason to worry about rotating secrets.</li>\n</ul>\n<p>The following diagram gives an overview of how we can use Terraform Cloud's\nOIDC provider to integrate with AWS:</p>\n<div class=\"remark-mermaid remark-mermaid-default\"><svg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"-8 -8 843.078125 320\" style=\"max-width: 843.078px; background-color: transparent;\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-1680783553753\"><style>#mermaid-1680783553753{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1680783553753 .error-icon{fill:#552222;}#mermaid-1680783553753 .error-text{fill:#552222;stroke:#552222;}#mermaid-1680783553753 .edge-thickness-normal{stroke-width:2px;}#mermaid-1680783553753 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1680783553753 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1680783553753 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1680783553753 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1680783553753 .marker{fill:#333333;stroke:#333333;}#mermaid-1680783553753 .marker.cross{stroke:#333333;}#mermaid-1680783553753 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1680783553753 .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:#333;}#mermaid-1680783553753 .cluster-label text{fill:#333;}#mermaid-1680783553753 .cluster-label span{color:#333;}#mermaid-1680783553753 .label text,#mermaid-1680783553753 span{fill:#333;color:#333;}#mermaid-1680783553753 .node rect,#mermaid-1680783553753 .node circle,#mermaid-1680783553753 .node ellipse,#mermaid-1680783553753 .node polygon,#mermaid-1680783553753 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1680783553753 .node .label{text-align:center;}#mermaid-1680783553753 .node.clickable{cursor:pointer;}#mermaid-1680783553753 .arrowheadPath{fill:#333333;}#mermaid-1680783553753 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1680783553753 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1680783553753 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1680783553753 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1680783553753 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1680783553753 .cluster text{fill:#333;}#mermaid-1680783553753 .cluster span{color:#333;}#mermaid-1680783553753 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1680783553753 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-1680783553753 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"10\" viewBox=\"0 0 12 20\" class=\"marker flowchart\" id=\"flowchart-pointEnd\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\"></path></marker><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"0\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-pointStart\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleEnd\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleStart\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossEnd\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossStart\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-AWS LE-Token\" id=\"L-AWS-Token-0\" d=\"M185.671875,134.5L181.50520833333334,134.5C177.33854166666666,134.5,169.00520833333334,134.5,152.378260969764,145.875C135.75131360619469,157.25,110.83075221238937,180,98.37047151548673,191.375L85.91019081858407,202.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Token LE-Terraform\" id=\"L-Token-Terraform-0\" d=\"M85.91019081858407,235.75L98.37047151548673,247.125C110.83075221238937,258.5,135.75131360619469,281.25,164.46289638643069,292.625C193.17447916666666,304,225.67708333333334,304,258.1796875,304C290.6822916666667,304,323.1848958333333,304,359.3528645833333,304C395.5208333333333,304,435.3541666666667,304,475.1875,304C515.0208333333334,304,554.8541666666666,304,585.6956312991642,296.7916666666667C616.5370959316618,289.5833333333333,638.3866918633236,275.1666666666667,649.3114898291544,267.9583333333333L660.2362877949853,260.75\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-Terraform LE-JWT\" id=\"L-Terraform-JWT-0\" d=\"M660.2362877949853,177.75L649.3114898291544,170.54166666666666C638.3866918633236,163.33333333333334,616.5370959316618,148.91666666666666,601.4456312991642,141.70833333333334C586.3541666666666,134.5,578.0208333333334,134.5,573.8541666666666,134.5L569.6875,134.5\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-JWT LE-AWS\" id=\"L-JWT-AWS-0\" d=\"M380.6875,134.5L376.5208333333333,134.5C372.3541666666667,134.5,364.0208333333333,134.5,355.6875,134.5C347.3541666666667,134.5,339.0208333333333,134.5,334.8541666666667,134.5L330.6875,134.5\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g transform=\"translate(621.1171875, 169.75)\" class=\"root\"><g class=\"clusters\"><g id=\"Terraform\" class=\"cluster default\"><rect height=\"83\" width=\"206.890625\" y=\"8\" x=\"-0.9296875\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(-0.9296875, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"206.890625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Terraform Cloud Workflow #2</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(102.515625, 49.5)\" id=\"flowchart-OIDCProvider-23\" class=\"node default default\"><rect height=\"33\" width=\"119.03125\" y=\"-16.5\" x=\"-59.515625\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-52.015625, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"104.03125\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Provider</span></div></foreignObject></g></g></g></g><g transform=\"translate(178.171875, -8)\" class=\"root\"><g class=\"clusters\"><g id=\"AWS\" class=\"cluster default\"><rect height=\"269\" width=\"145.015625\" y=\"8\" x=\"8\" ry=\"0\" rx=\"0\" style=\"\"></rect><g transform=\"translate(51.4609375, 8)\" class=\"cluster-label\"><foreignObject height=\"18\" width=\"58.09375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">AWS #1</span></div></foreignObject></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g transform=\"translate(80.5078125, 59.5)\" id=\"flowchart-OIDC-20\" class=\"node default default\"><rect height=\"33\" width=\"95.015625\" y=\"-16.5\" x=\"-47.5078125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-40.0078125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"80.015625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">OIDC Trust</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 142.5)\" id=\"flowchart-Roles-21\" class=\"node default default\"><rect height=\"33\" width=\"55.90625\" y=\"-16.5\" x=\"-27.953125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-20.453125, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"40.90625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Roles</span></div></foreignObject></g></g><g transform=\"translate(80.5078125, 225.5)\" id=\"flowchart-Resources-22\" class=\"node default default\"><rect height=\"33\" width=\"91.484375\" y=\"-16.5\" x=\"-45.7421875\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-38.2421875, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"76.484375\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Resources</span></div></foreignObject></g></g></g></g><g transform=\"translate(67.8359375, 219.25)\" id=\"flowchart-Token-25\" class=\"node default default\"><rect height=\"33\" width=\"135.671875\" y=\"-16.5\" x=\"-67.8359375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-60.3359375, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"120.671875\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">Access Token #4</span></div></foreignObject></g></g><g transform=\"translate(475.1875, 134.5)\" id=\"flowchart-JWT-28\" class=\"node default default\"><rect height=\"33\" width=\"189\" y=\"-16.5\" x=\"-94.5\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-87, -9)\" style=\"\" class=\"label\"><foreignObject height=\"18\" width=\"174\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">JWT &#x26; Cloud Role ID #3</span></div></foreignObject></g></g></g></g></g></svg></div>\n<ol>\n<li>In AWS, create an OIDC trust between a role and our terraform cloud\nworkflow(s) that need access to the cloud.</li>\n<li>Every time a job runs, TFC's OIDC Provider auto-generates an OIDC token.\nThis token contains multiple claims to establish a security-hardened and\nverifiable identity about the specific workflow that is trying to authenticate.</li>\n<li>Request this token from TFC's OIDC provider, and present it to AWS</li>\n<li>Once AWS successfully validates the claims presented in the token, it then\nprovides a short-lived cloud access token that is available only for the duration\nof the job.</li>\n</ol>\n<h1>What does this post accomplish</h1>\n<ul>\n<li>Setup a root AWS account that is managed througuh terraform</li>\n<li>Setup OIDC authentication with Terraform Cloud so it can talk to AWS</li>\n<li>Setup Github Actions authentication with Terraform Cloud so we can run plan\nand apply through the CI/CD pipeline.</li>\n</ul>\n<h1>Setup AWS Access</h1>\n<p>It is very bad practice to use the root account for much of anything but for\nbootstrapping the account it is necessary, so the first step is to get your\n<code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code></p>\n<p>To do this click your account and choose <code>Security Credentials</code> in the top\nright:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/security_credentials.png\" height=\"200\">\n</center>\n<p>Then choose <code>Create Access key</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/create_access_token.png\" width=\"200\">\n</center>\n<p>You need to set these environment variables in your shell so that your local\nshell has access to AWS. After you set them you can verify you set them correct\nby running:</p>\n<pre><code class=\"hljs language-bash\">â¯ aws sts get-caller-identity\n</code></pre>\n<p>and you should get a result similar to:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"UserId\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"777777777777\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Account\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"888888888888\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"Arn\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"arn:aws:iam::888888888888:root\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Bootstrap</h2>\n<p>Before you can manage any of your accounts through Terraform Cloud you'll need\nbootstrap some core infrastructure like OIDC so Terraform Cloud can authenticate\nsecurely and manage AWS Resources on your behalf.</p>\n<p>I personally prefer doing this in two repositories:</p>\n<ul>\n<li>\n<p><code>infra-bootstrap</code>: This repository does the bare minimum to hook up terraform\ncloud with your AWS account and stores the state in git.  Its the only infra\nthat will not be controlled by your CI/CD pipeline.</p>\n</li>\n<li>\n<p><code>infra</code>: The actual repository where all the rest of your AWS resources are\nmanaged.  It will store state in Terraform Cloud and you can introduce a\nCI/CD pipeline for approving changes.</p>\n<p><strong>Note</strong>: This repository will be generated with the terraform code.</p>\n</li>\n</ul>\n<p>After manually creating the git repository <code>infra-boostrap</code> in your Github\naccount We will need 3 providers to bootstrap the account <code>aws</code>, <code>github</code>, and\n<code>tfe</code>.</p>\n<h3>Variables</h3>\n<p>Create a <code>1-variables.tf</code> where we can define the variables we'll need\nfor creating these resources.</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_aws_audience\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"aws.workload.identity\"</span>\n  description = <span class=\"hljs-string\">\"The audience value to use in run identity tokens\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_hostname\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"app.terraform.io\"</span>\n  description = <span class=\"hljs-string\">\"The hostname of the TFC or TFE instance you'd like to use with AWS\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_project_name\"</span> {\n  type        = string\n  default     = <span class=\"hljs-string\">\"Default Project\"</span>\n  description = <span class=\"hljs-string\">\"The project under which a workspace will be created\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_name\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The name of your Terraform Cloud organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_organization_owner\"</span> {\n  type        = string\n  description = <span class=\"hljs-string\">\"The owner of the TFC organization\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"tfc_workspaces\"</span> {\n  type        = list(string)\n  description = <span class=\"hljs-string\">\"The list of TFC workspaces\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_organization\"</span> {\n  description = <span class=\"hljs-string\">\"The organization the repositories are owned by\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_repo_name\"</span> {\n  description = <span class=\"hljs-string\">\"The name of the git reppository we'll create for managing infra\"</span>\n  type        = string\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_default_branch\"</span> {\n  description = <span class=\"hljs-string\">\"The default branch to utilize\"</span>\n  type        = string\n  default     = <span class=\"hljs-string\">\"main\"</span>\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"github_oauth_client_id\"</span> {\n  description = <span class=\"hljs-string\">\"The token for the TFC OAuth client shown under VCS providers\"</span>\n  type        = string\n  default     = null\n}\n\n<span class=\"hljs-keyword\">variable</span> <span class=\"hljs-string\">\"aws_root_account_id\"</span> {\n  description = <span class=\"hljs-string\">\"The AWS root account we want to apply these changes to\"</span>\n  type        = string\n}\n</code></pre>\n<p>We will use these variables in the later modules but they are mostly metadata\naround the terraform and github accounts you'll need to setup manually.</p>\n<h3>Providers</h3>\n<p>Create a file called <code>2-main.tf</code> and define the providers:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  required_providers {\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.41.0\"</span>\n    }\n\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    github = {\n      source  = <span class=\"hljs-string\">\"integrations/github\"</span>\n      version = <span class=\"hljs-string\">\"5.18.3\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  <span class=\"hljs-comment\"># Root account, all other accounts should be provisioned</span>\n  <span class=\"hljs-comment\"># via pull requests</span>\n  allowed_account_ids = [var.aws_root_account_id]\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"github\"</span> {\n  owner = var.github_organization\n}\n</code></pre>\n<p>The key things there are we define <code>allowed_account_ids</code> to prevent us from\nworking against any account that isn't the root and we are using one of the\nvariables we defines earlier.</p>\n<h3>Github</h3>\n<p>We will utilize <code>terraform</code> to create the second git repository where the rest\nof the infrastructure will go. Create a file called <code>3-github.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_repository\"</span> <span class=\"hljs-string\">\"repo\"</span> {\n  name        = var.github_repo_name\n  description = <span class=\"hljs-string\">\"Infrastructure Repository\"</span>\n  visibility  = <span class=\"hljs-string\">\"private\"</span>\n  auto_init   = true\n  has_issues  = true\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"github_branch_default\"</span> <span class=\"hljs-string\">\"default\"</span> {\n  repository = github_repository.repo.name\n  branch     = var.github_default_branch\n}\n\n<span class=\"hljs-keyword\">output</span> <span class=\"hljs-string\">\"repository_id\"</span> {\n  value = github_repository.repo.id\n}\n</code></pre>\n<p>This will generate a new repository in your account called <code>infra</code>.</p>\n<h3>Terraform Cloud</h3>\n<p>Now we need to setup dynamic credentials so the terraform cloud agent is\nallowed to take actions on your behalf.   To do this we'll setup an IAM\nrole and an OIDC provider. Create a file called <code>4-tfc.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_organization\"</span> <span class=\"hljs-string\">\"organization\"</span> {\n  name  = var.tfc_organization_name\n  email = var.tfc_organization_owner\n}\n\n/* AWS will use this TLS certificate to verify that requests for dynamic\ncredentials come from Terraform Cloud.*/\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tls_certificate\"</span> <span class=\"hljs-string\">\"tfc_certificate\"</span> {\n  url = <span class=\"hljs-string\">\"https://<span class=\"hljs-variable\">${var.tfc_hostname}</span>\"</span>\n}\n\n/* sets up an OIDC <span class=\"hljs-keyword\">provider</span> in AWS with Terraform Cloud's TLS certificate,\nthe SHA1 fingerprint from the TLS certificate \n*/\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_openid_connect_provider\"</span> <span class=\"hljs-string\">\"tfc_provider\"</span> {\n  url            = <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.url\n  client_id_list = [var.tfc_aws_audience]\n  thumbprint_list = [\n    <span class=\"hljs-keyword\">data</span>.tls_certificate.tfc_certificate.certificates[<span class=\"hljs-number\">0</span>].sha1_fingerprint\n  ]\n}\n\n/* Policy to allow TFC to assume the AWS IAM role in our account */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n\n    principals {\n      type        = <span class=\"hljs-string\">\"Federated\"</span>\n      identifiers = [aws_iam_openid_connect_provider.tfc_provider.arn]\n    }\n    condition {\n      test     = <span class=\"hljs-string\">\"StringEquals\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:aud\"</span>\n\n      values = [\n        <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${<span class=\"hljs-meta\">one(aws_iam_openid_connect_provider.tfc_provider.client_id_list)</span>}</span>\"</span>\n      ]\n    }\n\n    condition {\n      test     = <span class=\"hljs-string\">\"StringLike\"</span>\n      <span class=\"hljs-keyword\">variable</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${var.tfc_hostname}</span>:sub\"</span>\n\n      values = [\n        for workspace in var.tfc_workspaces : <span class=\"hljs-string\">\"organization:<span class=\"hljs-variable\">${tfe_organization.organization.name}</span>:project:<span class=\"hljs-variable\">${var.tfc_project_name}</span>:workspace:<span class=\"hljs-variable\">${workspace}</span>:run_phase:*\"</span>\n      ]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRoleWithWebIdentity\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name               = <span class=\"hljs-string\">\"tfc-agent\"</span>\n  assume_role_policy = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.assume_role.json\n}\n\n/* Policy for what the TFC agent is allowed to do */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  version = <span class=\"hljs-string\">\"2012-10-17\"</span>\n\n  statement {\n    actions   = [<span class=\"hljs-string\">\"*\"</span>]\n    effect    = <span class=\"hljs-string\">\"Allow\"</span>\n    resources = [<span class=\"hljs-string\">\"*\"</span>]\n  }\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_policy\"</span> <span class=\"hljs-string\">\"tfc-agent\"</span> {\n  name        = <span class=\"hljs-string\">\"tfc-agent-access-policy\"</span>\n  description = <span class=\"hljs-string\">\"Access policy for the TFC agent\"</span>\n  policy      = <span class=\"hljs-keyword\">data</span>.aws_iam_policy_document.tfc-agent.json\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"hljs-string\">\"tfc-access-attach\"</span> {\n  role       = aws_iam_role.tfc-agent.name\n  policy_arn = aws_iam_policy.tfc-agent.arn\n}\n\n/* Fetch an oauth token from the client */\n<span class=\"hljs-keyword\">data</span> <span class=\"hljs-string\">\"tfe_oauth_client\"</span> <span class=\"hljs-string\">\"github\"</span> {\n  /* Don't fetch the client if we don't have the client_id */\n  count           = var.github_oauth_client_id != null ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n  oauth_client_id = var.github_oauth_client_id\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n  count        = length(var.tfc_workspaces)\n  name         = var.tfc_workspaces[count.index]\n  organization = tfe_organization.organization.name\n\n  working_directory = var.tfc_workspaces[count.index]\n\n  /* This generates a webhook on the github repository so plans are triggered\n  automatically.   We dynamically set the setting because we will not have the\n  oauth client ID on first pass.\n  */\n  dynamic <span class=\"hljs-string\">\"vcs_repo\"</span> {\n    for_each = var.github_oauth_client_id != null ? [var.github_oauth_client_id] : []\n    content {\n      identifier     = format(<span class=\"hljs-string\">\"%s/%s\"</span>, var.github_organization, github_repository.repo.name)\n      oauth_token_id = <span class=\"hljs-keyword\">data</span>.tfe_oauth_client.github[<span class=\"hljs-number\">0</span>].oauth_token_id\n    }\n  }\n}\n\n/* These variables tell the agent to use dynamic credentials */\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-auth\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_PROVIDER_AUTH\"</span>\n  value        = true\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Enable dynamic auth on the TFC agents\"</span>\n}\n\n<span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"tfe_variable\"</span> <span class=\"hljs-string\">\"tfc-role\"</span> {\n  count        = length(var.tfc_workspaces)\n  key          = <span class=\"hljs-string\">\"TFC_AWS_RUN_ROLE_ARN\"</span>\n  value        = aws_iam_role.tfc-agent.arn\n  category     = <span class=\"hljs-string\">\"env\"</span>\n  workspace_id = tfe_workspace.workspaces[count.index].id\n  description  = <span class=\"hljs-string\">\"Tell TFC what Role to run as\"</span>\n}\n</code></pre>\n<p>This module is dynamic because there is one piece that will require a\nmanul oauth setup for github.  So the first pass will apply without it\nand then later on we'll create it and run the apply again.</p>\n<h2>Applying the changes</h2>\n<p>Now we just need to define our settings for the module and we'll get our\ninfrastructure applied.  Create a file called <code>settings.auto.tfvars</code> and\npopulate it with the content for your account.  This is an example of what\nthis should look like:</p>\n<pre><code class=\"hljs language-hcl\">tfc_organization_name  = <span class=\"hljs-string\">\"sontek\"</span>\ntfc_organization_owner = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n\n<span class=\"hljs-comment\"># The workspaces you want to create and be able to manage with IaC</span>\ntfc_workspaces = [\n  <span class=\"hljs-string\">\"root\"</span>\n]\n<span class=\"hljs-comment\"># this can be your username</span>\ngithub_organization    = <span class=\"hljs-string\">\"sontek\"</span>\ngithub_repo_name       = <span class=\"hljs-string\">\"sontek-infra\"</span>\naws_root_account_id    =  <span class=\"hljs-string\">\"888888888888\"</span>\n</code></pre>\n<p>Now run:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform login\nâ¯ terraform init\n</code></pre>\n<p>and you should see:</p>\n<pre><code class=\"hljs\">Terraform has been successfully initialized!\n</code></pre>\n<p>Now lets run our plan:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> plan\n</code></pre>\n<p>You should see a result:</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Plan:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">to</span> add, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> change, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> destroy.\n</code></pre>\n<p>Apply it to make those resources:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>At this point it:</p>\n<ol>\n<li>Created a terraform cloud organization</li>\n<li>Created a terraform cloud workspace</li>\n<li>Created a git repository</li>\n</ol>\n<h1>Verify TFC can talk to AWS</h1>\n<p>To verify that TFC can communicate with AWS through the dynamic credentials,\nlets clone the repository and make some dummy resources. After you've cloned\nthe repository lets make a folder for the workspace <code>root</code> that we defined in\nbootstrap:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">mkdir</span> root\nâ¯ <span class=\"hljs-built_in\">cd</span> root\n</code></pre>\n<p>Now create a <code>1-providers.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">terraform</span> {\n  cloud {\n    organization = <span class=\"hljs-string\">\"sontek\"</span>\n\n    workspaces {\n      name = <span class=\"hljs-string\">\"root\"</span>\n    }\n  }\n\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"4.58.0\"</span>\n    }\n\n    tfe = {\n      source  = <span class=\"hljs-string\">\"hashicorp/tfe\"</span>\n      version = <span class=\"hljs-string\">\"0.42.0\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">provider</span> <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n\n  default_tags {\n    tags = {\n      Owner   = <span class=\"hljs-string\">\"john@sontek.net\"</span>\n      Env     = <span class=\"hljs-string\">\"Root\"</span>\n      Service = <span class=\"hljs-string\">\"BusinessOperations\"</span>\n    }\n  }\n}\n</code></pre>\n<p><strong>NOTE</strong>: You should replace <code>organization</code>, <code>workspaces.name</code>, and\n<code>tags.Owner</code> to be your own values.</p>\n<p>Now create a small resource to prove everything is working, we'll use SQS for\nthis. Create a file called <code>2-sqs.tf</code>:</p>\n<pre><code class=\"hljs language-hcl\"><span class=\"hljs-keyword\">resource</span> <span class=\"hljs-string\">\"aws_sqs_queue\"</span> <span class=\"hljs-string\">\"example-sqs\"</span> {\n  name                        = <span class=\"hljs-string\">\"example-sqs\"</span>\n  message_retention_seconds = <span class=\"hljs-number\">86400</span>\n  receive_wait_time_seconds = <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>If you run the plan you should see the resource it wants to create:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform init\nâ¯ terraform plan\n\n</code></pre>\n<p>and you should see the run is executing in terraform cloud:</p>\n<pre><code class=\"hljs language-arduino\">Running plan in Terraform Cloud. Output will stream here. Pressing Ctrl-C\nwill stop streaming the logs, but will <span class=\"hljs-keyword\">not</span> stop the plan running remotely.\n</code></pre>\n<p>You can click the link it provides to see the logs. Now lets apply this\nresource to see it all working:</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>You should get a response like:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">Apply</span> <span class=\"hljs-string\">complete!</span> <span class=\"hljs-attr\">Resources:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">added,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">changed,</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">destroyed.</span>\n</code></pre>\n<p>So Terraform Cloud has full access to create AWS resources!   The final step\nis to get github running the plan/apply on pull requests. Commit these files\nto your repository and we'll remove them in a pull request. Create a\n<code>.gitignore</code> file in the root:</p>\n<pre><code class=\"hljs language-hcl\">.<span class=\"hljs-keyword\">terraform</span>*\n</code></pre>\n<p>and commit all the files:</p>\n<pre><code class=\"hljs language-bash\">â¯ git add *\nâ¯ git commit -m <span class=\"hljs-string\">\"initial infra\"</span>\nâ¯ git push origin <span class=\"hljs-built_in\">head</span>\n</code></pre>\n<h1>Github VCS Provider</h1>\n<p>To setup oauth between github and terraform cloud so it can manage the webhooks\nyou need to login to the [https://app.terraform.io](Terraform Cloud Console) and\ninitiate the connection.</p>\n<p>Select the newly created organization and then click <code>Settings</code>.  In the sidebar\nthere will be a section <code>Version Control</code> and you want to select <code>Providers</code> under\nthat.</p>\n<p>At this point you should see an <code>Add a VCS Provider</code> button, you want to select\n<code>Github.com (Custom)</code>:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_vcs_provider.png\" height=\"250\">\n</center>\n<p>Follow the on-screen instructions to create a new GitHub OAuth application on your\naccount. For me, I went to <a href=\"https://github.com/settings/applications/new\">here</a> and\nprovided the information TFC displayed:</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_github_app.png\" height=\"300\">\n</center>\n<p>On the Github side you need to save the <code>Client ID</code> and you need to click\n<code>Generate a new client secret</code>.   Provide those details to terraform cloud and\nthen we should be ready to send our first PR!</p>\n<center>\n<img src=\"/images/posts/aws_root_account/tfc_oauth_settings.png\" height=\"300\">\n</center>\n<h2>Finish Bootstrap</h2>\n<p>At this point we need to return to the bootstrap repository and provide it the\nnew OAuth Client ID for its <code>github_oauth_client_id</code> setting.  To get the value\nfor this the easiest way is to drill into the VCS provider in terraform and click\n<code>Edit Client</code>.   In the URL you'll see the Client ID, it should start with\n<code>oc-...</code>.</p>\n<p>Now return back to the <code>bootstrap</code> repository and edit <code>settings.auto.tfvars</code> and\nset the final setting:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">github_oauth_client_id</span> = <span class=\"hljs-string\">\"oc-......\"</span>\n</code></pre>\n<p>Now you should be able to run a plan and see the <code>vcs_repo</code> get added in-place:</p>\n<pre><code class=\"hljs language-bash\">â¯ terraform plan\n\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  <span class=\"hljs-comment\"># tfe_workspace.workspaces[0] will be updated in-place</span>\n  ~ resource <span class=\"hljs-string\">\"tfe_workspace\"</span> <span class=\"hljs-string\">\"workspaces\"</span> {\n        <span class=\"hljs-built_in\">id</span>                            = <span class=\"hljs-string\">\"ws-...\"</span>\n        name                          = <span class=\"hljs-string\">\"root\"</span>\n        <span class=\"hljs-comment\"># (20 unchanged attributes hidden)</span>\n\n      + vcs_repo {\n          + identifier         = <span class=\"hljs-string\">\"sontek/sontek-infra\"</span>\n          + ingress_submodules = <span class=\"hljs-literal\">false</span>\n          + oauth_token_id     = <span class=\"hljs-string\">\"ot-...\"</span>\n        }\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre>\n<p>Apply the change!</p>\n<pre><code class=\"hljs language-hcl\">â¯ <span class=\"hljs-keyword\">terraform</span> apply\n</code></pre>\n<p>After you apply the change, if you go to <code>Settings</code> -> <code>Webhooks</code> of the <code>infra</code>\nrepository that was created earlier you should see a new terraform cloud webhook\nwas created.</p>\n<center>\n<img src=\"/images/posts/aws_root_account/github_webhooks.png\" width=\"350\">\n</center>\n<h1>Send your first pull request</h1>\n<p>Now you should be able to send a pull request tearing down the SQS resource we\ngenerated at the beginning and terraform cloud will take care of the rest! Make\nsure you are on the generated <code>infra</code> repo and:</p>\n<pre><code class=\"hljs language-bash\">â¯ <span class=\"hljs-built_in\">rm</span> root/sqs.tf\n</code></pre>\n<p>and commit / push that to a branch and open a pull request. When you merge it\nwill apply the changes.</p>\n<h1>Next Steps</h1>\n<p>This should be good enough for you to manage your AWS cloud infrastructure as\ncode with terraform but I <strong>personally</strong> don't like that terraform cloud applies\nthe changes on merge.  There are a lot of ways where a <code>plan</code> can succeed but an\n<code>apply</code> will fail and you end up with broken configuration in <code>main</code>.</p>\n<p>I prefer a worfklow called <code>apply-before-merge</code> and in my next post I'll show you\nhow to do that through github actions instead of utilizing the TFC webhook.</p>\n<p>Check out that post <a href=\"/blog/2023/aws_from_scratch_apply_before_merge\">here</a>!</p>\n<h1>Helpful Resources</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials?product_intent=terraform\">Terraform Dynamic Credentials Tutorial</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/aws-configuration\">Terraform docs on Dynamic Credentials</a></li>\n<li><a href=\"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token\">Github's understanding OIDC</a></li>\n</ul>","category":"AWS","date":"2023-04-01T00:00:00Z","tags":["AWS","DevOps","SRE"],"title":"AWS From Scratch with Terraform - Setting up your Root Account for IaC (using Terraform Cloud)"}]},"Interviews":{"count":2,"posts":[{"id":["old","caesar_cipher_in_python"],"path":"old/caesar_cipher_in_python","contentHtml":"<p>I'm currently teaching my wife to code and one of the problems that we\nworked on to teach her some fundamental programming concepts was\nre-implementing the caesar cipher in python. It was fun not only to code\nbut to also start sending each other \"secret\" messages!</p>\n<p>The caesar cipher is a rather simple encoding, you just shift the\nalphabet a certain amount of characters. For example, if you are using a\nshift of 2:</p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">a</span> => c\n<span class=\"hljs-attr\">b</span> => d\n<span class=\"hljs-attr\">y</span> => a\n<span class=\"hljs-attr\">z</span> => b\n</code></pre>\n<p>Using this as an interview type question would provide a few interesting\nproblems and give you a good perspective on how good a developers\nproblem solving skills are and how knowledgeable they are in the\nlanguage of their choice.</p>\n<p>The first issue is to handle the beginning and end of the alphabet, if\nyou are encoding 'z' then you will have to start your shift on a. The\nsecond problem is to only encode letters since there was no ascii table\nto define in what order characters are shifted back in those times.</p>\n<p>Without using too much of the built in python niceties you could do\nsomething similar to this:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!/usr/bin/python</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode_shift_letter</span>(<span class=\"hljs-params\">current_ord, start, end, shift</span>):\n    <span class=\"hljs-keyword\">if</span> current_ord - shift &#x3C; start:\n        new_ord = (current_ord + <span class=\"hljs-number\">26</span>) - shift\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(new_ord)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(current_ord-shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode_shift_letter</span>(<span class=\"hljs-params\">current_ord, start, end, shift</span>):\n    <span class=\"hljs-keyword\">if</span> current_ord + shift > end:\n        new_ord = (current_ord - <span class=\"hljs-number\">26</span>) + shift\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(new_ord)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">chr</span>(current_ord+shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift, decode_shift_letter)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift, encode_shift_letter)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modify_input</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift, shift_letter</span>):\n    new_sentence = <span class=\"hljs-string\">''</span>\n\n    <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>:\n        <span class=\"hljs-comment\"># we only encode letters, random characters like +!%$ are not encoded.</span>\n        <span class=\"hljs-comment\"># Lower and Capital letters are not stored near each other on the</span>\n        <span class=\"hljs-comment\"># ascii table</span>\n        lower_start = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'a'</span>)\n        lower_end = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'z'</span>)\n        upper_start = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'A'</span>)\n        upper_end = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'Z'</span>)\n        current_ord = <span class=\"hljs-built_in\">ord</span>(letter)\n\n        <span class=\"hljs-keyword\">if</span> current_ord >= lower_start <span class=\"hljs-keyword\">and</span> current_ord &#x3C;= lower_end:\n            new_sentence += shift_letter(current_ord, lower_start, lower_end, shift)\n        <span class=\"hljs-keyword\">elif</span> current_ord >= upper_start <span class=\"hljs-keyword\">and</span> current_ord &#x3C;= upper_end:\n            new_sentence += shift_letter(current_ord, upper_start, upper_end, shift)\n        <span class=\"hljs-keyword\">else</span>:\n            new_sentence += letter\n\n    <span class=\"hljs-keyword\">return</span> new_sentence\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_shift</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        shift = <span class=\"hljs-built_in\">int</span>(raw_input(<span class=\"hljs-string\">'What shift would you like to use?\\n'</span>))\n    <span class=\"hljs-keyword\">except</span> ValueError:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Shift must be a number'</span>\n        shift = get_shift()\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (shift > <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> shift &#x3C;= <span class=\"hljs-number\">25</span>):\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Shift must be between 1 and 25'</span>\n        shift = get_shift()\n\n    <span class=\"hljs-keyword\">return</span> shift\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        task = <span class=\"hljs-built_in\">int</span>(raw_input(<span class=\"hljs-string\">'1) Encode \\n'</span>+ \\\n                             <span class=\"hljs-string\">'2) Decode \\n'</span>))\n    <span class=\"hljs-keyword\">except</span> ValueError:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'Invalid task, try again!'</span>\n        main()\n\n    shift = get_shift()\n    <span class=\"hljs-built_in\">input</span> = raw_input(<span class=\"hljs-string\">'What message would you like to %s\\n'</span> % (<span class=\"hljs-string\">'Encode'</span> <span class=\"hljs-keyword\">if</span> task == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'Decode'</span>))\n\n    <span class=\"hljs-keyword\">if</span> task == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span> encode(<span class=\"hljs-built_in\">input</span>, shift)\n    <span class=\"hljs-keyword\">elif</span> task == <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-built_in\">print</span> decode(<span class=\"hljs-built_in\">input</span>, shift)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n<p>This would prove that you are a decent problem solver and have enough of\nthe language to get things done but if you want to prove you have\nmastered the python language you might take advantage of some slicing\nand some methods out of the string module and change your code to look\nsomething like:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> letters, maketrans\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, -shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    <span class=\"hljs-keyword\">return</span> modify_input(<span class=\"hljs-built_in\">input</span>, shift)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modify_input</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, shift</span>):\n    trans = maketrans(letters, letters[shift:] + letters[:shift])\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">input</span>.translate(trans)\n</code></pre>\n<p>Do get more information on string.letters and string.maketrans you can\nvisit their documentation\n[here](<a href=\"http://docs.python.org/library/string.html\">http://docs.python.org/library/string.html</a>)</p>","category":"Development","date":"2010-11-15T00:00:00Z","tags":["Python","Interviews"],"title":"Caesar Cipher in Python"},{"id":["old","convert_a_string_to_an_integer_in_python"],"path":"old/convert_a_string_to_an_integer_in_python","contentHtml":"<p>A fun interview question some developers like to ask is to have you\nconvert ascii characters to an integer without using built in methods\nlike string.atoi or int().</p>\n<p>So using python the obvious ways to convert a string to an integer are\nthese:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">int</span>(<span class=\"hljs-string\">'1234'</span>)\n<span class=\"hljs-number\">1234</span>\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> string\n<span class=\"hljs-meta\">>>> </span>string.atoi(<span class=\"hljs-string\">'1234'</span>)\n<span class=\"hljs-number\">1234</span>\n</code></pre>\n<p>The interesting thing here is finding out where on the ascii character\ntable the number is. Luckily python has this already built in with the\nord method:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">help</span>(<span class=\"hljs-built_in\">ord</span>)\n\n<span class=\"hljs-built_in\">ord</span>(...)\n    <span class=\"hljs-built_in\">ord</span>(c) -> integer\n\n    Return the integer ordinal of a one-character string.\n\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'1'</span>)\n<span class=\"hljs-number\">49</span>\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'2'</span>)\n<span class=\"hljs-number\">50</span>\n</code></pre>\n<p>You can see that the numbers are grouped together on the ascii table, so\nyou just have to grab '0' as the base and subtract the rest:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'1'</span>)-<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>So if we have the string '1234', we can get each of the individual\nnumbers by looping over it:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span>num_string = <span class=\"hljs-string\">'1234'</span>\n<span class=\"hljs-meta\">>>> </span>num_list = []\n<span class=\"hljs-meta\">>>> </span>base = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> num_string:\n<span class=\"hljs-meta\">... </span>  num_list.append(<span class=\"hljs-built_in\">ord</span>(num) - base)\n...\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">print</span> num_list\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>but now how to we combine all these together to get 1234? You can't\njust add them up because you'll just get 1+2+3+4 = 10.</p>\n<p>So, we have to get 1000 + 200 + 30 + 4, which is a simple problem to\nsolve. Its just number times 10 to the nth power, so the final solution\nis:</p>\n<pre><code class=\"hljs language-python\">num = <span class=\"hljs-string\">'1234'</span>\nnew_num = <span class=\"hljs-number\">0</span>\nbase = <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)\n\n<span class=\"hljs-keyword\">for</span> i,n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">reversed</span>(num)):\n      new_num += (<span class=\"hljs-built_in\">ord</span>(n) - base) * (<span class=\"hljs-number\">10</span>**i)\n\n<span class=\"hljs-built_in\">print</span> new_num\n</code></pre>\n<p>This code is a little verbose though, lets make it a dirty nasty one\nliner!</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-built_in\">sum</span>([(<span class=\"hljs-built_in\">ord</span>(n)-<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">'0'</span>)) * (<span class=\"hljs-number\">10</span> ** i) <span class=\"hljs-keyword\">for</span> i,n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-string\">'1234'</span>))])\n<span class=\"hljs-number\">1234</span>\n</code></pre>","category":"Development","date":"2010-10-28T00:00:00Z","tags":["Python","Interviews"],"title":"Convert a string to an integer in Python"}]},"Vim":{"count":1,"posts":[{"id":["old","turning_vim_into_a_modern_python_ide"],"path":"old/turning_vim_into_a_modern_python_ide","contentHtml":"<p>TL;DR:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sontek/dotfiles.git</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> dotfiles</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">./install.sh vim</span>\n</code></pre>\n<h1>Intro</h1>\n<p>Back in 2008, I wrote the article <a href=\"http://sontek.net/python-with-a-modular-ide-vim\">Python with a modular IDE\n(Vim)</a>. Years later, I\nhave people e-mailing me and commenting daily asking for more\ninformation, even though most of the information in it is outdated. Here\nis the modern way to work with Python and Vim to achieve the perfect\nenvironment.</p>\n<p>Because one of the most important parts about a development environment\nis the ability to easily reproduce across machines, we are going to\nstore our vim configuration in git:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/{<span class=\"hljs-built_in\">autoload</span>,bundle}</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> ~/.vim/</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">git init</span>\n</code></pre>\n<p>The purpose of the autoload directory is to automatically load the vim\nplugin <a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a>, which we'll\nthen use to load all other plugins that are located in the bundle\ndirectory. So download pathogen and put it in your autoload folder.</p>\n<p>You'll need to add the following to your ~/.vimrc so that pathogen\nwill be loaded properly. Filetype detection must be off when you run the\ncommands so its best to execute them first:</p>\n<pre><code class=\"hljs language-r\">filetype off\n<span class=\"hljs-built_in\">call</span> pathogen<span class=\"hljs-comment\">#runtime_append_all_bundles()</span>\n<span class=\"hljs-built_in\">call</span> pathogen<span class=\"hljs-comment\">#helptags()</span>\n</code></pre>\n<p>Now lets add all of the vim plugins we plan on using as submodules to\nour git repository:</p>\n<pre><code class=\"hljs language-bash\">git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive\ngit submodule add https://github.com/msanders/snipmate.vim.git bundle/snipmate\ngit submodule add https://github.com/tpope/vim-surround.git bundle/surround\ngit submodule add https://github.com/tpope/vim-git.git bundle/git\ngit submodule add https://github.com/ervandew/supertab.git bundle/supertab\ngit submodule add https://github.com/sontek/minibufexpl.vim.git bundle/minibufexpl\ngit submodule add https://github.com/wincent/Command-T.git bundle/command-t\ngit submodule add https://github.com/mitechie/pyflakes-pathogen.git\ngit submodule add https://github.com/mileszs/ack.vim.git bundle/ack\ngit submodule add https://github.com/sjl/gundo.vim.git bundle/gundo\ngit submodule add https://github.com/fs111/pydoc.vim.git bundle/pydoc\ngit submodule add https://github.com/vim-scripts/pep8.git bundle/pep8\ngit submodule add https://github.com/alfredodeza/pytest.vim.git bundle/py.test\ngit submodule add https://github.com/reinh/vim-makegreen bundle/makegreen\ngit submodule add https://github.com/vim-scripts/TaskList.vim.git bundle/tasklist\ngit submodule add https://github.com/vim-scripts/The-NERD-tree.git bundle/nerdtree\ngit submodule add https://github.com/sontek/rope-vim.git bundle/ropevim\ngit submodule init\ngit submodule update\ngit submodule foreach git submodule init\ngit submodule foreach git submodule update\n</code></pre>\n<p>Thats it! Now that we've got our vim configuration in git!</p>\n<p>Now lets look at how to use each of these plugins to improve the power\nof vim:</p>\n<h1>Basic Editing and Debugging</h1>\n<h2>Code Folding</h2>\n<p>Lets first enable code folding. This makes it a lot easier to organize\nyour code and hide portions that you aren't interested in working on.\nThis is quite easy for Python, since whitespace is required.</p>\n<p>In your ~/.vimrc just add:</p>\n<pre><code class=\"hljs language-ini\">set <span class=\"hljs-attr\">foldmethod</span>=indent\nset <span class=\"hljs-attr\">foldlevel</span>=<span class=\"hljs-number\">99</span>\n</code></pre>\n<p>Then you will be able to be inside a method and type 'za' to open and\nclose a fold.</p>\n<h2>Window Splits</h2>\n<p>Sometimes code folding isn't enough; you may need to start opening up\nmultiple windows and working on multiple files at once or different\nlocations within the same file. To do this in vim, you can use these\nshortcuts:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">Vertical Split :</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">v</span>\n<span class=\"hljs-attr\">Horizontal Split:</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">s</span>\n<span class=\"hljs-attr\">Close current windows:</span> <span class=\"hljs-string\">Ctrl+w</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">q</span>\n</code></pre>\n<p>I also like to bind Ctrl+&#x3C;movement> keys to move around the windows,\ninstead of using Ctrl+w + &#x3C;movement>:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;c-j> &#x3C;c-w>j\nmap &#x3C;c-k> &#x3C;c-w>k\nmap &#x3C;c-l> &#x3C;c-w>l\nmap &#x3C;c-h> &#x3C;c-w>h\n</code></pre>\n<p><img src=\"http://i.imgur.com/krj0l.png\" alt=\"image\"></p>\n<h2>Snippets</h2>\n<p>The next tweak that really speeds up development is using snipmate.\nWe've already included it in our bundle/ folder so its already enabled.\nTry opening up a python file and typing 'def&#x3C;tab>'. It should stub\nout a method definition for you and allow you to tab through and fill\nout the arguments, doc string, etc.</p>\n<p>I also like to create my own snippets folder to put in some custom\nsnippets:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.vim/snippets</span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">vim ~/.vim/snippets/python.snippets</span>\n</code></pre>\n<p>Put this in the file:</p>\n<pre><code class=\"hljs language-arduino\">snippet pdb\n    <span class=\"hljs-keyword\">import</span> pdb; pdb.<span class=\"hljs-built_in\">set_trace</span>()\n</code></pre>\n<p>Now you can type pdb&#x3C;tab> and it'll insert your breakpoint!</p>\n<h2>Task lists</h2>\n<p>Another really useful thing is to mark some of your code as TODO or\nFIXME! I know we all like to think we write perfect code, but sometimes\nyou just have to settle and leave a note for yourself to come back\nlater. One of the plugins we included was the tasklist plugin that will\nallow us to search all open buffers for things to fix. Just add a\nmapping to open it in ~/.vimrc:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;leader>td &#x3C;Plug>TaskList\n</code></pre>\n<p>Now you can hit &#x3C;leader>td to open your task list and hit 'q' to\nclose it. You can also hit enter on the task to jump to the buffer and\nline that it is placed on.</p>\n<h2>Revision History</h2>\n<p>The final basic editing tweak I suggest everyone start utilizing is the\nGundo plugin. It'll allow you to view diff's of every save on a file\nyou've made and allow you to quickly revert back and forth:</p>\n<p><img src=\"http://i.imgur.com/2NrPS.png\" alt=\"image\"></p>\n<p>Just bind a key in your .vimrc to toggle the Gundo window:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>g <span class=\"hljs-symbol\">:GundoToggle&#x3C;CR></span>\n</code></pre>\n<h1>Syntax Highlighting and Validation</h1>\n<p>Simply enable syntax highlighting in your ~/.vimrc:</p>\n<pre><code class=\"hljs language-vbnet\">syntax <span class=\"hljs-keyword\">on</span>                           <span class=\"hljs-string\">\" syntax highlighing\nfiletype on                          \"</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">to</span> detect filetypes\nfiletype plugin indent <span class=\"hljs-keyword\">on</span>    <span class=\"hljs-string\">\" enable loading indent file for filetype\n</span></code></pre>\n<p>Because we enabled pyflakes when we added it as a submodule in\n~/.vim/bundle, it will notify you about unused imports and invalid\nsyntax. It will save you a lot of time saving and running just to find\nout you missed a colon. I like to tell it not use the quickfix window:</p>\n<pre><code class=\"hljs language-ini\">let g:<span class=\"hljs-attr\">pyflakes_use_quickfix</span> = <span class=\"hljs-number\">0</span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/ZfjFe.png\" alt=\"image\"></p>\n<h2>Pep8</h2>\n<p>The final plugin that really helps validate your code is the pep8\nplugin, it'll make sure your code is consistent across all projects.\nAdd a key mapping to your ~/.vimrc and then you'll be able to jump to\neach of the pep8 violations in the quickfix window:</p>\n<pre><code class=\"hljs language-ini\">let g:<span class=\"hljs-attr\">pep8_map</span>=<span class=\"hljs-string\">'&#x3C;leader>8'</span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/VU9AB.png\" alt=\"image\"></p>\n<h1>Tab Completion and Documentation</h1>\n<p>Vim has many different code completion options. We are going to use the\nSuperTab plugin to check the context of the code you are working on and\nchoose the best for the situation. We've already enabled the SuperTab\nplugin in the bundle/ folder, so we just have to configure it to be\ncontext sensitive and to enable omni code completion in your ~/.vimrc:</p>\n<pre><code class=\"hljs language-ini\">au FileType python set <span class=\"hljs-attr\">omnifunc</span>=pythoncomplete<span class=\"hljs-comment\">#Complete</span>\nlet g:<span class=\"hljs-attr\">SuperTabDefaultCompletionType</span> = <span class=\"hljs-string\">\"context\"</span>\n</code></pre>\n<p>Now we just enable the menu and pydoc preview to get the most useful\ninformation out of the code completion:</p>\n<pre><code class=\"hljs language-ini\">set <span class=\"hljs-attr\">completeopt</span>=menuone,longest,preview\n</code></pre>\n<p><img src=\"http://i.imgur.com/g4lxP.png\" alt=\"image\"></p>\n<p>We also enabled the pydoc plugin at the beginning with all the\nsubmodules; that gives us the ability to hit &#x3C;leader>pw when our\ncursor is on a module and have a new window open with the whole\ndocumentation page for it.</p>\n<h1>Code Navigation</h1>\n<h2>Buffers</h2>\n<p>The most important part about navigating code within vim, is to\ncompletely understand how to use buffers. There is no reason to use\ntabs. Open files with :e &#x3C;filename> to place in a buffer. We already\ninstalled the minibufexpl plugin, so you will already visually see every\nbuffer opened. You can also get a list of them doing :buffers.</p>\n<p>You can switch between the buffers using b&#x3C;number>, such as :b1 for\nthe first buffer. You can also use its name to match, so you can type :b\nmod&#x3C;tab> to autocomplete opening the models.py buffer. You need to\nmake sure you are using the minibufexpl from my github since it has\npatches that make it much better to work with.</p>\n<p>To close a buffer you use :bd or :bw.</p>\n<h2>Fuzzy Text File Search</h2>\n<p>To make finding and opening files within your project even easier, we\nare going to use the command-t plugin. It does have some parts that need\nto be compiled, so its not already installed by adding it as a\nsubmodule. Go to your ~/.vim/bundle/command-t folder and run 'rake\nmake'. Yes you need ruby installed. By default, command-t is bound to\n&#x3C;leader>t. This will use fuzzy text matching to find any file in your\nproject.</p>\n<p>It also supports searching only through opened buffers, instead of files\nusing &#x3C;leader>b.</p>\n<p><img src=\"http://i.imgur.com/hUcSl.png\" alt=\"image\"></p>\n<h2>File Browser</h2>\n<p>NERD Tree is a project file browser. I must admit I used this heavily\nback when I was migrating from Visual Studio and used to the Solution\nExplorer, but I rarely use it anymore. Command-T is usually all you'll\nneed. It is useful when you are getting to know a new codebase for the\nfirst time though. Lets bind a shortcut key for opening it:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>n <span class=\"hljs-symbol\">:NERDTreeToggle&#x3C;CR></span>\n</code></pre>\n<p><img src=\"http://i.imgur.com/R4ZzQ.png\" alt=\"image\"></p>\n<h2>Refactoring and Go to definition</h2>\n<p>Ropevim is also a great tool that will allow you to navigate around your\ncode. It supports automatically inserting import statements, goto\ndefinition, refactoring, and code completion. You'll really want to\nread up on everything it does, but the two big things I use it for is to\njump to function or class definitions quickly and to rename things\n(including all their references).</p>\n<p>For instance, if you are using django and you place your cursor over the\nclass models.Model you reference and then called :RopeGotoDefintion, it\nwould jump you straight to the django library to that class definition.\nWe already have it installed in our bundles, so we bind it to a key to\nuse it:</p>\n<pre><code class=\"hljs language-ruby\">map &#x3C;leader>j <span class=\"hljs-symbol\">:RopeGotoDefinition&#x3C;CR></span>\nmap &#x3C;leader>r <span class=\"hljs-symbol\">:RopeRename&#x3C;CR></span>\n</code></pre>\n<h2>Searching</h2>\n<p>The final tool that really speeds up navigating your code is the Ack\nplugin. Ack is similar to grep, but much better in my opinion. You can\nfuzzy text search for anything in your code (variable name, class,\nmethod, etc) and it'll give you a list of files and line numbers where\nthey are defined so you can quickly cycle through them. Just bind the\nsearching to a key:</p>\n<pre><code class=\"hljs language-php-template\"><span class=\"xml\">nmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">leader</span>></span>a <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Ack!\n</span></code></pre>\n<p>We use ! at the end of it so it doesn't open the first result\nautomatically.</p>\n<h1>Integration with Git</h1>\n<p>We installed 2 plugins, git.vim and fugitive, that give us all the\nintegration we need. Git.vim will provide us syntax highlighting for git\nconfiguration files; fugitive provides a great interface for interacting\nwith git including getting diffs, status updates, committing, and moving\nfiles.</p>\n<p>Fugitive also allows you to view what branch you are working in directly\nfrom vim. Add this to your statusline in ~/.vimrc:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">%</span><span class=\"bash\">{fugitive<span class=\"hljs-comment\">#statusline()}</span></span>\n</code></pre>\n<p>The big commands you need to know:</p>\n<ul>\n<li><strong>Gblame</strong>: This allows you to view a line by line comparison of who\nthe last person to touch that line of code is.</li>\n<li><strong>Gwrite</strong>: This will stage your file for commit, basically doing\ngit add &#x3C;filename></li>\n<li><strong>Gread</strong>: This will basically run a git checkout &#x3C;filename></li>\n<li><strong>Gcommit</strong>: This will just run git commit. Since its in a vim\nbuffer, you can use keyword completion (Ctrl-N), like\ntest_all&#x3C;Ctrl-N> to find the method name in your buffer and\ncomplete it for the commit message. You can also use + and - on the\nfilenames in the message to stage/unstage them for the commit.</li>\n</ul>\n<p><img src=\"http://i.imgur.com/NuRRj.png\" alt=\"image\"></p>\n<h1>Test Integration</h1>\n<h2>django nose</h2>\n<p>Test runner integration really depends on the testing library you are\nusing and what type of tests you are running but we included a great\ngeneric plugin called MakeGreen that executes off of vim's makeprg\nvariable. So for instance, if you are using django with django-nose you\ncould define a shortcut key in your ~/.vimrc like this:</p>\n<pre><code class=\"hljs language-arduino\">map &#x3C;leader>dt :set makeprg=python\\ manage.py\\ test\\|:call <span class=\"hljs-built_in\">MakeGreen</span>()&#x3C;CR>\n</code></pre>\n<p>This will just give you a green bar at the bottom of vim if your test\npassed or a red bar with the message of the failed test if it doesn't.\nVery simple.</p>\n<h2>py.test</h2>\n<p>I also included the py.test vim plugin for those who prefer it. This\nplugin has a lot more functionality including executing individual tests\nby class, file, or method. You can also cycle through the individual\nassertion errors. I have the following bindings:</p>\n<pre><code class=\"hljs language-php-template\"><span class=\"xml\">\" Execute the tests\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tf <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest file<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tc <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest class<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tm <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest method<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\n\" cycle through test errors\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tn <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest next<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>tp <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest previous<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\nnmap <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">silent</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Leader</span>></span>te <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Esc</span>></span>:Pytest error<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">CR</span>></span>\n</span></code></pre>\n<p><img src=\"http://i.imgur.com/RAE7v.png\" alt=\"image\"></p>\n<h1>Virtualenv</h1>\n<p>Vim doesn't realize that you are in a virtualenv so it wont give you\ncode completion for libraries only installed there. Add the following\nscript to your ~/.vimrc to fix it:</p>\n<pre><code class=\"hljs language-ini\">\" Add the virtualenv's site-packages to vim path\npy &#x3C;&#x3C; EOF\nimport os.path\nimport sys\nimport vim\nif 'VIRTUAL_ENV' in os.environ:\n    <span class=\"hljs-attr\">project_base_dir</span> = os.environ[<span class=\"hljs-string\">'VIRTUAL_ENV'</span>]\n    sys.path.insert(0, project_base_dir)\n    <span class=\"hljs-attr\">activate_this</span> = os.path.join(project_base_dir, <span class=\"hljs-string\">'bin/activate_this.py'</span>)\n    execfile(activate_this, dict(<span class=\"hljs-attr\">__file__</span>=activate_this))\nEOF\n</code></pre>\n<h1>Django</h1>\n<p>The only true django tweak I make is before I open vim I'll export the\nDJANGO_SETTINGS_MODULE environment so that I get code completion for\ndjango modules as well:</p>\n<pre><code class=\"hljs language-ini\">export <span class=\"hljs-attr\">DJANGO_SETTINGS_MODULE</span>=project.settings\n</code></pre>\n<h1>Random Tips</h1>\n<p>If you want to find a new color scheme just go to\n<a href=\"http://code.google.com/p/vimcolorschemetest/\">http://code.google.com/p/vimcolorschemetest/</a> to preview a large\nselection.</p>\n<p>John Anderson &#x3C;<a href=\"mailto:sontek@gmail.com\">sontek@gmail.com</a>> 2011</p>","category":"Development","date":"2011-05-07T00:00:00Z","tags":["Vim","Python"],"title":"Turning Vim into a modern Python IDE"}]}}},"__N_SSG":true}