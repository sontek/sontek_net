{"pageProps":{"postData":{"id":["old","writing_tests_for_pyramid_and_sqlalchemy"],"path":"old/writing_tests_for_pyramid_and_sqlalchemy","contentHtml":"<p>TL;DR: Putting it all together, the full code can be found here:\n<a href=\"https://gist.github.com/1420255\">https://gist.github.com/1420255</a></p>\n<h1>Intro</h1>\n<p>Pyramid's documentation doesn't cover the preferred way to test with\nSQLAlchemy, because Pyramid tries to stay out of your way and allow you\nto make your own decisions. However, I feel i'ts necessary to document\nwhat I think is the best way to test.</p>\n<p>When I first started writing tests with SQLAlchemy I found plenty of\nexamples of how to to get started by doing something like this:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> db </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> session </span><span style=\"color: #768390\"># probably a contextbound sessionmaker</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> db </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> model</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> sqlalchemy </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> create_engine</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setup</span><span style=\"color: #ADBAC7\">():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    engine </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> create_engine(</span><span style=\"color: #96D0FF\">'sqlite:///test.db'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    session.configure(</span><span style=\"color: #F69D50\">bind</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">engine)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    model.metadata.create_all(engine)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">teardown</span><span style=\"color: #ADBAC7\">():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    model.metadata.drop_all(engine)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_something</span><span style=\"color: #ADBAC7\">():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">pass</span></span></code></pre></div>\n<p>I have seen this done so many times, but I feel there is so much wrong\nwith it! So let's establish some base rules when testing:</p>\n<blockquote>\n<ul>\n<li>Always test your system like it would be used in production.\nSQLite does not enforce the same rules or have the same features\nas Postgres or MySQL and will allow tests to pass that would\notherwise fail in production.</li>\n<li>Tests should be fast! You should be writing tests for all your\ncode. This is the main reason people do test against SQLite, but\nwe can't violate rule number one. We have to make sure tests\nagainst Postgres are fast, so we shouldn't be tearing down and\nrecreating tables for every single test.</li>\n<li>You should be able to execute in parallel to speed up when you\nhave thousands of tests. Dropping and creating tables per test\nwould not work in a parallel environment.</li>\n</ul>\n</blockquote>\n<p>For an example, I have a project with 600+ tests and it would take 2 and\nhalf minutes to execute running against SQLite. But when we swapped our\ntest configuration to execute against Postgres, testing took well over\nan hour. That is unacceptable!</p>\n<p>But running them in parallel will give us a huge speed up. Check out the\nresults of the tests running in single proc mode vs using all 4 cores:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">$ py.test</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">======= 616 passed in 143.67 seconds =======</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\"></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ py.test -n4</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">======= 616 passed in 68.12 seconds =======</span></span></code></pre></div>\n<h1>The right way</h1>\n<p>So what is the proper way to setup your tests? You should initialize the\ndatabase when you start your test runner and then use transactions to\nrollback any data changes your tests made. This allows you to keep a\nclean database for each test in a very efficient way.</p>\n<p>In py.test, you just have to create a file called conftest.py that looks\nsimilar to:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> os</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #6CB6FF\">ROOT_PATH</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> os.path.dirname(</span><span style=\"color: #6CB6FF\">__file__</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">pytest_sessionstart</span><span style=\"color: #ADBAC7\">():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> py.test </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> config</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #768390\"># Only run database setup on master (in case of xdist/multiproc mode)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">if</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">not</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">hasattr</span><span style=\"color: #ADBAC7\">(config, </span><span style=\"color: #96D0FF\">'slaveinput'</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> models </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> initialize_sql</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> pyramid.config </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> Configurator</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> paste.deploy.loadwsgi </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> appconfig</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> sqlalchemy </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> engine_from_config</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> os</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">ROOT_PATH</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> os.path.dirname(</span><span style=\"color: #6CB6FF\">__file__</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        settings </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> appconfig(</span><span style=\"color: #96D0FF\">'config:'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">+</span><span style=\"color: #ADBAC7\"> os.path.join(</span><span style=\"color: #6CB6FF\">ROOT_PATH</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'test.ini'</span><span style=\"color: #ADBAC7\">))</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        engine </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> engine_from_config(settings, </span><span style=\"color: #F69D50\">prefix</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'sqlalchemy.'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">print</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">'Creating the tables on the test database </span><span style=\"color: #F47067\">%s</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">%</span><span style=\"color: #ADBAC7\"> engine</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        config </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> Configurator(</span><span style=\"color: #F69D50\">settings</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">settings)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        initialize_sql(settings, config)</span></span></code></pre></div>\n<p>With py.test, when you are running in parallel mode, the\npytest_sessionstart hook gets fired for each node, so we check that we\nare on the master node. Then we just grab our test.ini configuration\nfile and execute the initialize_sql function.</p>\n<p>Now that you have your initial test configuration finished, you have to\ndefine a base test class that does the transaction management in setUp\nand teardown.</p>\n<p>First, lets setup the Base testing class what will manage our\ntransactions:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> unittest</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> pyramid </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> testing</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> paste.deploy.loadwsgi </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> appconfig</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> webtest </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> TestApp</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> mock </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> Mock</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> sqlalchemy </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> engine_from_config</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> sqlalchemy.orm </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> sessionmaker</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> app.db </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> Session</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> app.db </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> Entity  </span><span style=\"color: #768390\"># base declarative object</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> app </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> main</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> os</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">here </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> os.path.dirname(</span><span style=\"color: #6CB6FF\">__file__</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">settings </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> appconfig(</span><span style=\"color: #96D0FF\">'config:'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">+</span><span style=\"color: #ADBAC7\"> os.path.join(here, </span><span style=\"color: #96D0FF\">'../../'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'test.ini'</span><span style=\"color: #ADBAC7\">))</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">BaseTestCase</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">unittest</span><span style=\"color: #ADBAC7\">.</span><span style=\"color: #6CB6FF\">TestCase</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #DCBDFB\">@</span><span style=\"color: #6CB6FF\">classmethod</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setUpClass</span><span style=\"color: #ADBAC7\">(cls):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">cls</span><span style=\"color: #ADBAC7\">.engine </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> engine_from_config(settings, </span><span style=\"color: #F69D50\">prefix</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'sqlalchemy.'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">cls</span><span style=\"color: #ADBAC7\">.Session </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> sessionmaker()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setUp</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        connection </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.engine.connect()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #768390\"># begin a non-ORM transaction</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.trans </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> connection.begin()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #768390\"># bind an individual Session to the connection</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        Session.configure(</span><span style=\"color: #F69D50\">bind</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">connection)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.Session(</span><span style=\"color: #F69D50\">bind</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">connection)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        Entity.session </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">tearDown</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #768390\"># rollback - everything that happened with the</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #768390\"># Session above (including calls to commit())</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #768390\"># is rolled back.</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        testing.tearDown()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.trans.rollback()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session.close()</span></span></code></pre></div>\n<p>This base test case will wrap all your sessions in an external\ntransaction so that you still have the ability to call flush/commit/etc\nand it will still be able to rollback any data changes you make.</p>\n<h1>Unit Tests</h1>\n<p>Now there are a few different types of tests you will want to run.\nFirst, you will want to do unit tests, which are small tests that only\ntest 1 thing at a time. This means you will skip the routes, templates,\netc. So let's setup our Unit Test Base class:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">UnitTestBase</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">BaseTestCase</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setUp</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> testing.setUp(</span><span style=\"color: #F69D50\">request</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">testing.DummyRequest())</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">super</span><span style=\"color: #ADBAC7\">(UnitTestBase, </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">).setUp()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">get_csrf_request</span><span style=\"color: #ADBAC7\">(self, post</span><span style=\"color: #F47067\">=</span><span style=\"color: #6CB6FF\">None</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        csrf </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">'abc'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">if</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">not</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'csrf_token'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> post.keys():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            post.update({</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'csrf_token'</span><span style=\"color: #ADBAC7\">: csrf</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        request </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> testing.DummyRequest(post)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        request.session </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> Mock()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        csrf_token </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> Mock()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        csrf_token.return_value </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> csrf</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        request.session.get_csrf_token </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> csrf_token</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">return</span><span style=\"color: #ADBAC7\"> request</span></span></code></pre></div>\n<p>We built in a utility function to help us test requests that require a\ncsrf token as well. Here is how we would use this class:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">TestViews</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">UnitTestBase</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_login_fails_empty</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\" Make sure we can't login with empty credentials\"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> app.accounts.views </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> LoginView</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config.add_route(</span><span style=\"color: #96D0FF\">'index'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'/'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config.add_route(</span><span style=\"color: #96D0FF\">'dashboard'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'/'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        request </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> testing.DummyRequest(</span><span style=\"color: #F69D50\">post</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            </span><span style=\"color: #96D0FF\">'submit'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #6CB6FF\">True</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        view </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> LoginView(request)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        response </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> view.post()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        errors </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> response[</span><span style=\"color: #96D0FF\">'errors'</span><span style=\"color: #ADBAC7\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">0</span><span style=\"color: #ADBAC7\">].node.name </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'csrf_token'</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">0</span><span style=\"color: #ADBAC7\">].msg </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'Required'</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">1</span><span style=\"color: #ADBAC7\">].node.name </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'Username'</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">1</span><span style=\"color: #ADBAC7\">].msg </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'Required'</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">2</span><span style=\"color: #ADBAC7\">].node.name </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'Password'</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> errors[</span><span style=\"color: #6CB6FF\">2</span><span style=\"color: #ADBAC7\">].msg </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'Required'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_login_succeeds</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\" Make sure we can login \"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        admin </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> User(</span><span style=\"color: #F69D50\">username</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'sontek'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F69D50\">password</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'temp'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F69D50\">kind</span><span style=\"color: #F47067\">=</span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'admin'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        admin.activated </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">True</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session.add(admin)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session.flush()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> app.accounts.views </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> LoginView</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config.add_route(</span><span style=\"color: #96D0FF\">'index'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'/'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config.add_route(</span><span style=\"color: #96D0FF\">'dashboard'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'/dashboard'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        request </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.get_csrf_request(</span><span style=\"color: #F69D50\">post</span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'submit'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #6CB6FF\">True</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'Username'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #96D0FF\">'sontek'</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'Password'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #96D0FF\">'temp'</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        view </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> LoginView(request)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        response </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> view.post()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> response.status_int </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">302</span></span></code></pre></div>\n<h1>Integration Tests</h1>\n<p>The second type of test you will want to write is an integration test.\nThis will integrate with the whole web framework and actually hit the\ndefine routes, render the templates, and actually test the full stack of\nyour application.</p>\n<p>Luckily this is pretty easy to do with Pyramid using WebTest:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">IntegrationTestBase</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">BaseTestCase</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #DCBDFB\">@</span><span style=\"color: #6CB6FF\">classmethod</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setUpClass</span><span style=\"color: #ADBAC7\">(cls):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">cls</span><span style=\"color: #ADBAC7\">.app </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> main({}, </span><span style=\"color: #F47067\">**</span><span style=\"color: #ADBAC7\">settings)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">super</span><span style=\"color: #ADBAC7\">(IntegrationTestBase, </span><span style=\"color: #6CB6FF\">cls</span><span style=\"color: #ADBAC7\">).setUpClass()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">setUp</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> TestApp(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.config </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> testing.setUp()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">super</span><span style=\"color: #ADBAC7\">(IntegrationTestBase, </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">).setUp()</span></span></code></pre></div>\n<p>In setUpClass, we run the main function of the applications\n__init__.py that sets up the WSGI application and then we wrap it in\na TestApp that gives us the ability to call get/post on it.</p>\n<p>Here is an example of it in use:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">TestViews</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">IntegrationTestBase</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_get_login</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\" Call the login view, make sure routes are working \"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        res </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app.get(</span><span style=\"color: #96D0FF\">'/login'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.assertEqual(res.status_int, </span><span style=\"color: #6CB6FF\">200</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_empty_login</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\" Empty login fails \"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        res </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app.post(</span><span style=\"color: #96D0FF\">'/login'</span><span style=\"color: #ADBAC7\">, {</span><span style=\"color: #96D0FF\">'submit'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #6CB6FF\">True</span><span style=\"color: #ADBAC7\">})</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">\"There was a problem with your submission\"</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> res.body</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">\"Required\"</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> res.body</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> res.status_int </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">200</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">test_valid_login</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\" Call the login view, make sure routes are working \"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        admin </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> User(</span><span style=\"color: #F69D50\">username</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'sontek'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F69D50\">password</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">'temp'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F69D50\">kind</span><span style=\"color: #F47067\">=</span><span style=\"color: #F47067\">u</span><span style=\"color: #96D0FF\">'admin'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        admin.activated </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">True</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session.add(admin)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.session.flush()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        res </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app.get(</span><span style=\"color: #96D0FF\">'/login'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        csrf </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> res.form.fields[</span><span style=\"color: #96D0FF\">'csrf_token'</span><span style=\"color: #ADBAC7\">][</span><span style=\"color: #6CB6FF\">0</span><span style=\"color: #ADBAC7\">].value</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        res </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.app.post(</span><span style=\"color: #96D0FF\">'/login'</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            {</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'submit'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #6CB6FF\">True</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'Username'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #96D0FF\">'sontek'</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'Password'</span><span style=\"color: #ADBAC7\">: </span><span style=\"color: #96D0FF\">'temp'</span><span style=\"color: #ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #96D0FF\">'csrf_token'</span><span style=\"color: #ADBAC7\">: csrf</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        )</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">assert</span><span style=\"color: #ADBAC7\"> res.status_int </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">302</span></span></code></pre></div>\n<h1>Problems with this approach</h1>\n<p>If a test causes an error that will prevent the transaction from rolling\nback, such as closing the engine, then this approach will leave your\ndatabase in a state that might cause other tests to fail.</p>\n<p>If this happens tracing the root cause could be difficult but you should\nbe able to just look at the first failed test unless you are running the\ntests in parallel.</p>\n<p>If you are good about writing and running your tests regularly you\nshould be able to catch individual tests causing issues like this fairly\nquickly.</p>\n<h1>Resources</h1>\n<p><a href=\"http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/testing.html\">http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/testing.html</a></p>\n<p><a href=\"http://www.sqlalchemy.org/docs/orm/session.html#joining-a-session-into-an-external-transaction\">http://www.sqlalchemy.org/docs/orm/session.html#joining-a-session-into-an-external-transaction</a></p>\n<p>John Anderson &#x3C;<a href=\"mailto:sontek@gmail.com\">sontek@gmail.com</a>> 2011</p>","category":"Python","date":"2011-11-30T18:00:00-06:00","tags":["Python"],"title":"Writing tests for Pyramid and SQLAlchemy"}},"__N_SSG":true}