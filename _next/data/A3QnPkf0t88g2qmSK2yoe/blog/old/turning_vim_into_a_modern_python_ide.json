{"pageProps":{"postData":{"id":["old","turning_vim_into_a_modern_python_ide"],"path":"old/turning_vim_into_a_modern_python_ide","contentHtml":"<p>TL;DR:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">$ git clone https://github.com/sontek/dotfiles.git</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ cd dotfiles</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ ./install.sh vim</span></span></code></pre></div>\n<h1>Intro</h1>\n<p>Back in 2008, I wrote the article <a href=\"http://sontek.net/python-with-a-modular-ide-vim\">Python with a modular IDE\n(Vim)</a>. Years later, I\nhave people e-mailing me and commenting daily asking for more\ninformation, even though most of the information in it is outdated. Here\nis the modern way to work with Python and Vim to achieve the perfect\nenvironment.</p>\n<p>Because one of the most important parts about a development environment\nis the ability to easily reproduce across machines, we are going to\nstore our vim configuration in git:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">$ mkdir ~/.vim/</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ mkdir ~/.vim/{autoload,bundle}</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ cd ~/.vim/</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ git init</span></span></code></pre></div>\n<p>The purpose of the autoload directory is to automatically load the vim\nplugin <a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a>, which we'll\nthen use to load all other plugins that are located in the bundle\ndirectory. So download pathogen and put it in your autoload folder.</p>\n<p>You'll need to add the following to your ~/.vimrc so that pathogen\nwill be loaded properly. Filetype detection must be off when you run the\ncommands so its best to execute them first:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">filetype off</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">call pathogen#runtime_append_all_bundles()</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">call pathogen#helptags()</span></span></code></pre></div>\n<p>Now lets add all of the vim plugins we plan on using as submodules to\nour git repository:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/msanders/snipmate.vim.git bundle/snipmate</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/tpope/vim-surround.git bundle/surround</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/tpope/vim-git.git bundle/git</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/ervandew/supertab.git bundle/supertab</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/sontek/minibufexpl.vim.git bundle/minibufexpl</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/wincent/Command-T.git bundle/command-t</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/mitechie/pyflakes-pathogen.git</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/mileszs/ack.vim.git bundle/ack</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/sjl/gundo.vim.git bundle/gundo</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/fs111/pydoc.vim.git bundle/pydoc</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/vim-scripts/pep8.git bundle/pep8</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/alfredodeza/pytest.vim.git bundle/py.test</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/reinh/vim-makegreen bundle/makegreen</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/vim-scripts/TaskList.vim.git bundle/tasklist</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/vim-scripts/The-NERD-tree.git bundle/nerdtree</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule add https://github.com/sontek/rope-vim.git bundle/ropevim</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule init</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule update</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule foreach git submodule init</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">git submodule foreach git submodule update</span></span></code></pre></div>\n<p>Thats it! Now that we've got our vim configuration in git!</p>\n<p>Now lets look at how to use each of these plugins to improve the power\nof vim:</p>\n<h1>Basic Editing and Debugging</h1>\n<h2>Code Folding</h2>\n<p>Lets first enable code folding. This makes it a lot easier to organize\nyour code and hide portions that you aren't interested in working on.\nThis is quite easy for Python, since whitespace is required.</p>\n<p>In your ~/.vimrc just add:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">set foldmethod=indent</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">set foldlevel=99</span></span></code></pre></div>\n<p>Then you will be able to be inside a method and type 'za' to open and\nclose a fold.</p>\n<h2>Window Splits</h2>\n<p>Sometimes code folding isn't enough; you may need to start opening up\nmultiple windows and working on multiple files at once or different\nlocations within the same file. To do this in vim, you can use these\nshortcuts:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">Vertical Split : Ctrl+w + v</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">Horizontal Split: Ctrl+w + s</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">Close current windows: Ctrl+w + q</span></span></code></pre></div>\n<p>I also like to bind Ctrl+&#x3C;movement> keys to move around the windows,\ninstead of using Ctrl+w + &#x3C;movement>:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;c-j> &#x3C;c-w>j</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;c-k> &#x3C;c-w>k</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;c-l> &#x3C;c-w>l</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;c-h> &#x3C;c-w>h</span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/krj0l.png\" alt=\"image\"></p>\n<h2>Snippets</h2>\n<p>The next tweak that really speeds up development is using snipmate.\nWe've already included it in our bundle/ folder so its already enabled.\nTry opening up a python file and typing 'def&#x3C;tab>'. It should stub\nout a method definition for you and allow you to tab through and fill\nout the arguments, doc string, etc.</p>\n<p>I also like to create my own snippets folder to put in some custom\nsnippets:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">$ mkdir ~/.vim/snippets</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">$ vim ~/.vim/snippets/python.snippets</span></span></code></pre></div>\n<p>Put this in the file:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">snippet pdb</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">    import pdb; pdb.set_trace()</span></span></code></pre></div>\n<p>Now you can type pdb&#x3C;tab> and it'll insert your breakpoint!</p>\n<h2>Task lists</h2>\n<p>Another really useful thing is to mark some of your code as TODO or\nFIXME! I know we all like to think we write perfect code, but sometimes\nyou just have to settle and leave a note for yourself to come back\nlater. One of the plugins we included was the tasklist plugin that will\nallow us to search all open buffers for things to fix. Just add a\nmapping to open it in ~/.vimrc:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>td &#x3C;Plug>TaskList</span></span></code></pre></div>\n<p>Now you can hit &#x3C;leader>td to open your task list and hit 'q' to\nclose it. You can also hit enter on the task to jump to the buffer and\nline that it is placed on.</p>\n<h2>Revision History</h2>\n<p>The final basic editing tweak I suggest everyone start utilizing is the\nGundo plugin. It'll allow you to view diff's of every save on a file\nyou've made and allow you to quickly revert back and forth:</p>\n<p><img src=\"http://i.imgur.com/2NrPS.png\" alt=\"image\"></p>\n<p>Just bind a key in your .vimrc to toggle the Gundo window:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>g :GundoToggle&#x3C;CR></span></span></code></pre></div>\n<h1>Syntax Highlighting and Validation</h1>\n<p>Simply enable syntax highlighting in your ~/.vimrc:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">syntax on                           \" syntax highlighing</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">filetype on                          \" try to detect filetypes</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">filetype plugin indent on    \" enable loading indent file for filetype</span></span></code></pre></div>\n<p>Because we enabled pyflakes when we added it as a submodule in\n~/.vim/bundle, it will notify you about unused imports and invalid\nsyntax. It will save you a lot of time saving and running just to find\nout you missed a colon. I like to tell it not use the quickfix window:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">let g:pyflakes_use_quickfix = 0</span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/ZfjFe.png\" alt=\"image\"></p>\n<h2>Pep8</h2>\n<p>The final plugin that really helps validate your code is the pep8\nplugin, it'll make sure your code is consistent across all projects.\nAdd a key mapping to your ~/.vimrc and then you'll be able to jump to\neach of the pep8 violations in the quickfix window:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">let g:pep8_map='&#x3C;leader>8'</span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/VU9AB.png\" alt=\"image\"></p>\n<h1>Tab Completion and Documentation</h1>\n<p>Vim has many different code completion options. We are going to use the\nSuperTab plugin to check the context of the code you are working on and\nchoose the best for the situation. We've already enabled the SuperTab\nplugin in the bundle/ folder, so we just have to configure it to be\ncontext sensitive and to enable omni code completion in your ~/.vimrc:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">au FileType python set omnifunc=pythoncomplete#Complete</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">let g:SuperTabDefaultCompletionType = \"context\"</span></span></code></pre></div>\n<p>Now we just enable the menu and pydoc preview to get the most useful\ninformation out of the code completion:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">set completeopt=menuone,longest,preview</span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/g4lxP.png\" alt=\"image\"></p>\n<p>We also enabled the pydoc plugin at the beginning with all the\nsubmodules; that gives us the ability to hit &#x3C;leader>pw when our\ncursor is on a module and have a new window open with the whole\ndocumentation page for it.</p>\n<h1>Code Navigation</h1>\n<h2>Buffers</h2>\n<p>The most important part about navigating code within vim, is to\ncompletely understand how to use buffers. There is no reason to use\ntabs. Open files with :e &#x3C;filename> to place in a buffer. We already\ninstalled the minibufexpl plugin, so you will already visually see every\nbuffer opened. You can also get a list of them doing :buffers.</p>\n<p>You can switch between the buffers using b&#x3C;number>, such as :b1 for\nthe first buffer. You can also use its name to match, so you can type :b\nmod&#x3C;tab> to autocomplete opening the models.py buffer. You need to\nmake sure you are using the minibufexpl from my github since it has\npatches that make it much better to work with.</p>\n<p>To close a buffer you use :bd or :bw.</p>\n<h2>Fuzzy Text File Search</h2>\n<p>To make finding and opening files within your project even easier, we\nare going to use the command-t plugin. It does have some parts that need\nto be compiled, so its not already installed by adding it as a\nsubmodule. Go to your ~/.vim/bundle/command-t folder and run 'rake\nmake'. Yes you need ruby installed. By default, command-t is bound to\n&#x3C;leader>t. This will use fuzzy text matching to find any file in your\nproject.</p>\n<p>It also supports searching only through opened buffers, instead of files\nusing &#x3C;leader>b.</p>\n<p><img src=\"http://i.imgur.com/hUcSl.png\" alt=\"image\"></p>\n<h2>File Browser</h2>\n<p>NERD Tree is a project file browser. I must admit I used this heavily\nback when I was migrating from Visual Studio and used to the Solution\nExplorer, but I rarely use it anymore. Command-T is usually all you'll\nneed. It is useful when you are getting to know a new codebase for the\nfirst time though. Lets bind a shortcut key for opening it:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>n :NERDTreeToggle&#x3C;CR></span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/R4ZzQ.png\" alt=\"image\"></p>\n<h2>Refactoring and Go to definition</h2>\n<p>Ropevim is also a great tool that will allow you to navigate around your\ncode. It supports automatically inserting import statements, goto\ndefinition, refactoring, and code completion. You'll really want to\nread up on everything it does, but the two big things I use it for is to\njump to function or class definitions quickly and to rename things\n(including all their references).</p>\n<p>For instance, if you are using django and you place your cursor over the\nclass models.Model you reference and then called :RopeGotoDefintion, it\nwould jump you straight to the django library to that class definition.\nWe already have it installed in our bundles, so we bind it to a key to\nuse it:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>j :RopeGotoDefinition&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>r :RopeRename&#x3C;CR></span></span></code></pre></div>\n<h2>Searching</h2>\n<p>The final tool that really speeds up navigating your code is the Ack\nplugin. Ack is similar to grep, but much better in my opinion. You can\nfuzzy text search for anything in your code (variable name, class,\nmethod, etc) and it'll give you a list of files and line numbers where\nthey are defined so you can quickly cycle through them. Just bind the\nsearching to a key:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;leader>a &#x3C;Esc>:Ack!</span></span></code></pre></div>\n<p>We use ! at the end of it so it doesn't open the first result\nautomatically.</p>\n<h1>Integration with Git</h1>\n<p>We installed 2 plugins, git.vim and fugitive, that give us all the\nintegration we need. Git.vim will provide us syntax highlighting for git\nconfiguration files; fugitive provides a great interface for interacting\nwith git including getting diffs, status updates, committing, and moving\nfiles.</p>\n<p>Fugitive also allows you to view what branch you are working in directly\nfrom vim. Add this to your statusline in ~/.vimrc:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">%{fugitive#statusline()}</span></span></code></pre></div>\n<p>The big commands you need to know:</p>\n<ul>\n<li><strong>Gblame</strong>: This allows you to view a line by line comparison of who\nthe last person to touch that line of code is.</li>\n<li><strong>Gwrite</strong>: This will stage your file for commit, basically doing\ngit add &#x3C;filename></li>\n<li><strong>Gread</strong>: This will basically run a git checkout &#x3C;filename></li>\n<li><strong>Gcommit</strong>: This will just run git commit. Since its in a vim\nbuffer, you can use keyword completion (Ctrl-N), like\ntest_all&#x3C;Ctrl-N> to find the method name in your buffer and\ncomplete it for the commit message. You can also use + and - on the\nfilenames in the message to stage/unstage them for the commit.</li>\n</ul>\n<p><img src=\"http://i.imgur.com/NuRRj.png\" alt=\"image\"></p>\n<h1>Test Integration</h1>\n<h2>django nose</h2>\n<p>Test runner integration really depends on the testing library you are\nusing and what type of tests you are running but we included a great\ngeneric plugin called MakeGreen that executes off of vim's makeprg\nvariable. So for instance, if you are using django with django-nose you\ncould define a shortcut key in your ~/.vimrc like this:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">map &#x3C;leader>dt :set makeprg=python\\ manage.py\\ test\\|:call MakeGreen()&#x3C;CR></span></span></code></pre></div>\n<p>This will just give you a green bar at the bottom of vim if your test\npassed or a red bar with the message of the failed test if it doesn't.\nVery simple.</p>\n<h2>py.test</h2>\n<p>I also included the py.test vim plugin for those who prefer it. This\nplugin has a lot more functionality including executing individual tests\nby class, file, or method. You can also cycle through the individual\nassertion errors. I have the following bindings:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">\" Execute the tests</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>tf &#x3C;Esc>:Pytest file&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>tc &#x3C;Esc>:Pytest class&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>tm &#x3C;Esc>:Pytest method&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">\" cycle through test errors</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>tn &#x3C;Esc>:Pytest next&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>tp &#x3C;Esc>:Pytest previous&#x3C;CR></span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">nmap &#x3C;silent>&#x3C;Leader>te &#x3C;Esc>:Pytest error&#x3C;CR></span></span></code></pre></div>\n<p><img src=\"http://i.imgur.com/RAE7v.png\" alt=\"image\"></p>\n<h1>Virtualenv</h1>\n<p>Vim doesn't realize that you are in a virtualenv so it wont give you\ncode completion for libraries only installed there. Add the following\nscript to your ~/.vimrc to fix it:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">\" Add the virtualenv's site-packages to vim path</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">py &#x3C;&#x3C; EOF</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">import os.path</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">import sys</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">import vim</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">if 'VIRTUAL_ENV' in os.environ:</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">    project_base_dir = os.environ['VIRTUAL_ENV']</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">    sys.path.insert(0, project_base_dir)</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">    execfile(activate_this, dict(__file__=activate_this))</span></span>\n<span data-line=\"\"><span style=\"color: #adbac7\">EOF</span></span></code></pre></div>\n<h1>Django</h1>\n<p>The only true django tweak I make is before I open vim I'll export the\nDJANGO_SETTINGS_MODULE environment so that I get code completion for\ndjango modules as well:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"\" data-theme=\"default\"><code data-language=\"\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #adbac7\">export DJANGO_SETTINGS_MODULE=project.settings</span></span></code></pre></div>\n<h1>Random Tips</h1>\n<p>If you want to find a new color scheme just go to\n<a href=\"http://code.google.com/p/vimcolorschemetest/\">http://code.google.com/p/vimcolorschemetest/</a> to preview a large\nselection.</p>\n<p>John Anderson &#x3C;<a href=\"mailto:sontek@gmail.com\">sontek@gmail.com</a>> 2011</p>","category":"Development","date":"2011-05-06T19:00:00-05:00","tags":["Vim","Python"],"title":"Turning Vim into a modern Python IDE"}},"__N_SSG":true}