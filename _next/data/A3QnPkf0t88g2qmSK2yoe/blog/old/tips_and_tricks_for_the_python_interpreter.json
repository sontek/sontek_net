{"pageProps":{"postData":{"id":["old","tips_and_tricks_for_the_python_interpreter"],"path":"old/tips_and_tricks_for_the_python_interpreter","contentHtml":"<p>I have seen a lot of people switch over to using ipython, bpython, etc\nto get auto-complete support without realizing that the standard\ninterpreter does have this functionality.</p>\n<p>To enable auto-complete support in the python interpreter you need to\ncreate a python startup file that enables readline support. A python\nstartup file is just a bunch of python code that gets executed at\nstartup of the interpreter. To do this you just setup PYTHONSTARTUP in\nyour ~/.bashrc and then create a ~/.pythonrc.py file:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #768390\">#.bashrc</span></span>\n<span data-line=\"\"><span style=\"color: #6CB6FF\">PYTHONSTARTUP</span><span style=\"color: #F47067\">=~/</span><span style=\"color: #ADBAC7\">.pythonrc.py</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">export </span><span style=\"color: #6CB6FF\">PYTHONSTARTUP</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #768390\">#.pythonrc.py</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">try</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> readline</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">except</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">ImportError</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #6CB6FF\">print</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #96D0FF\">\"Module readline not available.\"</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">else</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> rlcompleter</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    readline.parse_and_bind(</span><span style=\"color: #96D0FF\">\"tab: complete\"</span><span style=\"color: #ADBAC7\">)</span></span></code></pre></div>\n<p>Now when you are in python you have tab completion on importing, calling\nmethods on a module, etc.</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">>>></span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> o</span></span>\n<span data-line=\"\"><span style=\"color: #6CB6FF\">object</span><span style=\"color: #ADBAC7\">(  </span><span style=\"color: #6CB6FF\">oct</span><span style=\"color: #ADBAC7\">(     </span><span style=\"color: #6CB6FF\">open</span><span style=\"color: #ADBAC7\">(    </span><span style=\"color: #F47067\">or</span><span style=\"color: #ADBAC7\">       </span><span style=\"color: #6CB6FF\">ord</span><span style=\"color: #ADBAC7\">(     os</span></span></code></pre></div>\n<p>I always end up using the pretty print module for viewing long lists and\nstrings in the interpreter so I prefer to just use it by default:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #768390\"># Enable Pretty Printing for stdout</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> pprint</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">my_displayhook</span><span style=\"color: #ADBAC7\">(value):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">if</span><span style=\"color: #ADBAC7\"> value </span><span style=\"color: #F47067\">is</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">not</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">None</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">try</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> __builtin__</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            __builtin__._ </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> value</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">except</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">ImportError</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            </span><span style=\"color: #6CB6FF\">__builtins__</span><span style=\"color: #ADBAC7\">._ </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> value</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        pprint.pprint(value)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">sys.displayhook </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> my_displayhook</span></span></code></pre></div>\n<p>It is also very useful to be able to load up your favorite editor to\nedit lines of code from the interpreter, you can do this by adding the\nfollowing into your ~/.pythonrc.py:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> os</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> sys</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> code </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> InteractiveConsole</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> tempfile </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> mkstemp</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #6CB6FF\">EDITOR</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> os.environ.get(</span><span style=\"color: #96D0FF\">'EDITOR'</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #96D0FF\">'vi'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #6CB6FF\">EDIT_CMD</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">'\\e'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">EditableBufferInteractiveConsole</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">InteractiveConsole</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">__init__</span><span style=\"color: #ADBAC7\">(self, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args, </span><span style=\"color: #F47067\">**</span><span style=\"color: #ADBAC7\">kwargs):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.last_buffer </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> [] </span><span style=\"color: #768390\"># This holds the last executed statement</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        InteractiveConsole.</span><span style=\"color: #6CB6FF\">__init__</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args, </span><span style=\"color: #F47067\">**</span><span style=\"color: #ADBAC7\">kwargs)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #DCBDFB\">runsource</span><span style=\"color: #ADBAC7\">(self, source, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.last_buffer </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> [ source.encode(</span><span style=\"color: #96D0FF\">'latin-1'</span><span style=\"color: #ADBAC7\">) ]</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">return</span><span style=\"color: #ADBAC7\"> InteractiveConsole.runsource(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">, source, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">raw_input</span><span style=\"color: #ADBAC7\">(self, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        line </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> InteractiveConsole.raw_input(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">, </span><span style=\"color: #F47067\">*</span><span style=\"color: #ADBAC7\">args)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">if</span><span style=\"color: #ADBAC7\"> line </span><span style=\"color: #F47067\">==</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">EDIT_CMD</span><span style=\"color: #ADBAC7\">:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            fd, tmpfl </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> mkstemp(</span><span style=\"color: #96D0FF\">'.py'</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            os.write(fd, </span><span style=\"color: #F47067\">b</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #F47067\">\\n</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #ADBAC7\">.join(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.last_buffer))</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            os.close(fd)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            os.system(</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #F47067\">%s</span><span style=\"color: #96D0FF\"> </span><span style=\"color: #F47067\">%s</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">%</span><span style=\"color: #ADBAC7\"> (</span><span style=\"color: #6CB6FF\">EDITOR</span><span style=\"color: #ADBAC7\">, tmpfl))</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            line </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">open</span><span style=\"color: #ADBAC7\">(tmpfl).read()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            os.unlink(tmpfl)</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            tmpfl </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">''</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            lines </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> line.split( </span><span style=\"color: #96D0FF\">'</span><span style=\"color: #F47067\">\\n</span><span style=\"color: #96D0FF\">'</span><span style=\"color: #ADBAC7\"> )</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            </span><span style=\"color: #F47067\">for</span><span style=\"color: #ADBAC7\"> i </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">range</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">len</span><span style=\"color: #ADBAC7\">(lines) </span><span style=\"color: #F47067\">-</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">1</span><span style=\"color: #ADBAC7\">): </span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">.push( lines[i] )</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            line </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> lines[</span><span style=\"color: #F47067\">-</span><span style=\"color: #6CB6FF\">1</span><span style=\"color: #ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">return</span><span style=\"color: #ADBAC7\"> line</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">c </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> EditableBufferInteractiveConsole(</span><span style=\"color: #F69D50\">locals</span><span style=\"color: #F47067\">=</span><span style=\"color: #6CB6FF\">locals</span><span style=\"color: #ADBAC7\">())</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">c.interact(</span><span style=\"color: #F69D50\">banner</span><span style=\"color: #F47067\">=</span><span style=\"color: #96D0FF\">''</span><span style=\"color: #ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #768390\"># Exit the Python shell on exiting the InteractiveConsole</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">sys.exit()</span></span></code></pre></div>\n<p>For Django developers when you load up the ./manage.py shell it is nice\nto have access to all your models and settings for testing:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre class=\"github-dark-dimmed\" style=\"background-color: #22272e\" tabindex=\"0\" data-language=\"python\" data-theme=\"default\"><code data-language=\"python\" data-theme=\"default\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color: #768390\"># If we're working with a Django project, set up the environment</span></span>\n<span data-line=\"\"><span style=\"color: #F47067\">if</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #96D0FF\">'DJANGO_SETTINGS_MODULE'</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> os.environ:</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> django.db.models.loading </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> get_models</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> django.test.client </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> Client</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> django.test.utils </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> setup_test_environment, teardown_test_environment</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">from</span><span style=\"color: #ADBAC7\"> django.conf </span><span style=\"color: #F47067\">import</span><span style=\"color: #ADBAC7\"> settings </span><span style=\"color: #F47067\">as</span><span style=\"color: #ADBAC7\"> S</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    </span><span style=\"color: #F47067\">class</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #F69D50\">DjangoModels</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">object</span><span style=\"color: #ADBAC7\">):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #96D0FF\">\"\"\"Loop through all the models in INSTALLED_APPS and import them.\"\"\"</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">        </span><span style=\"color: #F47067\">def</span><span style=\"color: #ADBAC7\"> </span><span style=\"color: #6CB6FF\">__init__</span><span style=\"color: #ADBAC7\">(self):</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">            </span><span style=\"color: #F47067\">for</span><span style=\"color: #ADBAC7\"> m </span><span style=\"color: #F47067\">in</span><span style=\"color: #ADBAC7\"> get_models():</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">                </span><span style=\"color: #6CB6FF\">setattr</span><span style=\"color: #ADBAC7\">(</span><span style=\"color: #6CB6FF\">self</span><span style=\"color: #ADBAC7\">, m.</span><span style=\"color: #6CB6FF\">__name__</span><span style=\"color: #ADBAC7\">, m)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    A </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> DjangoModels()</span></span>\n<span data-line=\"\"><span style=\"color: #ADBAC7\">    C </span><span style=\"color: #F47067\">=</span><span style=\"color: #ADBAC7\"> Client()</span></span></code></pre></div>\n<p>After these tweaks the python interpreter is a lot more powerful and you\nreally lose the need for the more interactive shells like ipython and\nbpython. All of these settings work in both python2 and python3.</p>\n<p>If you want to see my complete ~/.pythonrc.py you can get it on\n<a href=\"https://github.com/sontek/dotfiles/blob/master/_pythonrc.py\">github</a></p>","category":"Development","date":"2010-12-27T18:00:00-06:00","tags":["Python"],"title":"Tips and Tricks for the Python Interpreter"}},"__N_SSG":true}