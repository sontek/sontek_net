{"pageProps":{"postData":{"id":["2022","intro_to_just"],"path":"2022/intro_to_just","contentHtml":"<p>I believe every project should have a CLI built around the standard workflows of developing\non the project.  Things like:</p>\n<ul>\n<li>Install dependencies</li>\n<li>Run tests</li>\n<li>Run linter and formatters</li>\n<li>Build project</li>\n<li>Start / Stop the docker environment</li>\n</ul>\n<p>The reason I think this is important is because it makes a nice consistent and discoverable\nentrypoint for understanding how you should work in the project.   If you only provide the\ninstructions in the <code>README</code> then you have to remember to update those docs every time you\nadd a new command.  Those docs aren't easily testable either.</p>\n<p>Most of my career the command runner of choice for my projects as been <code>GNU Make</code> but it was\ndefinitely the wrong tool for the job.  It is a build tool that I bent into shape to work\nas a command runner for me.   These days I use the tool <a href=\"https://github.com/casey/just\">just</a>.</p>\n<h2>Intro to just</h2>\n<p><a href=\"https://github.com/casey/just\">Just</a> is a modern command runner with a similar syntax to <code>make</code>\nthat provides a nice way for building out your project CLI!  You create a file named <code>justfile</code>\nat the root of your project and then the basic syntax is:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">help:</span>\n  @just --list\n\n<span class=\"hljs-comment\"># My first command</span>\n<span class=\"hljs-section\">first:</span>\n  echo <span class=\"hljs-string\">\"Any commands you want to run go here!\"</span>\n</code></pre>\n<p>The first <code>help</code> line defines a command \"help\" for your CLI and it lists out all the other available\ncommans.  I always put this line first because <code>just</code> runs the first command in the file if a specific\ncommand isn't requested.  The output of this file looks like this:</p>\n<pre><code class=\"hljs language-bash\">❯ just\nAvailable recipes:\n    first <span class=\"hljs-comment\"># My first command</span>\n    <span class=\"hljs-built_in\">help</span>\n</code></pre>\n<p>Having help automatically generated is fantastic!  Its also really helpful that it adds the comment\nto the command so that each command is self-documenting.  If you run the <code>first</code> command you'll notice\nit also has a feature where it prints out the commands being ran so the user knows exactly what is\nhappening:</p>\n<pre><code class=\"hljs language-bash\">❯ just first\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Any commands you want to run go here!\"</span>\nAny commands you want to run go here!\n</code></pre>\n<p>This doesn't always make sense though, so you can quickly remove that behavior by putting an <code>@</code> in front\nof any of the commands, like I did for the <code>help</code> command above.  You can also declare dependencies if\nyou have re-usable parts of your workflow that many of your commands need.</p>\n<p>For example, you might want to check versions of things like <code>node</code> and <code>python</code> before running the install\nof their dependencies. So you could do something like:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">help:</span>\n  @just --list\n\nnode_version := <span class=\"hljs-string\">\"v17.6.0\"</span>\n\n<span class=\"hljs-comment\"># Verify system dependencies</span>\n<span class=\"hljs-section\">check-dependencies:</span>\n  @if [ ! <span class=\"hljs-string\">\"$(node --version)\"</span> = {{ node_version }} ]; \\\n  then \\\n    echo <span class=\"hljs-string\">\"Missing node version: {{ node_version }}\"</span>; \\\n    exit 1; \\\n  fi\n\n<span class=\"hljs-comment\"># Install frontend</span>\n<span class=\"hljs-section\">install: check-dependencies</span>\n  @echo <span class=\"hljs-string\">\"yarn install\"</span>\n</code></pre>\n<p>which ends up with a CLI that looks like this:</p>\n<pre><code class=\"hljs language-bash\">❯ just\nAvailable recipes:\n    check-dependencies <span class=\"hljs-comment\"># Verify system dependencies</span>\n    <span class=\"hljs-built_in\">help</span>\n    install            <span class=\"hljs-comment\"># Install frontend</span>\n\n❯ just install\nMissing node version: v17.6.0\nerror: Recipe `check-dependencies` failed on line 12 with <span class=\"hljs-built_in\">exit</span> code 1\n</code></pre>\n<p>This opens up a lot of possibilities! In the above <code>justfile</code> you'll notice I'm using a multi-line\ncommand but I have <code>\\</code> at the end of each line.  This is because <code>just</code> by default is going to run\neach new line in their own shell.   So this just makes all those lines run in the same shell.</p>\n<p>You do not have to use this syntax though.  Just is <code>polyglot</code> and can run commands from any language\nyou would like.</p>\n<h3>Polyglot</h3>\n<p>If you want to use a bash script as one of your commands, you can do so by adding a shebang at the top:</p>\n<pre><code class=\"hljs language-make\"><span class=\"hljs-section\">check-dependencies:</span>\n  <span class=\"hljs-comment\">#!/usr/bin/env bash</span>\n  set -euxo pipefail\n  if [ ! <span class=\"hljs-string\">\"$(node --version)\"</span> = {{ node_version }} ];\n  then\n    echo <span class=\"hljs-string\">\"Missing node version: {{ node_version }}\"</span>\n    exit 1\n  fi\n</code></pre>\n<p>Now the entire command is using a bash script to execute! This gets really interesting if you want to start\nusing things like python, so if you'd like to change the dependency checker above to python:</p>\n<pre><code class=\"hljs language-python\">check-dependencies:\n  <span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n  <span class=\"hljs-keyword\">import</span> subprocess\n  result = subprocess.run(\n    [<span class=\"hljs-string\">'node'</span>, <span class=\"hljs-string\">'--version'</span>],\n    stdout=subprocess.PIPE\n  )\n  <span class=\"hljs-keyword\">if</span> result != <span class=\"hljs-string\">\"{{ node_version }}\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Missing node version: {{ node_version }}\"</span>)\n    exit(<span class=\"hljs-number\">1</span>)\n</code></pre>\n<p>You can even tell <code>just</code> that you want to use a specific language for all commands!</p>\n<pre><code class=\"hljs language-arduino\">set shell := [<span class=\"hljs-string\">\"python3\"</span>, <span class=\"hljs-string\">\"-c\"</span>]\n</code></pre>\n<p>This not only affects the commands you have in your recipe but also anything inside\nbackticks!  So something like:</p>\n<pre><code class=\"hljs language-make\">`print(<span class=\"hljs-string\">\"Rust is the best programming language\"</span>)`\n</code></pre>\n<p>It would run through python instead of the shell.</p>\n<h3>Enviornment Files</h3>\n<p>One of the other modern things <code>just</code> adds to your workflow is the ability to utilize dotenv\nfiles.  So for example if you want to define which port you launch your http server on, you can\ncreate a file called <code>.env</code>:</p>\n<pre><code class=\"hljs language-bash\">WEBSERVER_PORT=9000\n</code></pre>\n<p>and then utilize it in your <code>justfile</code>:</p>\n<pre><code class=\"hljs language-make\">set dotenv-load\n\n<span class=\"hljs-section\">http:</span>\n  @echo <span class=\"hljs-string\">\"Starting webserver in current directory\"</span>\n  python3 -m http.server $WEBSERVER_PORT\n</code></pre>\n<p>When you run <code>just http</code> it'll launch the http server on port 9000.  One important line\nin this file is <code>set dotenv-load</code>, it will not load the <code>.env</code> file without you telling it to.</p>\n<h2>Don't use language specific scripts!</h2>\n<p>I'n not a fan of language specific command runners like <code>package.json</code> in the node community.</p>\n<p>It always frustrates me when I start working on a project that heavily uses <code>scripts</code> in their\npackage.json instead of using a real command runner. <code>json</code> is not a great format for writing\ndiscoverable CLI commands. For example if you wanted to write a <code>next.js</code> build script:</p>\n<pre><code class=\"hljs language-json\">    <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">\"predeploy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"yarn build &#x26;&#x26; yarn export &#x26;&#x26; touch dist/.nojekyll &#x26;&#x26; echo sontek.net > dist/CNAME\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"deploy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"gh-pages -d dist -t true\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"build\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next build\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">\"export\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"next export -o dist/\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>Combining all those commands is really messy and not easily understandable through <code>yarn run</code>:</p>\n<pre><code class=\"hljs language-bash\">❯ yarn run\nyarn run v1.22.17\ninfo Commands available from binary scripts: autoprefixer, browserslist, css-blank-pseudo, css-has-pseudo, css-prefers-color-scheme, cssesc, esparse, esvalidate, extract-zip, gh-pages, gh-pages-clean, js-yaml, loose-envify, nanoid, next, prettier, resolve, rimraf, semver, svgo, uvu\ninfo Project commands\n   - build\n      next build\n   - deploy\n      gh-pages -d dist -t <span class=\"hljs-literal\">true</span>\n   - <span class=\"hljs-built_in\">export</span>\n      next <span class=\"hljs-built_in\">export</span> -o dist/\n   - predeploy\n      yarn build &#x26;&#x26; yarn <span class=\"hljs-built_in\">export</span> &#x26;&#x26; <span class=\"hljs-built_in\">touch</span> dist/.nojekyll &#x26;&#x26; <span class=\"hljs-built_in\">echo</span> sontek.net > dist/CNAME\n</code></pre>\n<p>I'd much rather have this:</p>\n<pre><code class=\"hljs language-bash\">❯ just\nAvailable recipes:\n    build       <span class=\"hljs-comment\"># Build frontend assets</span>\n    deploy      <span class=\"hljs-comment\"># Deploy assets to cloudfront</span>\n    <span class=\"hljs-built_in\">export</span>      <span class=\"hljs-comment\"># Export to static assets (no SSR)</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p><a href=\"https://github.com/casey/just\">Just</a> is a wonderful tool for building project specific CLIs without much effort. It is\na great replacement for <code>Make</code> if you are using it as a command runner and it has most of the features you'd need.</p>\n<p>I recommend adding a <code>justfile</code> to your projects today! If you'd like to see a real world example of how to use <code>just</code>,\nyou can check out the one I use to maintain my <a href=\"https://github.com/sontek/homies/blob/master/justfile\">home directory</a>!</p>","category":"development\n","date":"2022-02-25T16:00:00-08:00","tags":"linux\n","title":"Automate project workflows with the command runner Just!"}},"__N_SSG":true}