{"pageProps":{"postData":{"id":["old","tips_and_tricks_for_the_python_interpreter"],"path":"old/tips_and_tricks_for_the_python_interpreter","contentHtml":"<p>I have seen a lot of people switch over to using ipython, bpython, etc\nto get auto-complete support without realizing that the standard\ninterpreter does have this functionality.</p>\n<p>To enable auto-complete support in the python interpreter you need to\ncreate a python startup file that enables readline support. A python\nstartup file is just a bunch of python code that gets executed at\nstartup of the interpreter. To do this you just setup PYTHONSTARTUP in\nyour ~/.bashrc and then create a ~/.pythonrc.py file:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">#.bashrc</span>\nPYTHONSTARTUP=~/.pythonrc.py\nexport PYTHONSTARTUP\n\n<span class=\"hljs-comment\">#.pythonrc.py</span>\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">import</span> readline\n<span class=\"hljs-keyword\">except</span> ImportError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Module readline not available.\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">import</span> rlcompleter\n    readline.parse_and_bind(<span class=\"hljs-string\">\"tab: complete\"</span>)\n</code></pre>\n<p>Now when you are in python you have tab completion on importing, calling\nmethods on a module, etc.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">import</span> o\n<span class=\"hljs-built_in\">object</span>(  <span class=\"hljs-built_in\">oct</span>(     <span class=\"hljs-built_in\">open</span>(    <span class=\"hljs-keyword\">or</span>       <span class=\"hljs-built_in\">ord</span>(     os\n</code></pre>\n<p>I always end up using the pretty print module for viewing long lists and\nstrings in the interpreter so I prefer to just use it by default:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Enable Pretty Printing for stdout</span>\n<span class=\"hljs-keyword\">import</span> pprint\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_displayhook</span>(<span class=\"hljs-params\">value</span>):\n    <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-keyword\">import</span> __builtin__\n            __builtin__._ = value\n        <span class=\"hljs-keyword\">except</span> ImportError:\n            __builtins__._ = value\n\n        pprint.pprint(value)\n\nsys.displayhook = my_displayhook\n</code></pre>\n<p>It is also very useful to be able to load up your favorite editor to\nedit lines of code from the interpreter, you can do this by adding the\nfollowing into your ~/.pythonrc.py:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> code <span class=\"hljs-keyword\">import</span> InteractiveConsole\n<span class=\"hljs-keyword\">from</span> tempfile <span class=\"hljs-keyword\">import</span> mkstemp\n\nEDITOR = os.environ.get(<span class=\"hljs-string\">'EDITOR'</span>, <span class=\"hljs-string\">'vi'</span>)\nEDIT_CMD = <span class=\"hljs-string\">'\\e'</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditableBufferInteractiveConsole</span>(<span class=\"hljs-title class_ inherited__\">InteractiveConsole</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):\n        self.last_buffer = [] <span class=\"hljs-comment\"># This holds the last executed statement</span>\n        InteractiveConsole.__init__(self, *args, **kwargs)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">runsource</span>(<span class=\"hljs-params\">self, source, *args</span>):\n        self.last_buffer = [ source.encode(<span class=\"hljs-string\">'latin-1'</span>) ]\n        <span class=\"hljs-keyword\">return</span> InteractiveConsole.runsource(self, source, *args)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">raw_input</span>(<span class=\"hljs-params\">self, *args</span>):\n        line = InteractiveConsole.raw_input(self, *args)\n        <span class=\"hljs-keyword\">if</span> line == EDIT_CMD:\n            fd, tmpfl = mkstemp(<span class=\"hljs-string\">'.py'</span>)\n            os.write(fd, <span class=\"hljs-string\">b'\\n'</span>.join(self.last_buffer))\n            os.close(fd)\n            os.system(<span class=\"hljs-string\">'%s %s'</span> % (EDITOR, tmpfl))\n            line = <span class=\"hljs-built_in\">open</span>(tmpfl).read()\n            os.unlink(tmpfl)\n            tmpfl = <span class=\"hljs-string\">''</span>\n            lines = line.split( <span class=\"hljs-string\">'\\n'</span> )\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(lines) - <span class=\"hljs-number\">1</span>): self.push( lines[i] )\n            line = lines[-<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">return</span> line\n\nc = EditableBufferInteractiveConsole(<span class=\"hljs-built_in\">locals</span>=<span class=\"hljs-built_in\">locals</span>())\nc.interact(banner=<span class=\"hljs-string\">''</span>)\n\n<span class=\"hljs-comment\"># Exit the Python shell on exiting the InteractiveConsole</span>\nsys.exit()\n</code></pre>\n<p>For Django developers when you load up the ./manage.py shell it is nice\nto have access to all your models and settings for testing:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># If we're working with a Django project, set up the environment</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'DJANGO_SETTINGS_MODULE'</span> <span class=\"hljs-keyword\">in</span> os.environ:\n    <span class=\"hljs-keyword\">from</span> django.db.models.loading <span class=\"hljs-keyword\">import</span> get_models\n    <span class=\"hljs-keyword\">from</span> django.test.client <span class=\"hljs-keyword\">import</span> Client\n    <span class=\"hljs-keyword\">from</span> django.test.utils <span class=\"hljs-keyword\">import</span> setup_test_environment, teardown_test_environment\n    <span class=\"hljs-keyword\">from</span> django.conf <span class=\"hljs-keyword\">import</span> settings <span class=\"hljs-keyword\">as</span> S\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DjangoModels</span>(<span class=\"hljs-title class_ inherited__\">object</span>):\n        <span class=\"hljs-string\">\"\"\"Loop through all the models in INSTALLED_APPS and import them.\"\"\"</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n            <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> get_models():\n                <span class=\"hljs-built_in\">setattr</span>(self, m.__name__, m)\n\n    A = DjangoModels()\n    C = Client()\n</code></pre>\n<p>After these tweaks the python interpreter is a lot more powerful and you\nreally lose the need for the more interactive shells like ipython and\nbpython. All of these settings work in both python2 and python3.</p>\n<p>If you want to see my complete ~/.pythonrc.py you can get it on\n<a href=\"https://github.com/sontek/dotfiles/blob/master/_pythonrc.py\">github</a></p>","category":"development","date":"2010-12-28T00:00:00Z","tags":["python"],"title":"Tips and Tricks for the Python Interpreter"}},"__N_SSG":true}