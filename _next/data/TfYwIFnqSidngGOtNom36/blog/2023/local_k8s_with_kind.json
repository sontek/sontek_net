{"pageProps":{"postData":{"id":["2023","local_k8s_with_kind"],"path":"2023/local_k8s_with_kind","contentHtml":"<p>Previously I <a href=\"/blog/2022/local_kubeadm_cluster\">showed</a> how to run kubernetes\nlocally with <code>kubeadm</code> and VMs but sometimes that is overkill so I wanted to\nshow how to run <a href=\"https://kind.sigs.k8s.io/\">kind</a> which is \"kuberetes in\ndocker\".</p>\n<h1>Creating your first cluster</h1>\n<p>kind is a very flexible way to run kubernetes locally and allows you to run\nsingle node or multinode clusters while having the flexibility to use all\nthe features of kubernetes success as ingress.</p>\n<p>To create your first cluster it is as simple as running:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kind create cluster  \n\nCreating cluster <span class=\"hljs-string\">\"kind\"</span> ...\n ‚úì Ensuring node image (kindest/node:v1.27.3) üñº \n ‚úì Preparing nodes üì¶  \n ‚úì Writing configuration üìú \n ‚úì Starting control-plane üïπÔ∏è \n ‚úì Installing CNI üîå \n ‚úì Installing StorageClass üíæ \nSet kubectl context to <span class=\"hljs-string\">\"kind-kind\"</span>\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nHave a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/<span class=\"hljs-comment\">#community üôÇ</span>\n</code></pre>\n<p>You now have a functioning kubernetes cluster and you\ncan view what it created:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ k get node\nNAME                 STATUS   ROLES           AGE     VERSION\nkind-control-plane   Ready    control-plane   4m26s   v1.27.3\n</code></pre>\n<p>You can also verify that it is running inside docker:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ docker ps\nCONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS                       NAMES\n1c3ba74dc29b   kindest/node:v1.27.3   <span class=\"hljs-string\">\"/usr/local/bin/entr‚Ä¶\"</span>   3 minutes ago   Up 3 minutes   127.0.0.1:59327->6443/tcp   kind-control-plane\n</code></pre>\n<h1>Making the cluster useful</h1>\n<p>There are a few things you'll notice with the command we ran originally:</p>\n<ul>\n<li>It grabbed the latest kubernetes version available</li>\n<li>It is running a single node cluster</li>\n<li>No ingress available</li>\n</ul>\n<p>Luckily kind makes it really easy to customize your local cluster to be what\nyou want it to be by using a <code>YAML</code> configuration.</p>\n<p>Create the configuration:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Cluster</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kind.x-k8s.io/v1alpha4</span>\n<span class=\"hljs-attr\">nodes:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">control-plane</span>\n  <span class=\"hljs-attr\">kubeadmConfigPatches:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">|\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n</span>  <span class=\"hljs-attr\">extraPortMappings:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">80</span>\n    <span class=\"hljs-attr\">hostPort:</span> <span class=\"hljs-number\">80</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">443</span>\n    <span class=\"hljs-attr\">hostPort:</span> <span class=\"hljs-number\">443</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">worker</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">worker</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">role:</span> <span class=\"hljs-string\">worker</span>\n</code></pre>\n<p>With this we've now generated a 4 node cluster where we have a single\ncontrol-plane and three workers.  Then we defined some extra configuration on\nthe control-plane:</p>\n<ul>\n<li><strong>kubeadmConfigPatches</strong>: We want to change the default configuration the\ncluster uses so it'll tag the nodes with the <code>ingress-ready</code> label so the\ncontroller will use them.</li>\n<li><strong>extraPortMappings</strong>: allow the local host to make requests to the Ingress controller over ports 80/443</li>\n<li><strong>node-labels</strong>: only allow the ingress controller to run on specific node(s) matching the label selector</li>\n</ul>\n<p>So now we can create the new cluster with the configuration. Save that config\nas <code>kind_config.yml</code> and then run:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kind create cluster --image kindest/node:v1.25.11 --config kind_config.yml --name kind-multinode\n</code></pre>\n<p>This time I've added a few additional flags on the commandline. <code>--image</code>\nallows us to use a different version of kubernetes and <code>--name</code> allows us to\nmake more than one cluster. So if you didn't destroy the first cluster you'll\nsee we have two of them now:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kind get clusters\nkind\nkind-multinode\n</code></pre>\n<p>but <code>kind</code> will swap the to the newest cluster by default:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl config current-context\nkind-kind-multinode\n\n‚ùØ kubectl get node\nNAME                           STATUS   ROLES           AGE    VERSION\nkind-multinode-control-plane   Ready    control-plane   107s   v1.25.11\nkind-multinode-worker          Ready    &#x3C;none>          88s    v1.25.11\nkind-multinode-worker2         Ready    &#x3C;none>          88s    v1.25.11\nkind-multinode-worker3         Ready    &#x3C;none>          88s    v1.25.11\n</code></pre>\n<p>Now we need to get the <code>ingress-nginx</code> controller installed so we can start\nusing our cluster with ingress:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n</code></pre>\n<p>The manifests contains <code>kind</code> specific patches to forward the hostPorts to the ingress controller, set taint tolerations and schedule it to the custom labelled node.</p>\n<p>This will take a little bit of time to get up and running, you can monitor it\nby running:</p>\n<pre><code class=\"hljs language-bash\">kubectl <span class=\"hljs-built_in\">wait</span> --namespace ingress-nginx \\\n  --<span class=\"hljs-keyword\">for</span>=condition=ready pod \\\n  --selector=app.kubernetes.io/component=controller \\\n  --<span class=\"hljs-built_in\">timeout</span>=90s\n</code></pre>\n<p>or just manually check the status:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl get all -n ingress-nginx\nNAME                                            READY   STATUS              RESTARTS   AGE\npod/ingress-nginx-admission-create-bbmlc        0/1     Completed           0          68s\npod/ingress-nginx-admission-patch-qlnr8         0/1     Completed           2          68s\npod/ingress-nginx-controller-5f748f78c8-6tc6b   0/1     ContainerCreating   0          68s\n\nNAME                                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\nservice/ingress-nginx-controller             NodePort    10.96.228.248   &#x3C;none>        80:31771/TCP,443:31759/TCP   68s\nservice/ingress-nginx-controller-admission   ClusterIP   10.96.180.126   &#x3C;none>        443/TCP                      68s\n\nNAME                                       READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/ingress-nginx-controller   0/1     1            0           68s\n\nNAME                                                  DESIRED   CURRENT   READY   AGE\nreplicaset.apps/ingress-nginx-controller-5f748f78c8   1         1         0       68s\n\nNAME                                       COMPLETIONS   DURATION   AGE\njob.batch/ingress-nginx-admission-create   1/1           22s        68s\njob.batch/ingress-nginx-admission-patch    1/1           35s        68s\n</code></pre>\n<p>Once <code>ingress-nginx-controller</code> is in <code>Running</code> state you are read to go!</p>\n<h1>Deploying your first app</h1>\n<p>To prove that the cluster is working correctly we will deploy\n<a href=\"https://github.com/Kong/httpbin\">httpbin</a> which is a nice little API server\nso we can prove everything is working.</p>\n<p>Create a <code>httbin.yml</code> file and paste this into it:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpbin</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">httpbin</span>\n    <span class=\"hljs-attr\">service:</span> <span class=\"hljs-string\">httpbin</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8000</span>\n    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8080</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">httpbin</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpbin</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">httpbin</span>\n      <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">v1</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">httpbin</span>\n        <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">v1</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.io/mccutchen/go-httpbin</span>\n        <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpbin</span>\n        <span class=\"hljs-attr\">ports:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8080</span>\n</code></pre>\n<p>This is creating a couple of Kubernetes resources:</p>\n<ul>\n<li><code>Service</code>: This is exposing the port to the ingress</li>\n<li><code>Deployment</code>: This is actually launching the service</li>\n</ul>\n<p>So we are not using the ingress yet but we can prove that we can launch the\nservice at least.  So apply those manifests:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl apply -f httpbin.yml \nservice/httpbin created\ndeployment.apps/httpbin created\n</code></pre>\n<p>You should see two pods come up.  You should wait for them to get into the\n<code>Running</code> status:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl get pod -o wide\nNAME                      READY   STATUS    RESTARTS   AGE   IP           NODE                     NOMINATED NODE   READINESS GATES\nhttpbin-5c5494967-2z5wz   1/1     Running   0          48s   10.244.3.3   kind-multinode-worker3   &#x3C;none>           &#x3C;none>\nhttpbin-5c5494967-9lf47   1/1     Running   0          72s   10.244.1.2   kind-multinode-worker    &#x3C;none>           &#x3C;none>\n</code></pre>\n<p>We can now use port forwarding to access it. <code>httpbin</code> is exposed on <code>8000</code> so\nlets create port <code>9000</code> on our host that forwards to it:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ kubectl port-forward service/httpbin 9000:8000\nForwarding from 127.0.0.1:9000 -> 80\nForwarding from [::1]:9000 -> 80\n</code></pre>\n<p>You can access it via:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ curl localhost:9000/get \n{\n  <span class=\"hljs-string\">\"args\"</span>: {},\n  <span class=\"hljs-string\">\"headers\"</span>: {\n    <span class=\"hljs-string\">\"Accept\"</span>: [\n      <span class=\"hljs-string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\"</span>\n    ],\n}\n</code></pre>\n<h1>Using Ingress</h1>\n<p>Now to use the ingress rather than port forwarding we create one additional\nresource, the <code>Ingress</code>:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">networking.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Ingress</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpbin-ingress</span>\n  <span class=\"hljs-attr\">annotations:</span>\n    <span class=\"hljs-attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"hljs-string\">/$2</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ingressClassName:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">http:</span>\n      <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/httpbin(/|$)(.*)</span>\n        <span class=\"hljs-attr\">pathType:</span> <span class=\"hljs-string\">ImplementationSpecific</span>\n        <span class=\"hljs-attr\">backend:</span>\n          <span class=\"hljs-attr\">service:</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpbin</span>\n            <span class=\"hljs-attr\">port:</span>\n              <span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">8000</span>\n</code></pre>\n<p>There are a few critical options here.  The first is the annotation to rewrite\nthe path so it doesn't include <code>/httpbin/</code> when it sends the request to the\nservice and then the <code>path</code> and <code>pathType</code> so it knows which paths to send to\nwhich service.</p>\n<p>Now you should be able to hit your local host and get routed to your\nkubernetes service:</p>\n<pre><code class=\"hljs language-bash\">‚ùØ curl localhost/httpbin/get\n</code></pre>\n<p>Success!  Now you have a multinode kubernetes cluster that has an ingress\ncontroller!</p>\n<h1>Next Steps</h1>\n<p>The cluster can be used like a production cluster now for local\ndevelopment!  You could setup Grafana, ArgoCD, etc. to run\ninside the cluster.</p>","category":"Kubernetes","date":"2023-07-21T00:00:00Z","tags":["Linux","Kubernetes","DevOps","SRE"],"title":"Running a kubernetes cluster locally with kind"}},"__N_SSG":true}