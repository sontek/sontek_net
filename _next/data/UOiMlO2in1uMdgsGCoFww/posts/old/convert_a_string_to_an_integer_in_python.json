{"pageProps":{"postData":{"id":["old","convert_a_string_to_an_integer_in_python"],"path":"old/convert_a_string_to_an_integer_in_python","contentHtml":"<p>A fun interview question some developers like to ask is to have you\nconvert ascii characters to an integer without using built in methods\nlike string.atoi or int().</p>\n<p>So using python the obvious ways to convert a string to an integer are\nthese:</p>\n<pre><code><span>>>> </span><span>int</span>(<span>'1234'</span>)\n<span>1234</span>\n<span>>>> </span><span>import</span> string\n<span>>>> </span>string.atoi(<span>'1234'</span>)\n<span>1234</span></code></pre>\n<p>The interesting thing here is finding out where on the ascii character\ntable the number is. Luckily python has this already built in with the\nord method:</p>\n<pre><code><span>>>> </span><span>help</span>(<span>ord</span>)\n\n<span>ord</span>(...)\n    <span>ord</span>(c) -> integer\n\n    Return the integer ordinal of a one-character string.\n\n<span>>>> </span><span>ord</span>(<span>'1'</span>)\n<span>49</span>\n<span>>>> </span><span>ord</span>(<span>'2'</span>)\n<span>50</span></code></pre>\n<p>You can see that the numbers are grouped together on the ascii table, so\nyou just have to grab '0' as the base and subtract the rest:</p>\n<pre><code><span>>>> </span><span>ord</span>(<span>'1'</span>)-<span>ord</span>(<span>'0'</span>)\n<span>1</span></code></pre>\n<p>So if we have the string '1234', we can get each of the individual\nnumbers by looping over it:</p>\n<pre><code><span>>>> </span>num_string = <span>'1234'</span>\n<span>>>> </span>num_list = []\n<span>>>> </span>base = <span>ord</span>(<span>'0'</span>)\n<span>>>> </span><span>for</span> num <span>in</span> num_string:\n<span>... </span>  num_list.append(<span>ord</span>(num) - base)\n...\n<span>>>> </span><span>print</span> num_list\n[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]</code></pre>\n<p>but now how to we combine all these together to get 1234? You can't\njust add them up because you'll just get 1+2+3+4 = 10.</p>\n<p>So, we have to get 1000 + 200 + 30 + 4, which is a simple problem to\nsolve. Its just number times 10 to the nth power, so the final solution\nis:</p>\n<pre><code>num = <span>'1234'</span>\nnew_num = <span>0</span>\nbase = <span>ord</span>(<span>'0'</span>)\n\n<span>for</span> i,n <span>in</span> <span>enumerate</span>(<span>reversed</span>(num)):\n      new_num += (<span>ord</span>(n) - base) * (<span>10</span>**i)\n\n<span>print</span> new_num</code></pre>\n<p>This code is a little verbose though, lets make it a dirty nasty one\nliner!</p>\n<pre><code><span>>>> </span><span>sum</span>([(<span>ord</span>(n)-<span>ord</span>(<span>'0'</span>)) * (<span>10</span> ** i) <span>for</span> i,n <span>in</span> <span>enumerate</span>(<span>reversed</span>(<span>'1234'</span>))])\n<span>1234</span></code></pre>\n","category":"python\n","date":"2010-10-27T20:00:00-04:00","tags":"python, interviews\n","title":"Convert a string to an integer in Python"}},"__N_SSG":true}