{"pageProps":{"postData":{"id":"caesar_cipher_in_python","contentHtml":"<p>I'm currently teaching my wife to code and one of the problems that we\nworked on to teach her some fundamental programming concepts was\nre-implementing the caesar cipher in python. It was fun not only to code\nbut to also start sending each other \"secret\" messages!</p>\n<p>The caesar cipher is a rather simple encoding, you just shift the\nalphabet a certain amount of characters. For example, if you are using a\nshift of 2:</p>\n<pre><code>a => c\nb => d\ny => a\nz => b\n</code></pre>\n<p>Using this as an interview type question would provide a few interesting\nproblems and give you a good perspective on how good a developers\nproblem solving skills are and how knowledgeable they are in the\nlanguage of their choice.</p>\n<p>The first issue is to handle the beginning and end of the alphabet, if\nyou are encoding 'z' then you will have to start your shift on a. The\nsecond problem is to only encode letters since there was no ascii table\nto define in what order characters are shifted back in those times.</p>\n<p>Without using too much of the built in python niceties you could do\nsomething similar to this:</p>\n<pre><code><span>#!/usr/bin/python</span>\n<span>def</span> <span>decode_shift_letter</span>(<span>current_ord, start, end, shift</span>):\n    <span>if</span> current_ord - shift &#x3C; start:\n        new_ord = (current_ord + <span>26</span>) - shift\n        <span>return</span> <span>chr</span>(new_ord)\n    <span>else</span>:\n        <span>return</span> <span>chr</span>(current_ord-shift)\n\n<span>def</span> <span>encode_shift_letter</span>(<span>current_ord, start, end, shift</span>):\n    <span>if</span> current_ord + shift > end:\n        new_ord = (current_ord - <span>26</span>) + shift\n        <span>return</span> <span>chr</span>(new_ord)\n    <span>else</span>:\n        <span>return</span> <span>chr</span>(current_ord+shift)\n\n<span>def</span> <span>decode</span>(<span><span>input</span>, shift</span>):\n    <span>return</span> modify_input(<span>input</span>, shift, decode_shift_letter)\n\n<span>def</span> <span>encode</span>(<span><span>input</span>, shift</span>):\n    <span>return</span> modify_input(<span>input</span>, shift, encode_shift_letter)\n\n<span>def</span> <span>modify_input</span>(<span><span>input</span>, shift, shift_letter</span>):\n    new_sentence = <span>''</span>\n\n    <span>for</span> letter <span>in</span> <span>input</span>:\n        <span># we only encode letters, random characters like +!%$ are not encoded.</span>\n        <span># Lower and Capital letters are not stored near each other on the</span>\n        <span># ascii table</span>\n        lower_start = <span>ord</span>(<span>'a'</span>)\n        lower_end = <span>ord</span>(<span>'z'</span>)\n        upper_start = <span>ord</span>(<span>'A'</span>)\n        upper_end = <span>ord</span>(<span>'Z'</span>)\n        current_ord = <span>ord</span>(letter)\n\n        <span>if</span> current_ord >= lower_start <span>and</span> current_ord &#x3C;= lower_end:\n            new_sentence += shift_letter(current_ord, lower_start, lower_end, shift)\n        <span>elif</span> current_ord >= upper_start <span>and</span> current_ord &#x3C;= upper_end:\n            new_sentence += shift_letter(current_ord, upper_start, upper_end, shift)\n        <span>else</span>:\n            new_sentence += letter\n\n    <span>return</span> new_sentence\n\n\n<span>def</span> <span>get_shift</span>():\n    <span>try</span>:\n        shift = <span>int</span>(raw_input(<span>'What shift would you like to use?\\n'</span>))\n    <span>except</span> ValueError:\n        <span>print</span> <span>'Shift must be a number'</span>\n        shift = get_shift()\n\n    <span>if</span> <span>not</span> (shift > <span>0</span> <span>and</span> shift &#x3C;= <span>25</span>):\n        <span>print</span> <span>'Shift must be between 1 and 25'</span>\n        shift = get_shift()\n\n    <span>return</span> shift\n\n<span>def</span> <span>main</span>():\n    <span>try</span>:\n        task = <span>int</span>(raw_input(<span>'1) Encode \\n'</span>+ \\\n                             <span>'2) Decode \\n'</span>))\n    <span>except</span> ValueError:\n        <span>print</span> <span>'Invalid task, try again!'</span>\n        main()\n\n    shift = get_shift()\n    <span>input</span> = raw_input(<span>'What message would you like to %s\\n'</span> % (<span>'Encode'</span> <span>if</span> task == <span>1</span> <span>else</span> <span>'Decode'</span>))\n\n    <span>if</span> task == <span>1</span>:\n        <span>print</span> encode(<span>input</span>, shift)\n    <span>elif</span> task == <span>2</span>:\n        <span>print</span> decode(<span>input</span>, shift)\n\n<span>if</span> __name__ == <span>'__main__'</span>:\n    main()</code></pre>\n<p>This would prove that you are a decent problem solver and have enough of\nthe language to get things done but if you want to prove you have\nmastered the python language you might take advantage of some slicing\nand some methods out of the string module and change your code to look\nsomething like:</p>\n<pre><code><span>from</span> string <span>import</span> letters, maketrans\n\n<span>def</span> <span>decode</span>(<span><span>input</span>, shift</span>):\n    <span>return</span> modify_input(<span>input</span>, -shift)\n\n<span>def</span> <span>encode</span>(<span><span>input</span>, shift</span>):\n    <span>return</span> modify_input(<span>input</span>, shift)\n\n<span>def</span> <span>modify_input</span>(<span><span>input</span>, shift</span>):\n    trans = maketrans(letters, letters[shift:] + letters[:shift])\n    <span>return</span> <span>input</span>.translate(trans)</code></pre>\n<p>Do get more information on string.letters and string.maketrans you can\nvisit their documentation\n[here](<a href=\"http://docs.python.org/library/string.html\">http://docs.python.org/library/string.html</a>)</p>\n","category":"none\n","date":"2010-11-14T20:00:00-04:00","tags":"python, interviews\n","title":"Caesar Cipher in Python"}},"__N_SSG":true}